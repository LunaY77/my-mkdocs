{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p> \u200b\u7ea6\u200b 170 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>\u201c\u200b\u76f8\u4fe1\u200b\u7684\u200b\u5fc3\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff01\u201d</p> <p></p> <ul> <li> <p> \u200b\u63a8\u8350\u200b\u7684\u200b\u6587\u7ae0\u200b</p> <ul> <li>linux\u200b\u73af\u5883\u200b\u90e8\u7f72\u200b</li> <li>Dijkstra\u200b\u7b97\u6cd5\u200b\u6a21\u7248\u200b</li> </ul> </li> <li> <p> \u200b\u5173\u4e8e\u200b</p> <ul> <li>\u200b\u53cb\u94fe\u200b</li> <li>Blogger </li> <li> \u200b\u4e86\u89e3\u200b\u6211\u200b</li> </ul> </li> </ul> <p> \u200b\u672c\u7ad9\u200b\u5df2\u7ecf\u200b\u8fd0\u884c\u200b </p>"},{"location":"about/link/","title":"\u6b22\u8fce\u200b\u52a0\u5165\u200b\u53cb\u94fe","text":"<p> \u200b\u7ea6\u200b 149 \u200b\u4e2a\u200b\u5b57\u200b  15 \u200b\u884c\u200b\u4ee3\u7801\u200b  5 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> \u200b\u82cd\u955c\u200b\u6708\u200b's docs              \u200b\u76f8\u4fe1\u200b\u7684\u200b\u5fc3\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff01            Knowledge is magic              \u200b\u5f97\u5fd7\u200b\u5f53\u4e3a\u200b\u5929\u4e0b\u200b\u96e8\u200b            \u200b\u5feb\u4e50\u200b\u5c0f\u725b\u200b\u7684\u200b\u535a\u5ba2\u200b\u7ad9\u200b              \u200b\u5feb\u4e50\u200b\u5c0f\u725b\u200b            Adrian\u2018s World              \u200b\u5206\u88c2\u200b\u7684\u200b\u5f57\u661f\u200b\u5728\u200b\u9ec4\u660f\u200b\u8fc7\u540e\u200b\u5f15\u6e21\u200b\u751f\u547d\u200b\u548c\u200b\u7231\u200b            \u200b\u4ea4\u6362\u200b\u53cb\u94fe\u200b\uff0c\u200b\u8bf7\u200b\u6dfb\u52a0\u200b\u672c\u200b\u7ad9\u53cb\u200b\u94fe\u540e\u200b\u4e0b\u65b9\u200b\u7559\u8a00\u200b\u7533\u8bf7\u200b\uff0c\u200b\u671f\u671b\u200b\u60a8\u200b\u7684\u200b\u7ad9\u70b9\u200b: <p>\u200b\u53cb\u94fe\u200b\u683c\u5f0f\u200b\u793a\u4f8b\u200b/\u200b\u672c\u7ad9\u200b\u4fe1\u606f\u200b:</p> TXTHTML(\u200b\u63a8\u8350\u200b)YAML <p>\u200b\u540d\u79f0\u200b: \u200b\u82cd\u955c\u200b\u6708\u200b's docs</p> <p>\u200b\u94fe\u63a5\u200b: https://cangjingyue.top</p> <p>\u200b\u5934\u50cf\u200b: https://s2.loli.net/2024/11/12/skvZLdl76xBab4C.png</p> <p>\u200b\u7b80\u4ecb\u200b: \u200b\u76f8\u4fe1\u200b\u7684\u200b\u5fc3\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff01</p> <p>\u200b\u63a8\u8350\u200b\u5728\u200b\u8bc4\u8bba\u200b\u533a\u200b\u53d1\u9001\u200b\u8fd9\u79cd\u200b\u683c\u5f0f\u200b\uff0c*\u200b\u53f7\u200b\u7684\u200b\u9700\u8981\u200b\u586b\u5199\u200b\u81ea\u5df1\u200b\u7684\u200b\u4fe1\u606f\u200b</p> HTML<pre><code>&lt;div class=\"card\"&gt; \n &lt;img class=\"ava\" src=\"*\u200b\u4f60\u200b\u7684\u200b\u5934\u50cf\u200b\u94fe\u63a5\u200b*\" /&gt; \n &lt;div class=\"card-header\"&gt; \n  &lt;div&gt; \n   &lt;a href=\"*\u200b\u4f60\u200b\u7684\u200b\u7f51\u7ad9\u200b\u5730\u5740\u200b* \" target=\"_blank\"&gt;*\u200b\u4f60\u200b\u7684\u200b\u7ad9\u70b9\u200b\u540d\u79f0\u200b*&lt;/a&gt; \n  &lt;/div&gt; \n  &lt;div class=\"info\"&gt;\n   *\u200b\u4f60\u200b\u7684\u200b\u7ad9\u70b9\u200b\u63cf\u8ff0\u200b*\n  &lt;/div&gt; \n &lt;/div&gt; \n&lt;/div&gt;\n</code></pre> YAML<pre><code>- name: \u200b\u82cd\u955c\u200b\u6708\u200b's docs\n  link: https://cangjingyue.top\n  avatar: https://s2.loli.net/2024/11/12/skvZLdl76xBab4C.png\n  descr: \u200b\u76f8\u4fe1\u200b\u7684\u200b\u5fc3\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff01\n</code></pre>"},{"location":"about/me/","title":"Hi, there! I am \u200b\u82cd\u955c\u200b\u6708","text":"<p> \u200b\u7ea6\u200b 102 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p> <p> </p> <p>\u200b\u82cd\u955c\u200b\u6708\u200b</p> <p>A college student in FZU</p> <p>About me</p> <ul> <li> Hey, I'm \u200b\u82cd\u955c\u200b\u6708\u200b</li> <li> \u200b\u76f8\u4fe1\u200b\u7684\u200b\u5fc3\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff01</li> <li> Fun Fact: \u200b\u6211\u200b\u73a9\u200b\u539f\u795e\u200b\u4e8c\u672c\u200b\u5728\u8bfb\u200b\u5bb6\u5883\u6e05\u5bd2\u200b\u9ad8\u5f3a\u5ea6\u200bb\u200b\u7ad9\u200b\u73a9\u6e38\u620f\u200b\u4e5f\u200b\u6ca1\u4ec0\u4e48\u200b\u670b\u53cb\u200b\u6bcf\u5929\u200b\u6df7\u5403\u200b\u7b49\u200b\u6b7b\u522b\u200b\u518d\u200b\u548c\u200b\u6211\u200b\u8f83\u771f\u200b\u4e86\u200b\u54e5\u200b</li> <li> \u200b\u70ed\u7231\u200b (xi\u0101)\u200b\u6298\u817e\u200b \u200b\u6280\u672f\u200b</li> <li> ACG\u200b\u7231\u597d\u8005\u200b\uff0c\u200b\u559c\u6b22\u200b\u52a8\u6f2b\u200b </li> <li> \u200b\u70ed\u7231\u200b\u4e52\u4e53\u7403\u200b</li> </ul>"},{"location":"blog/","title":"Blog","text":"<p> \u200b\u7ea6\u200b 45 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p> \u200b\u547d\u91cc\u200b\u6709\u65f6\u200b\u7ec8\u987b\u200b\u6709\u200b\uff0c\u200b\u547d\u91cc\u200b\u65e0\u65f6\u200b\u83ab\u200b\u5f3a\u6c42\u200b \u200b\u65e5\u51fa\u200b\u4e1c\u6d77\u200b\u843d\u200b\u897f\u5c71\u200b\uff0c\u200b\u6101\u200b\u4e5f\u200b\u4e00\u5929\u200b\uff0c\u200b\u559c\u200b\u4e5f\u200b\u4e00\u5929\u200b \u200b\u9047\u4e8b\u200b\u4e0d\u200b\u94bb\u725b\u89d2\u5c16\u200b\uff0c\u200b\u4eba\u200b\u4e5f\u200b\u8212\u5766\u200b\uff0c\u200b\u5fc3\u200b\u4e5f\u200b\u8212\u5766\u200b <p> </p>"},{"location":"blog/WeeklySummary/week01/","title":"Week01(2024/11/11 - 2024/11/17)","text":"<p> \u200b\u7ea6\u200b 273 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/WeeklySummary/week01/#_1","title":"\u603b\u7ed3","text":"<ul> <li>\u200b\u4f11\u606f\u65f6\u95f4\u200b\u611f\u89c9\u200b\u98d9\u5347\u200b\uff0c\u200b\u7d2f\u200b\u3002</li> <li>\u200b\u8fd9\u200b\u5468\u200b\u4e3b\u8981\u200b\u65f6\u95f4\u200b\u90fd\u200b\u82b1\u200b\u5728\u200b\u641e\u200b\u535a\u5ba2\u200b\u4e0a\u200b\u4e86\u200b\uff0c\u200b\u5927\u6982\u200b\u662f\u200b\u8fd9\u200b\u5468\u4e00\u200b\u7684\u200b\u4e2d\u5348\u200b\uff0c\u200b\u7a81\u7136\u200b\u89c9\u5f97\u200b\u662f\u200b\u65f6\u5019\u200b\u4e86\u200b\uff0c\u200b\u662f\u200b\u65f6\u5019\u200b\u8be5\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u5c5e\u4e8e\u200b\u6211\u200b\u81ea\u5df1\u200b\u7684\u200b\u535a\u5ba2\u200b\u4e86\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u90a3\u5929\u200b\u7684\u200b\u665a\u4e0a\u200b\u641e\u51fa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u521d\u6b65\u200b\u7684\u200b\u96cf\u5f62\u200b\uff0c\u200b\u611f\u89c9\u200b\u81ea\u5df1\u200b\u6267\u884c\u529b\u200b\u8fd8\u200b\u86ee\u9ad8\u200b\u7684\u200b(</li> <li>\u200b\u5b66\u4e60\u200b\u65f6\u95f4\u200b\u4e3b\u8981\u200b\u82b1\u200b\u5728\u200b\u641e\u200bspring\u200b\u4e0a\u200b\u4e86\u200b\uff0c\u200b\u611f\u89c9\u200b\u8fd8\u662f\u200b\u4e00\u77e5\u534a\u89e3\u200b\u3002</li> <li>\u200b\u5468\u516d\u200b\u6253\u200b\u4e86\u200b\u67d0\u6865\u676f\u200b\u6821\u8d5b\u200b\uff0c\u200b\u8bb2\u9053\u7406\u200b\u8fd9\u200bb\u200b\u6821\u8d5b\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u9898\u200b\u90fd\u200b\u6bd4\u200b\u7701\u8d5b\u200b\u6700\u96be\u200b\u7684\u200b\u9898\u200b\u96be\u200b\uff0c\u200b\u96be\u5ea6\u200b\u5b9e\u5728\u200b\u8fc7\u4e8e\u200b\u62bd\u8c61\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u200b\u73ed\u4e0a\u200b\u4e00\u4e2a\u200b\u4eba\u80fd\u200bAC9\u200b\u9053\u200b\uff0cranking\u200b\u7b2c\u4e00\u200b\uff0c\u200b\u505a\u200b\u9898\u200b\u987a\u5e8f\u200b\u6781\u4e3a\u200b\u6b63\u5e38\u200b\uff0c\u200b\u7edd\u5bf9\u200b\u4e0d\u662f\u200b\u79d1\u6280\u200b(\u200b\u8fd9\u4eba\u200b\u6211\u200b\u4ece\u6765\u200b\u6ca1\u89c1\u200b\u4ed6\u200b\u5237\u200b\u8fc7\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u4ece\u6765\u200b\u6ca1\u6709\u200b\uff0c\u200b\u4e0d\u200b\u77e5\u9053\u200b\u662f\u200b\u771f\u7684\u200b\u795e\u7ae5\u200b\uff0c\u200b\u8fd8\u662f\u200b\u6ce5\u798f\u200bjumping\u200b\u51fa\u4e16\u200b\u4e86\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week01/#deadline","title":"Deadline","text":"<ul> <li> \u200b\u82f1\u8bed\u200bAssess2 ( Due: 2024-11-29 )</li> <li> \u200b\u4f53\u6d4b\u200b1000\u200b\u7c73\u200b ( Due: 2024-11-20 )</li> </ul>"},{"location":"blog/WeeklySummary/week01/#_2","title":"\u77ed\u671f\u8ba1\u5212","text":"<ul> <li> \u200b\u624b\u5199\u200bspring</li> <li> \u200b\u8ba1\u7b97\u673a\u200b\u7ed3\u6784\u200b (\u200b\u70e6\u200b)</li> <li> \u200b\u8ba1\u7b97\u200b\u7406\u8bba\u200b (\u200b\u70e6\u200b)</li> <li> \u200b\u6570\u5b66\u200b (\u200b\u70e6\u200b)</li> <li> \u200b\u8f6f\u4ef6\u6d4b\u8bd5\u200b (\u200b\u70e6\u200b)</li> <li> \u200b\u80cc\u9a6c\u539f\u200b (\u200b\u70e6\u200b)</li> <li> \u200b\u80cc\u200b\u6bdb\u6982\u200b (\u200b\u70e6\u200b)</li> </ul>"},{"location":"blog/WeeklySummary/week01/#_3","title":"\u957f\u671f\u200b\u8ba1\u5212","text":"<ul> <li> \u200b\u5199\u200b\u5b8c\u200bUCB CS61B\u200b\u7684\u200bgitlet</li> <li> UCB CS61C</li> <li> USTC\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week02/","title":"Week02(2024/11/18 - 2024/11/24)","text":"<p> \u200b\u7ea6\u200b 248 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/WeeklySummary/week02/#_1","title":"\u603b\u7ed3","text":"<ul> <li>\u200b\u8bfe\u591a\u200b+\u200b\u75af\u72c2\u200b\u70b9\u540d\u200b+\u200b\u4e0d\u51c6\u200b\u4f7f\u7528\u200b\u7535\u5b50\u4ea7\u54c1\u200b\uff0c\u200b\u7406\u89e3\u200b\u4e0d\u4e86\u200b\u6709\u200b\u4ec0\u4e48\u200b\u610f\u4e49\u200b\u3002\u200b\u611f\u89c9\u200b\u5b66\u4e86\u200b\u8ba1\u7b97\u673a\u200b\u5c31\u200b\u65e0\u6cd5\u200b\u7406\u89e3\u200b\u5176\u4ed6\u200b\u4e13\u4e1a\u200b\u4e86\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e0a\u8bfe\u200b\u771f\u7684\u200b\u4f1a\u200b\u803d\u8bef\u200b\u5b66\u4e60\u200b\uff0c\u200b\u96be\u9053\u200b\u5176\u4ed6\u200b\u4e13\u4e1a\u200b\u90fd\u200b\u662f\u200b\u597d\u597d\u200b\u53bb\u200b\u4e0a\u8bfe\u200b\u7684\u200b\u5417\u200b\uff0c\u200b\u7406\u89e3\u200b\u4e0d\u80fd\u200b\u4e86\u200b\u3002</li> <li>\u200b\u8fd9\u5468\u200b\u5f88\u200b\u5fd9\u200b\u4f46\u200b\u53c8\u200b\u4e0d\u200b\u77e5\u9053\u200b\u5728\u200b\u5fd9\u200b\u4ec0\u4e48\u200b\uff0c\u200b\u5f88\u7d2f\u200b\u4f46\u200b\u53c8\u200b\u4e0d\u200b\u77e5\u9053\u200b\u56e0\u4e3a\u200b\u4ec0\u4e48\u200b\u5f88\u7d2f\u200b\uff0c\u200b\u597d\u200b\u51e0\u5929\u200b\u90fd\u200b\u662f\u200b9\u300110\u200b\u70b9\u949f\u200b\u4e0a\u5e8a\u200b\u76f4\u63a5\u200b\u5012\u5934\u200b\u5c31\u200b\u7761\u200b(</li> <li>\u200b\u5468\u672b\u200b\u82b1\u200b\u4e86\u200b\u5927\u7ea6\u200b\u4e00\u200b\u4e0b\u5348\u200b\u7684\u200b\u65f6\u95f4\u200b\u6363\u9f13\u200b cursor + sealos cloud\uff0c\u200b\u53ea\u80fd\u200b\u8bf4\u200b AI \u200b\u7f16\u7a0b\u200b\u4f3c\u4e4e\u200b\u6ca1\u6709\u200b\u4f20\u8bf4\u200b\u4e2d\u200b\u7684\u200b\u90a3\u4e48\u200b\u7384\u4e4e\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u597d\u7528\u200b\u8fd8\u662f\u200b\u597d\u7528\u200b\u7684\u200b\uff0c\u200b\u5c31\u662f\u200b\u6211\u200b\u7684\u200b\u8fd0\u7ef4\u200b\u6c34\u5e73\u200b\u6709\u70b9\u200b\u83dc\u200b\uff0c\u200b\u641e\u4e0d\u61c2\u200b\u600e\u4e48\u200b\u7528\u200b sealos cloud\uff0c\u200b\u6709\u7a7a\u200b\u5b66\u4e00\u5b66\u200b k8s \u200b\u5427\u200b</li> <li>\u200b\u540c\u200b\u4e0a\u5468\u200b\uff0c\u200b\u6b63\u5728\u200b\u63a8\u200b spring</li> </ul>"},{"location":"blog/WeeklySummary/week02/#deadline","title":"Deadline","text":"<ul> <li> \u200b\u82f1\u8bed\u200bAssess2(\u200b\u505a\u200b\u4e86\u200b\u4e00\u534a\u200b) ( Due: 2024-11-29 )</li> <li> \u200b\u6bdb\u6982\u200b\u8003\u8bd5\u200b ( Due: \u200b\u5341\u516d\u200b\u5468\u200b )</li> <li> \u200b\u9a6c\u200b\u539f\u200b\u8003\u8bd5\u200b ( Due: \u200b\u5341\u516d\u200b\u5468\u200b )</li> </ul>"},{"location":"blog/WeeklySummary/week02/#_2","title":"\u77ed\u671f\u8ba1\u5212","text":"<ul> <li> \u200b\u80cc\u200b</li> <li> \u200b\u80cc\u200b</li> <li> \u200b\u80cc\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week02/#_3","title":"\u957f\u671f\u200b\u8ba1\u5212","text":"<ul> <li> \u200b\u5199\u200b\u5b8c\u200bUCB CS61B\u200b\u7684\u200bgitlet</li> <li> UCB CS61C</li> <li> USTC\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week03/","title":"Week03(2024/11/25 - 2024/12/01)","text":"<p> \u200b\u7ea6\u200b 185 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/WeeklySummary/week03/#_1","title":"\u603b\u7ed3","text":"<ul> <li>\u200b\u8fd9\u5468\u200b\u8d5a\u200b\u5230\u200b\u4e86\u200b\u5927\u5b66\u200b\u7684\u200b\u7b2c\u4e00\u6876\u91d1\u200b, \u200b\u867d\u7136\u200b\u5c31\u200b\u4e00\u70b9\u70b9\u200b\u96f6\u82b1\u94b1\u200b\uff0c\u200b\u4f46\u200b\u6211\u200b\u4f3c\u4e4e\u200b\u7aa5\u63a2\u200b\u5230\u200b\u4e86\u200b\u4e00\u70b9\u200b\u5927\u5b66\u200b\u5185\u90e8\u200b\u5546\u4e1a\u200b\u7684\u200b\u95e8\u5f84\u200b(? \u3002\u200b\u5176\u5b9e\u200b\u6bd4\u8d77\u200b\u90a3\u200b\u4e00\u70b9\u200b\u96f6\u82b1\u94b1\u200b\u66f4\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\u8ba9\u200b\u6211\u200b\u5bf9\u200b\u4eba\u5fc3\u200b\u6709\u200b\u4e86\u200b\u66f4\u6df1\u200b\u7684\u200b\u4e86\u89e3\u200b\u5427\u200b</li> <li>\u200b\u5468\u672b\u200b\u8fc7\u200b\u4e86\u200b\u7b54\u8fa9\u200b(\u200b\u559c\u200b</li> <li>\u200b\u5b66\u4e60\u200b\u65b9\u9762\u200b\u5e76\u200b\u6ca1\u6709\u200b\u4ec0\u4e48\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u8fd8\u662f\u200b\u4e00\u4e9b\u200b\u8bfe\u4e1a\u200b\u538b\u529b\u200b\u5bfc\u81f4\u200b\u7684\u200b\uff0c\u200b\u5f88\u70e6\u200b...</li> <li>\u200b\u6211\u200b\u53d1\u73b0\u200b\u6211\u200b\u4f3c\u4e4e\u200b\u5f88\u200b\u559c\u6b22\u200b\u5f00\u65b0\u5751\u200b\uff0c\u200b\u6700\u8fd1\u200b\u53c8\u200b\u5f00\u200b\u4e86\u200b\u4e00\u95e8\u200b Missing Semester \u200b\u611f\u89c9\u200b\u8fd8\u200b\u633a\u200b\u6709\u610f\u601d\u200b\u7684\u200b\uff0c\u200b\u5e0c\u671b\u200b\u80fd\u200b\u575a\u6301\u200b\u770b\u200b\u4e0b\u53bb\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week03/#deadline","title":"Deadline","text":"<ul> <li> \u200b\u6bdb\u6982\u200b\u8003\u8bd5\u200b ( Due: \u200b\u5341\u516d\u200b\u5468\u200b )</li> <li> \u200b\u9a6c\u200b\u539f\u200b\u8003\u8bd5\u200b ( Due: \u200b\u5341\u516d\u200b\u5468\u200b )</li> </ul>"},{"location":"blog/WeeklySummary/week03/#_2","title":"\u77ed\u671f\u8ba1\u5212","text":"<ul> <li> \u200b\u80cc\u200b</li> <li> \u200b\u80cc\u200b</li> <li> \u200b\u80cc\u200b</li> </ul>"},{"location":"blog/WeeklySummary/week03/#_3","title":"\u957f\u671f\u200b\u8ba1\u5212","text":"<ul> <li> \u200b\u5199\u200b\u5b8c\u200bCS61B\u200b\u7684\u200bgitlet</li> <li> CS61C</li> <li> \u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b</li> <li> Missing Semester</li> </ul>"},{"location":"blog/backend/Java/FrequencyControl/","title":"Frequency-Control-Starter","text":"<p> \u200b\u7ea6\u200b 3662 \u200b\u4e2a\u200b\u5b57\u200b  244 \u200b\u884c\u200b\u4ee3\u7801\u200b  7 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 15 \u200b\u5206\u949f\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1","title":"1. \u200b\u9879\u76ee\u200b\u7b80\u4ecb","text":"<p>\u200b\u672c\u200b\u9879\u76ee\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b SpringBoot + Redis \u200b\u5b9e\u73b0\u200b\u7684\u200b\u9891\u7387\u200b\u63a7\u5236\u200b\u7ec4\u4ef6\u200b</p> <p>github\u200b\u4ed3\u5e93\u200b\u5730\u5740\u200b\uff1aFrequency-Control-Spring-Boot-Starter</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2","title":"2. \u200b\u9879\u76ee\u200b\u4eae\u70b9","text":"<ol> <li>\u200b\u4f7f\u7528\u200b lua\u200b\u811a\u672c\u200b \u200b\u4fdd\u8bc1\u200bredis\u200b\u7684\u200b\u9891\u7387\u200b\u8ba1\u6570\u200b\u7684\u200b \u200b\u539f\u5b50\u200b\u6027\u200b</li> <li>\u200b\u5141\u8bb8\u200b\u67d0\u4e2a\u200b\u63a5\u53e3\u200b\u62e5\u6709\u200b\u591a\u79cd\u200b\u9891\u63a7\u200b\u7b56\u7565\u200b\uff08\u200b\u5982\u200b\u5141\u8bb8\u200b5s\u200b\u5185\u200b3\u200b\u6b21\u200b\u300130\u200b\u79d2\u200b\u5185\u200b10\u200b\u6b21\u200b\uff09</li> <li>\u200b\u5141\u8bb8\u200b\u67d0\u4e2a\u200b\u63a5\u53e3\u200b\u62e5\u6709\u200b\u591a\u79cd\u200b\u9891\u63a7\u200b\u7b97\u6cd5\u200b\uff08\u200b\u5982\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b + \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff09</li> <li>\u200b\u5b9e\u73b0\u200b\u6838\u5fc3\u200b\u914d\u7f6e\u200b\u7c7b\u200b\uff0c\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u901a\u8fc7\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u81ea\u5b9a\u4e49\u200b\u9ed8\u8ba4\u200b\u9891\u63a7\u200b\u65f6\u95f4\u200b\u8303\u56f4\u200b\u3001\u200b\u9891\u63a7\u200b\u65f6\u95f4\u200b\u5355\u4f4d\u200b\u3001\u200b\u5355\u4f4d\u200b\u9891\u63a7\u200b\u65f6\u95f4\u200b\u8303\u56f4\u200b\u5185\u200b\u6700\u5927\u200b\u8bbf\u95ee\u200b\u6b21\u6570\u200b</li> <li>\u200b\u53ef\u200b\u901a\u8fc7\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u53c2\u6570\u200b\u6307\u5b9a\u200b\u66ff\u6362\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u5b9e\u73b0\u200bSPI\u200b\u673a\u5236\u200b\uff0c\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u91c7\u7528\u200b\u7b56\u7565\u200b\u6a21\u5f0f\u200b+\u200b\u6a21\u7248\u200b\u65b9\u6cd5\u200b\u6a21\u5f0f\u200b+\u200b\u5de5\u5382\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u62bd\u8c61\u200b\u9650\u6d41\u200b\u7b56\u7565\u200b\u670d\u52a1\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u3001\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u3001\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b49\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b\u7b56\u7565\u200b</li> </ol>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#3","title":"3. \u200b\u9891\u63a7\u200b\u5c5e\u6027\u200b\u6838\u5fc3\u200b\u914d\u7f6e","text":"<p>\u200b\u5728\u200b\u9891\u63a7\u200b\u5c5e\u6027\u200b\u914d\u7f6e\u200b\u65b9\u9762\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u80fd\u591f\u200b\u901a\u8fc7\u200b\u5728\u200b <code>application.properties</code> \u200b\u6216\u200b <code>application.yml</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u76f8\u5173\u200b\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7075\u6d3b\u200b\u8c03\u6574\u200b\u9650\u6d41\u200b\u7b56\u7565\u200b\u3001\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\u3001\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u3001\u200b\u9891\u7387\u200b\u9650\u5236\u200b\u548c\u200b\u65f6\u95f4\u200b\u5355\u4f4d\u200b\uff0c\u200b\u4ee5\u200b\u9002\u5e94\u200b\u7279\u5b9a\u200b\u573a\u666f\u200b\u3002</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#31","title":"3.1 \u200b\u914d\u7f6e\u200b\u9879\u200b\u6982\u89c8","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#32","title":"3.2 \u200b\u6548\u679c\u200b\u5c55\u793a","text":"<p>\u200b\u540c\u65f6\u200b\u6211\u200b\u914d\u7f6e\u200b\u4e86\u200b <code>spring-configuration-metadata.json</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u7684\u200b\u81ea\u52a8\u200b\u63d0\u793a\u200b\u3001\u200b\u8865\u5168\u200b\u529f\u80fd\u200b</p> <ol> <li> <p>\u200b\u81ea\u52a8\u200b\u63d0\u793a\u200b </p> </li> <li> <p>\u200b\u81ea\u52a8\u200b\u8865\u5168\u200b </p> </li> </ol>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#4","title":"4. \u200b\u9891\u63a7\u200b\u6ce8\u89e3\u200b\u53ca\u200b\u5207\u9762\u200b\u5b9e\u73b0","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#41","title":"4.1 \u200b\u9891\u63a7\u200b\u6ce8\u89e3","text":"<p>\u200b\u5b9a\u4e49\u200b\u5982\u4e0b\u200b\u9891\u63a7\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u5305\u542b\u200b\u9891\u63a7\u200b\u7b97\u6cd5\u200b\u53ca\u200b\u76f8\u5173\u200b\u7b97\u6cd5\u200b\u914d\u7f6e\u200b\u7b49\u200b\u5c5e\u6027\u200b</p> Java<pre><code>@Repeatable(FrequencyControlContainer.class) // \u200b\u53ef\u200b\u91cd\u590d\u200b\n@Retention(RetentionPolicy.RUNTIME)// \u200b\u8fd0\u884c\u200b\u65f6\u200b\u751f\u6548\u200b\n@Target(ElementType.METHOD)//\u200b\u4f5c\u7528\u200b\u5728\u200b\u65b9\u6cd5\u200b\u4e0a\u200b\npublic @interface FrequencyControl {\n\n    FrequencyControlStrategyEnum strategy() default FrequencyControlStrategyEnum.TOTAL_COUNT_WITH_IN_FIX_TIME;\n\n    int windowSize() default -1;\n\n    int period() default -1;\n\n    String prefixKey() default \"\";\n\n    FrequencyControlTargetEnum target() default FrequencyControlTargetEnum.EL;\n\n    String spEl() default \"\";\n\n    int time() default -1;\n\n    TimeUnit unit() default TimeUnit.SECONDS;\n\n    int count() default -1;\n\n    long capacity() default -1; \n\n    double refillRate() default -1; \n}\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\u5230\u200b\uff1a\u200b\u6ce8\u89e3\u200b\u5c5e\u6027\u200b\u9ed8\u8ba4\u503c\u200b\u5927\u90e8\u5206\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b -1 \u200b\u6216\u200b \u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b</p> <p>\u200b\u539f\u56e0\u200b\u5728\u4e8e\u200b\uff1a   1. \u200b\u6ce8\u89e3\u200b\u5c5e\u6027\u200b\u4e0d\u53ef\u200b\u53d8\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u901a\u8fc7\u200b <code>Properties</code> \u200b\u52a8\u6001\u200b\u914d\u7f6e\u200b\uff0c\u200b\u6240\u4ee5\u200b\u91c7\u7528\u200b -1 \u200b\u6216\u200b \u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b \u200b\u8868\u793a\u200b\u91c7\u7528\u200b\u9ed8\u8ba4\u503c\u200b   2. \u200b\u57fa\u4e8e\u200b\u4e0a\u200b\u4e00\u70b9\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5982\u679c\u200b\u6ce8\u89e3\u200b\u5c5e\u6027\u200b\u4e0d\u200b\u4e3a\u200b -1 \u200b\u6216\u200b \u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5219\u200b\u5728\u200b\u5207\u9762\u200b\u6267\u884c\u200b\u65f6\u200b\u8868\u793a\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u503c\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#42","title":"4.2 \u200b\u53ef\u200b\u91cd\u590d\u200b\u6ce8\u89e3","text":"<p>\u200b\u540c\u65f6\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u62e5\u6709\u200b\u591a\u79cd\u200b\u9891\u63a7\u200b\u7b56\u7565\u200b\u6216\u200b\u9891\u63a7\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u6ce8\u89e3\u200b\u53ef\u200b\u91cd\u590d\u4f7f\u7528\u200b \u200b\u53c2\u8003\u200b Java8\u200b\u65b0\u200b\u7279\u6027\u200b(\u200b\u516d\u200b)\u200b\u91cd\u590d\u200b\u6ce8\u89e3\u200b\u4e0e\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u5bb9\u5668\u200b\u6ce8\u89e3\u200b\u7c7b\u200b\uff1a</p> Java<pre><code>@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface FrequencyControlContainer {\n    // \u200b\u53ef\u200b\u91cd\u590d\u200b\u6ce8\u89e3\u200b\n    FrequencyControl[] value();\n}\n</code></pre>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#43","title":"4.3 \u200b\u5207\u9762\u200b\u5b9e\u73b0","text":"<p>\u200b\u6838\u5fc3\u200b\u65b9\u6cd5\u200b\uff1a</p> Java<pre><code>@Around(\"@annotation(com.iflove.starter.frequencycontrol.annotation.FrequencyControl)||@annotation(com.iflove.starter.frequencycontrol.annotation.FrequencyControlContainer)\")\npublic Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n    Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();\n    FrequencyControl[] annotationsByType = method.getAnnotationsByType(FrequencyControl.class);\n    // \u200b\u5b9e\u73b0\u200b\u6ce8\u89e3\u200b\u914d\u7f6e\u200b\u7684\u200b\u52a8\u6001\u200b\u66ff\u6362\u200b\n    List&lt;FrequencyControlConfig&gt; frequencyControlConfigs = injectPropertiesToAnnotations(annotationsByType);\n\n    Map&lt;String, FrequencyControlConfig&gt; keyMap = new HashMap&lt;&gt;();\n\n    for (int i = 0; i &lt; frequencyControlConfigs.size(); i++) {\n        FrequencyControlConfig config = frequencyControlConfigs.get(i);\n        // \u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u65b9\u6cd5\u200b\u9650\u5b9a\u200b\u540d\u200b + \u200b\u6ce8\u89e3\u200b\u6392\u540d\u200b\uff08\u200b\u53ef\u80fd\u200b\u591a\u4e2a\u200b\uff09\n        String prefix = StrUtil.isBlank(config.getPrefixKey()) ? method.toGenericString() + \":index:\" + i : config.getPrefixKey();\n        String key = \"\";\n        switch (config.getTarget()) {\n            case EL -&gt; key = SPELUtils.parseSPEL(method, joinPoint.getArgs(), config.getSpEl());\n            case IP -&gt; key = UserContext.getIp();\n            case UID -&gt; key = UserContext.getUserId();\n        }\n        // \u200b\u5b58\u5165\u200bkeyMap\n        keyMap.put(prefix + \":\" + key, config);\n    }\n    // \u200b\u6839\u636e\u200b\u7b56\u7565\u200b\u5206\u7ec4\u200b\n    Map&lt;FrequencyControlStrategyEnum, Map&lt;String, FrequencyControlConfig&gt;&gt; configMapByStrategy = keyMap.entrySet().stream()\n            .collect(Collectors.groupingBy(\n                    entry -&gt; entry.getValue().getStrategy(),\n                    Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)\n            ));\n\n    Map&lt;String, FrequencyControlConfig&gt; configMap;\n    // \u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\n    if ((configMap = configMapByStrategy.get(FrequencyControlStrategyEnum.TOTAL_COUNT_WITH_IN_FIX_TIME)) != null) {\n        List&lt;FixedWindowDTO&gt; frequencyControlDTOS = configMap.entrySet().stream().map(entrySet -&gt; buildFixedWindowDTO(entrySet.getKey(), entrySet.getValue())).collect(Collectors.toList());\n        FrequencyControlUtil.executeWithFrequencyControlList(FrequencyControlStrategyEnum.TOTAL_COUNT_WITH_IN_FIX_TIME, frequencyControlDTOS);\n    }\n    // \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\n    if ((configMap = configMapByStrategy.get(FrequencyControlStrategyEnum.SLIDING_WINDOW)) != null) {\n        List&lt;SlidingWindowDTO&gt; frequencyControlDTOS = configMap.entrySet().stream().map(entrySet -&gt; buildSlidingWindowDTO(entrySet.getKey(), entrySet.getValue())).collect(Collectors.toList());\n        FrequencyControlUtil.executeWithFrequencyControlList(FrequencyControlStrategyEnum.SLIDING_WINDOW, frequencyControlDTOS);\n    }\n    // \u200b\u4ee4\u724c\u200b\u6876\u200b\n    if ((configMap = configMapByStrategy.get(FrequencyControlStrategyEnum.TOKEN_BUCKET)) != null) {\n        List&lt;TokenBucketDTO&gt; frequencyControlDTOS = configMap.entrySet().stream().map(entrySet -&gt; buildTokenBucketDTO(entrySet.getKey(), entrySet.getValue())).collect(Collectors.toList());\n        FrequencyControlUtil.executeWithFrequencyControlList(FrequencyControlStrategyEnum.TOKEN_BUCKET, frequencyControlDTOS);\n    }\n    return joinPoint.proceed();\n}\n</code></pre>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#5","title":"5. \u200b\u5e38\u89c1\u200b\u7684\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b\u53ca\u200b\u76f8\u5173\u200b\u5b9e\u73b0","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#51","title":"5.1 \u200b\u62bd\u8c61\u200b\u9650\u6d41\u200b\u7b56\u7565","text":"<p>\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b\u4ee5\u4e0b\u200b3\u200b\u4e2a\u200b\u65b9\u6cd5\u200b\uff1a</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1-executewithfrequencycontrolmap","title":"1. #executeWithFrequencyControlMap","text":"<p>Java<pre><code>/**\n * \u200b\u6267\u884c\u200b\u9650\u6d41\u200b\u7b56\u7565\u200b\n *\n * @param frequencyControlMap   \u200b\u5b9a\u4e49\u200b\u7684\u200b\u6ce8\u89e3\u200b\u9891\u63a7\u200b\n *                              Map\u200b\u4e2d\u200b\u7684\u200bKey-{@link K#getKey()}-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\n *                              Map\u200b\u4e2d\u200b\u7684\u200bValue-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\u200b\u9650\u5236\u200b\u7684\u200bValue\n */\nprivate void executeWithFrequencyControlMap(Map&lt;String, K&gt; frequencyControlMap) {\n    // \u200b\u5224\u65ad\u200b\uff1a\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\n    if (reachRateLimit(frequencyControlMap)) {\n        throw new FrequencyControlException((String) null);\n    }\n    // \u200b\u589e\u52a0\u200b\u9650\u6d41\u200b\u7edf\u8ba1\u200b\n    addFrequencyControlStatisticsCount(frequencyControlMap);\n}\n</code></pre> \u200b\u529f\u80fd\u200b\uff1a\u200b\u6267\u884c\u200b\u9650\u6d41\u200b\u7b56\u7565\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6307\u5b9a\u200b\u7684\u200b\u9891\u63a7\u200b\u914d\u7f6e\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u672a\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\u65f6\u200b\u589e\u52a0\u200b\u9891\u63a7\u200b\u7edf\u8ba1\u200b\u8ba1\u6570\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2-reachratelimit","title":"2. #reachRateLimit","text":"Java<pre><code>/**\n * \u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b (\u200b\u5b50\u7c7b\u200b\u5b9e\u73b0\u200b)\n *\n * @param frequencyControlMap \u200b\u5b9a\u4e49\u200b\u7684\u200b\u6ce8\u89e3\u200b\u9891\u63a7\u200b\n *                            Map\u200b\u4e2d\u200b\u7684\u200bKey-{@link K#getKey()}-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\n *                            Map\u200b\u4e2d\u200b\u7684\u200bValue-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\u200b\u9650\u5236\u200b\u7684\u200bValue\n * @return true-\u200b\u65b9\u6cd5\u200b\u88ab\u200b\u9650\u6d41\u200b false-\u200b\u65b9\u6cd5\u200b\u6ca1\u6709\u200b\u88ab\u200b\u9650\u6d41\u200b\n */\nprotected abstract boolean reachRateLimit(Map&lt;String, K&gt; frequencyControlMap);\n</code></pre> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\uff0c\u200b\u4ea4\u7ed9\u200b\u5b50\u7c7b\u200b\u5b9e\u73b0\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#3-addfrequencycontrolstatisticscount","title":"3. #addFrequencyControlStatisticsCount","text":"Java<pre><code>/**\n * \u200b\u589e\u52a0\u200b\u9650\u6d41\u200b\u7edf\u8ba1\u200b\u6b21\u6570\u200b (\u200b\u5b50\u7c7b\u200b\u5b9e\u73b0\u200b)\n *\n * @param frequencyControlMap \u200b\u5b9a\u4e49\u200b\u7684\u200b\u6ce8\u89e3\u200b\u9891\u63a7\u200b\n *                            Map\u200b\u4e2d\u200b\u7684\u200bKey-{@link K#getKey()}-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\n *                            Map\u200b\u4e2d\u200b\u7684\u200bValue-\u200b\u5bf9\u5e94\u200bredis\u200b\u7684\u200b\u5355\u4e2a\u200b\u9891\u63a7\u200b\u7684\u200bKey\u200b\u9650\u5236\u200b\u7684\u200bValue\n */\nprotected abstract void addFrequencyControlStatisticsCount(Map&lt;String, K&gt; frequencyControlMap);\n</code></pre> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u589e\u52a0\u200b\u9650\u6d41\u200b\u7edf\u8ba1\u200b\u6b21\u6570\u200b\uff0c\u200b\u4ea4\u7ed9\u200b\u5b50\u7c7b\u200b\u5b9e\u73b0\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#52","title":"5.2 \u200b\u56fa\u5b9a\u200b\u7a97\u53e3","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1_1","title":"1. \u200b\u57fa\u672c\u200b\u4ecb\u7ecd","text":"<p>\u200b\u56fa\u5b9a\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\uff08Fixed Window Rate Limiting Algorithm\uff09\uff08\u200b\u4e5f\u200b\u53eb\u200b\u8ba1\u6570\u5668\u200b\uff09\u200b\u662f\u200b\u6700\u200b\u5e38\u89c1\u200b\u7684\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b\u4e4b\u4e00\u200b\u3002\u200b\u5b83\u200b\u5212\u5206\u200b\u4e86\u200b\u591a\u5757\u200b\u56fa\u5b9a\u200b\u7684\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\uff0c\u200b\u5e76\u4e14\u200b\u9650\u5236\u200b\u4e86\u200b\u6bcf\u5757\u200b\u7a97\u53e3\u200b\u7684\u200b\u6700\u5927\u200b\u8bf7\u6c42\u200b\u6570\u91cf\u200b\u3002</p> <p></p> <p>\u200b\u5982\u679c\u200b\u5c06\u200b\u65f6\u95f4\u200b\u6bcf\u79d2\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u6bcf\u4e2a\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\u4e0d\u80fd\u200b\u8d85\u8fc7\u200b4\u200b\u4e2a\u200b\u8bf7\u6c42\u200b\u3002\u200b\u8fd9\u65f6\u5019\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u6709\u4e2a\u200b\u5f88\u200b\u4e25\u91cd\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u5c31\u662f\u200b\u4e34\u754c\u70b9\u200b\u95ee\u9898\u200b\u3002\u200b\u5f53\u200b\u5207\u6362\u200b\u7a97\u53e3\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6240\u6709\u200b\u8ba1\u6570\u200b\u5c06\u4f1a\u200b\u91cd\u65b0\u200b\u8ba1\u6570\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u77ed\u77ed\u200b0.5\u200b\u79d2\u200b\u5185\u200b\u8fbe\u5230\u200b6\u200b\u4e2a\u200b\u8bf7\u6c42\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</p> <ul> <li>\u200b\u4f18\u70b9\u200b\uff1a<ul> <li>\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u7b97\u6cd5\u200b\u975e\u5e38\u7b80\u5355\u200b\uff0c\u200b\u6613\u4e8e\u200b\u5b9e\u73b0\u200b\u548c\u200b\u7406\u89e3\u200b\u3002</li> </ul> </li> <li>\u200b\u7f3a\u70b9\u200b\uff1a<ul> <li>\u200b\u5b58\u5728\u200b\u660e\u663e\u200b\u7684\u200b\u4e34\u754c\u200b\u95ee\u9898\u200b\uff0c\u200b\u5982\u679c\u200b\u8bf7\u6c42\u200b\u96c6\u4e2d\u200b\u5728\u200b\u4e24\u4e2a\u200b\u7a97\u53e3\u200b\u4e4b\u95f4\u200b\u3002\u200b\u90a3\u4e48\u200b\u8bf7\u6c42\u200b\u6b21\u6570\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u8d85\u8fc7\u200b\u6211\u4eec\u200b\u7684\u200b\u9884\u671f\u200b\uff0c\u200b\u6700\u9ad8\u200b\u8fbe\u5230\u200b\u9884\u671f\u200b\u7684\u200b\u4e24\u500d\u200b\u3002</li> </ul> </li> </ul>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2_1","title":"2. \u200b\u9002\u7528\u200b\u573a\u666f","text":"<p>\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u5b9e\u73b0\u200b\u8d77\u6765\u200b\u7b80\u5355\u200b\u65b9\u4fbf\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u662f\u200b\u5b83\u200b\u6700\u5927\u200b\u4f18\u70b9\u200b\u3002\u200b\u8981\u547d\u200b\u7684\u200b\u5c31\u662f\u200b\u5b83\u200b\u7684\u200b\u4e34\u754c\u200b\u95ee\u9898\u200b\u3002\u200b\u53ea\u8981\u200b\u5e73\u5e38\u200b\u6d41\u91cf\u200b\u76f8\u5bf9\u200b\u5747\u5300\u5206\u5e03\u200b\uff0c\u200b\u6216\u8005\u200b\u6211\u4eec\u200b\u80fd\u591f\u200b\u63a5\u53d7\u200b\u9650\u6d41\u200b\u51c6\u786e\u5ea6\u200b\u6ca1\u200b\u90a3\u4e48\u200b\u4e25\u683c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u662f\u200b\u4e2a\u200b\u5f88\u200b\u4e0d\u9519\u200b\u7684\u200b\u65b9\u6848\u200b\u3002</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#3_1","title":"3. \u200b\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a<code>com.iflove.starter.frequencycontrol.service.frequencycontrol.strategy.TotalCountWithInFixTimeFrequencyController</code></p> <p>\u200b\u6838\u5fc3\u200b\u4ee3\u7801\u200b\uff1a Java<pre><code>@Override\nprotected boolean reachRateLimit(Map&lt;String, FixedWindowDTO&gt; frequencyControlMap) {\n    // \u200b\u6279\u91cf\u200b\u83b7\u53d6\u200b\n    List&lt;String&gt; frequencyKeys = new ArrayList&lt;&gt;(frequencyControlMap.keySet());\n    List&lt;Integer&gt; countList = RedisUtil.mget(frequencyKeys, Integer.class);\n    for (int i = 0; i &lt; frequencyKeys.size(); i++) {\n        String key = frequencyKeys.get(i);\n        Integer count = countList.get(i);\n        int frequencyControlCountLimit = frequencyControlMap.get(key).getCount();\n        // \u200b\u5224\u65ad\u200b\uff1a\u200b\u5230\u8fbe\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\n        if (Objects.nonNull(count) &amp;&amp; count &gt;= frequencyControlCountLimit) {\n            log.warn(\"frequenctControl limit key:{}, count:{}\", key, count);\n            return true;\n        }\n    }\n    return false;\n}\n\n@Override\nprotected void addFrequencyControlStatisticsCount(Map&lt;String, FixedWindowDTO&gt; frequencyControlMap) {\n    frequencyControlMap.forEach((k, v) -&gt; RedisUtil.inc(k, v.getTime(), v.getUnit()));\n}\n</code></pre></p> <ul> <li> <p><code>#reachRateLimit</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b</p> <ol> <li>\u200b\u6279\u91cf\u200b\u83b7\u53d6\u200b\uff1a\u200b\u5c06\u200b\u6240\u6709\u200b\u9650\u6d41\u200b\u952e\u200b\u63d0\u53d6\u200b\u4e3a\u200b <code>List</code>\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>RedisUtil.mget</code> \u200b\u65b9\u6cd5\u200b\u4ece\u200b <code>Redis</code> \u200b\u4e2d\u200b\u6279\u91cf\u200b\u83b7\u53d6\u200b\u8fd9\u4e9b\u200b\u952e\u200b\u7684\u200b\u8ba1\u200b\u6570\u503c\u200b\u3002</li> <li>\u200b\u904d\u5386\u200b\u5e76\u200b\u68c0\u67e5\u200b\uff1a\u200b\u904d\u5386\u200b\u6bcf\u4e2a\u200b\u952e\u200b\u7684\u200b\u8ba1\u200b\u6570\u503c\u200b\uff0c\u200b\u68c0\u67e5\u200b\u5176\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\u3002</li> <li>\u200b\u9650\u6d41\u200b\u5224\u65ad\u200b\uff1a\u200b\u5982\u679c\u200b\u67d0\u4e2a\u200b\u952e\u200b\u7684\u200b\u8ba1\u200b\u6570\u503c\u200b\u8fbe\u5230\u200b\u6216\u200b\u8d85\u8fc7\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u65e5\u5fd7\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b <code>true</code> \u200b\u8868\u793a\u200b\u5df2\u200b\u9650\u6d41\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u904d\u5386\u200b\u3002</li> <li>\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\uff1a\u200b\u5982\u679c\u200b\u6240\u6709\u200b\u952e\u200b\u90fd\u200b\u672a\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\uff0c\u200b\u8fd4\u56de\u200b <code>false</code> \u200b\u8868\u793a\u200b\u672a\u200b\u9650\u6d41\u200b\u3002</li> </ol> </li> <li> <p><code>#addFrequencyControlStatisticsCount</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u589e\u52a0\u200b\u6bcf\u4e2a\u200b\u9650\u6d41\u200b\u952e\u200b\u7684\u200b\u8ba1\u6570\u200b\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u952e\u200b\u7684\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\u3002</p> <ol> <li>\u200b\u8ba1\u6570\u200b\u9012\u589e\u200b\uff1a\u200b\u904d\u5386\u200b <code>frequencyControlMap</code>\uff0c\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u9650\u6d41\u200b\u952e\u200b\u8c03\u7528\u200b <code>RedisUtil.inc</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u589e\u52a0\u200b\u8ba1\u6570\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\u3002</li> <li>\u200b\u8bbe\u7f6e\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\uff1a<code>RedisUtil.inc</code> \u200b\u63a5\u6536\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u548c\u200b\u5355\u4f4d\u200b\u53c2\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b <code>Redis</code> \u200b\u952e\u200b\u7684\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u8ba1\u6570\u200b\u5728\u200b\u7a97\u53e3\u200b\u7ed3\u675f\u200b\u540e\u200b\u91cd\u7f6e\u200b\u3002</li> </ol> </li> </ul> <p><code>RedisUtil.inc</code> \u200b\u65b9\u6cd5\u200b\u5e95\u5c42\u200b\u8c03\u7528\u200b <code>lua</code> \u200b\u811a\u672c\u200b\u4fdd\u8bc1\u200b\u539f\u5b50\u200b\u6027\u200b\uff0c<code>lua</code>\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> Lua<pre><code>local key, ttl = KEYS[1], ARGV[1]\n\nif redis.call('EXISTS', key) == 0 then\n    redis.call('SETEX', key, ttl, 1)\n    return 1\nelse\n    return tonumber(redis.call('INCR', key))\nend\n</code></pre>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#53","title":"5.3 \u200b\u6ed1\u52a8\u200b\u7a97\u53e3","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1_2","title":"1. \u200b\u57fa\u672c\u200b\u4ecb\u7ecd","text":"<p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\u66f4\u6362\u200b\u7a97\u53e3\u200b\u65f6\u200b\u7684\u200b\u4e34\u754c\u70b9\u200b\u95ee\u9898\u200b\u3002\u200b\u56e0\u6b64\u200b\u51fa\u73b0\u200b\u4e86\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4e00\u76f4\u200b\u90fd\u200b\u53ea\u7528\u200b\u4e00\u4e2a\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u8fd9\u4e2a\u200b\u7a97\u53e3\u200b\u4f1a\u200b\u4e0d\u65ad\u200b\u5411\u524d\u200b\u6ed1\u52a8\u200b\u3002</p> <p>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5c06\u200b\u65f6\u95f4\u200b\u5206\u4e3a\u200b\u591a\u4e2a\u200b\u5c0f\u200b\u7c92\u5ea6\u200b\u7684\u200b\u533a\u95f4\u200b\u3002\u200b\u5e76\u4e14\u200b\u7edf\u8ba1\u200b\u7a97\u53e3\u200b\u4f1a\u200b\u4e0d\u65ad\u200b\u7684\u200b\u79fb\u9664\u200b\u6700\u65e9\u200b\u7684\u200b\u683c\u5b50\u200b\uff0c\u200b\u52a0\u5165\u200b\u65b0\u200b\u7684\u200b\u683c\u5b50\u200b\u3002\u200b\u6240\u6709\u200b\u7684\u200b\u8ba1\u6570\u200b\u53ea\u4f1a\u200b\u7edf\u8ba1\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u503c\u200b\u3002</p> <p></p> <p>\u200b\u5047\u8bbe\u200b\u65f6\u95f4\u200b\u7c92\u5ea6\u200b\u4e3a\u200b0.25s\u200b\u6bcf\u683c\u200b\uff0c\u200b\u6700\u5927\u200b\u8bf7\u6c42\u200b\u6570\u91cf\u200b4\u200b\u4e2a\u200b\u6bcf\u79d2\u200b\u3002</p> <p>\u200b\u7ea2\u8272\u200b\u7684\u200b\u7403\u200b\u5c31\u662f\u200b\u88ab\u200b\u9650\u6d41\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002\u200b\u968f\u7740\u200b\u65f6\u95f4\u200b\u7684\u200b\u4e0d\u65ad\u200b\u589e\u52a0\u200b\uff0c\u200b\u6bcf\u200b0.25s\uff0c\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\u5c31\u200b\u4f1a\u200b\u5f80\u524d\u200b\u6ed1\u52a8\u200b\u4e00\u5c0f\u200b\u683c\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u4f1a\u200b\u7edf\u8ba1\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u8bf7\u6c42\u200b\u4e0d\u80fd\u200b\u8d85\u8fc7\u200b4\u200b\u4e2a\u200b\u3002</p> <ul> <li> <p>\u200b\u4f18\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u5e73\u6ed1\u200b\uff0c\u200b\u76f8\u6bd4\u200b\u8d77\u200b\u56fa\u5b9a\u200b\u7a97\u53e3\u200b\uff0c\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u89e3\u51b3\u200b\u4e86\u200b\u4e34\u754c\u200b\u95ee\u9898\u200b\u3002\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u7cbe\u5ea6\u200b\u66f4\u9ad8\u200b\uff0c\u200b\u80fd\u200b\u8ba9\u200b\u8bf7\u6c42\u200b\u66f4\u52a0\u200b\u7684\u200b\u5e73\u6ed1\u200b\u3002</li> <li>\u200b\u72b6\u6001\u200b\u6027\u200b\uff0c\u200b\u662f\u200b\u7f3a\u70b9\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u4f18\u70b9\u200b\u3002\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u6240\u6709\u200b\u8bf7\u6c42\u200b\u7684\u200b\u539f\u59cb\u200b\u72b6\u6001\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u7edf\u8ba1\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u7f3a\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u72b6\u6001\u200b\u6027\u200b\uff0c\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7b97\u6cd5\u200b\u9700\u8981\u200b\u7ef4\u62a4\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u8bf7\u6c42\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd9\u4e9b\u200b\u8bf7\u6c42\u200b\u4e0d\u662f\u200b\u5355\u7eaf\u200b\u7684\u200b\u6570\u503c\u200b\uff0c\u200b\u5b83\u4eec\u200b\u548c\u200b\u6700\u5c0f\u200b\u683c\u5b50\u200b\u6302\u94a9\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u4e00\u5b9a\u200b\u7684\u200b\u72b6\u6001\u200b\u5b58\u50a8\u200b\u5f00\u9500\u200b\uff0c\u200b\u5c24\u5176\u200b\u5bf9\u4e8e\u200b\u5927\u89c4\u6a21\u200b\u7684\u200b\u7cfb\u7edf\u200b\u3002</li> </ul> </li> </ul>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2_2","title":"2. \u200b\u9002\u7528\u200b\u573a\u666f","text":"<p>\u200b\u9009\u62e9\u200b\u573a\u666f\u200b\u524d\u200b\uff0c\u200b\u4f9d\u7136\u200b\u8981\u200b\u4e86\u89e3\u200b\u5b83\u200b\u7684\u200b\u4f18\u7f3a\u70b9\u200b\uff0c\u200b\u624d\u200b\u77e5\u9053\u200b\u600e\u4e48\u200b\u53bb\u200b\u9002\u914d\u200b\u573a\u666f\u200b\u3002\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6700\u5927\u200b<code>\u200b\u4f18\u70b9\u200b</code>\u200b\u662f\u200b\u5e73\u6ed1\u200b\u3002\u200b\u80fd\u591f\u200b\u5141\u8bb8\u200b\u5076\u5c14\u200b\u7a81\u53d1\u200b\u7684\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4f46\u662f\u200b\u4f1a\u200b\u9650\u5236\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u603b\u200b\u6b21\u6570\u200b\uff0c\u200b\u9002\u5408\u200b\u9700\u8981\u200b\u4fdd\u8bc1\u200b\u5e73\u5747\u200b\u901f\u7387\u200b\u7684\u200b\u573a\u666f\u200b\u3002<code>\u200b\u7f3a\u70b9\u200b</code>\u200b\u662f\u200b\u4ed6\u200b\u9700\u8981\u200b\u4fdd\u5b58\u200b\u7a97\u53e3\u200b\u5185\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\u7684\u200b\u65f6\u95f4\u200b\u5206\u5e03\u200b\u72b6\u6001\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u5360\u7528\u200b\u5185\u5b58\u200b\u3002\u200b\u6b63\u662f\u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u7684\u200b\u72b6\u6001\u200b\u3002\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6700\u597d\u200b\u662f\u200b\u7528\u4e8e\u200b\u5168\u5c40\u200b\u7684\u200b\u9650\u6d41\u200b\u3002\u200b\u5982\u679c\u200b\u7528\u4e8e\u200b\u7528\u6237\u200b\u7ea7\u522b\u200b\u7684\u200b\u9650\u6d41\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u4f1a\u200b\u4e3a\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u7528\u6237\u200b\u90fd\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u6d88\u8017\u200b\u5185\u5b58\u200b\u3002</p> <ul> <li>api\u200b\u9650\u6d41\u200b</li> </ul> <p>\u200b\u9488\u5bf9\u200b\u63a5\u53e3\u200b\u9650\u6d41\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e00\u822c\u200b\u4f1a\u200b\u901a\u8fc7\u200b\u538b\u6d4b\u200b\u9884\u4f30\u200b\u63a5\u53e3\u200b\u7684\u200bqps\u3002\u200b\u4e86\u89e3\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u4e4b\u540e\u200b\u3002\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5bf9\u63a5\u53e3\u200b\u8fdb\u884c\u200b\u6700\u5927\u200bqps90%\u200b\u7684\u200b\u901f\u7387\u200b\u9650\u5236\u200b\u3002\u200b\u8fd9\u65f6\u5019\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7528\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u9650\u6d41\u200b\u3002\u200b\u4ed6\u200b\u53ef\u4ee5\u200b\u5e73\u6ed1\u200b\u7684\u200b\u4fdd\u8bc1\u200b\u6bcf\u79d2\u200b\u7684\u200b\u8bf7\u6c42\u200b\u91cf\u200b\u4e0d\u200b\u8d85\u8fc7\u200b\u6211\u4eec\u200b\u914d\u7f6e\u200b\u7684\u200b\u6700\u5927\u200bqps\u3002</p> <ul> <li>sentinel\u200b\u9650\u6d41\u200b\u6846\u67b6\u200b\u5e95\u5c42\u200b</li> </ul> <p>\u200b\u6b63\u662f\u200b\u7531\u4e8e\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u72b6\u6001\u200b\u7279\u6027\u200b\u3002\u200b\u4ed6\u200b\u80fd\u200b\u4fdd\u5b58\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u7684\u200b\u65f6\u95f4\u200b\u5206\u5e03\u200b\u8fd9\u200b\u7c7b\u200b\u539f\u59cb\u200b\u4fe1\u606f\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u5bb9\u6613\u200b\u7684\u200b\u7edf\u8ba1\u200b\u51fa\u200b1s\uff0c5s\uff0c10s\u200b\u5185\u200b\u7684\u200b\u8bf7\u6c42\u200b\u6570\u91cf\u200b\uff0c\u200b\u6210\u529f\u200b\u6570\u91cf\u200b\uff0c\u200b\u9650\u6d41\u200b\u6570\u91cf\u200b\u3002sentinel\u200b\u5e95\u5c42\u200b\u6b63\u662f\u200b\u7528\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u4e9b\u200b\u72b6\u6001\u200b\u7684\u200b\u8bb0\u5f55\u200b\u4e0e\u200b\u9650\u6d41\u200b\u3002</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#3_2","title":"3. \u200b\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.starter.frequencycontrol.service.frequencycontrol.strategy.SlidingWindowFrequencyController</code></p> <p>\u200b\u6838\u5fc3\u200b\u4ee3\u7801\u200b\uff1a</p> Java<pre><code>@Override\nprotected boolean reachRateLimit(Map&lt;String, SlidingWindowDTO&gt; frequencyControlMap) {\n    List&lt;String&gt; frequencyKeys = new ArrayList&lt;&gt;(frequencyControlMap.keySet());\n    for (String key : frequencyKeys) {\n        SlidingWindowDTO dto = frequencyControlMap.get(key);\n        // \u200b\u83b7\u53d6\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u200b\u8ba1\u6570\u200b\n        Long count = RedisUtil.zCard(dto.getKey());\n        int frequencyControlCountLimit = dto.getCount();\n        // \u200b\u5224\u65ad\u200b\uff1a\u200b\u5230\u8fbe\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\n        if (Objects.nonNull(count) &amp;&amp; count &gt;= frequencyControlCountLimit) {\n            log.warn(\"frequenctControl limit key:{}, count:{}\", key, count);\n            return true;\n        }\n    }\n    return false;\n}\n\n@Override\nprotected void addFrequencyControlStatisticsCount(Map&lt;String, SlidingWindowDTO&gt; frequencyControlMap) {\n    List&lt;String&gt; frequencyKeys = new ArrayList&lt;&gt;(frequencyControlMap.keySet());\n    for (String key : frequencyKeys) {\n        SlidingWindowDTO dto = frequencyControlMap.get(key);\n        // \u200b\u8ba1\u7b97\u200b\u6700\u5c0f\u200b\u7a97\u53e3\u200b\u5468\u671f\u200b\uff0c\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6beb\u79d2\u200b\u7ea7\u522b\u200b\n        long period = dto.getUnit().toMillis(dto.getPeriod());\n        long current = System.currentTimeMillis();\n        // \u200b\u8ba1\u7b97\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\n        long length = period * dto.getWindowSize();\n        long start = current - length;\n        // \u200b\u6dfb\u52a0\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\uff0c\u200b\u540c\u65f6\u200b\u5220\u9664\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\u5916\u200b\u7684\u200b\u65e7\u200b\u6570\u636e\u200b\n        RedisUtil.zAddAndExpire(key, start, length, current);\n    }\n}\n</code></pre> <p>\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u65b9\u9762\u200b\uff1a\u200b\u6211\u200b\u9009\u62e9\u200b<code>Redis</code>\u200b\u7684\u200b <code>Zset</code> \u200b\u6570\u636e\u7ed3\u6784\u200b \u200b\u5b9e\u73b0\u200b \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u65f6\u95f4\u200b\u8303\u56f4\u200b\u7cbe\u786e\u200b\u5730\u200b\u505a\u200b\u8303\u56f4\u200b\u7b5b\u9009\u200b</p> <ul> <li> <p><code>#reachRateLimit</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b</p> <ol> <li>\u200b\u6279\u91cf\u200b\u83b7\u53d6\u200b\uff1a\u200b\u5c06\u200b\u6240\u6709\u200b\u9650\u6d41\u200b\u952e\u200b\u63d0\u53d6\u200b\u4e3a\u200b <code>List</code>\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>RedisUtil.mget</code>\u200b\u65b9\u6cd5\u200b\u4ece\u200b <code>Redis</code> \u200b\u4e2d\u200b\u6279\u91cf\u200b\u83b7\u53d6\u200b\u8fd9\u4e9b\u200b\u952e\u200b\u7684\u200b\u8ba1\u200b\u6570\u503c\u200b\u3002</li> <li>\u200b\u83b7\u53d6\u200b\u8ba1\u6570\u200b\uff1a\u200b\u904d\u5386\u200b <code>frequencyControlMap</code> \u200b\u4e2d\u200b\u7684\u200b\u9650\u6d41\u200b\u952e\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>Redis</code> \u200b\u7684\u200b <code>zCard</code> \u200b\u65b9\u6cd5\u200b\u83b7\u53d6\u200b\u6bcf\u4e2a\u200b\u952e\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u8ba1\u200b\u6570\u503c\u200b\u3002</li> <li>\u200b\u9650\u6d41\u200b\u5224\u65ad\u200b\uff1a\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u952e\u200b\u7684\u200b\u8ba1\u200b\u6570\u503c\u200b\u8fdb\u884c\u200b\u9650\u6d41\u200b\u68c0\u67e5\u200b\uff0c\u200b\u82e5\u200b\u8fbe\u5230\u200b\u6216\u200b\u8d85\u8fc7\u200b\u8bbe\u5b9a\u200b\u9608\u503c\u200b\uff0c\u200b\u5219\u200b\u8bb0\u5f55\u200b\u65e5\u5fd7\u200b\u5e76\u200b\u8fd4\u56de\u200b <code>true</code> \u200b\u8868\u793a\u200b\u9650\u6d41\u200b\u3002</li> <li>\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\uff1a\u200b\u5982\u679c\u200b\u6240\u6709\u200b\u952e\u200b\u90fd\u200b\u672a\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b\uff0c\u200b\u8fd4\u56de\u200b <code>false</code> \u200b\u8868\u793a\u200b\u672a\u200b\u9650\u6d41\u200b\u3002</li> </ol> </li> <li> <p><code>#addFrequencyControlStatisticsCount</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u589e\u52a0\u200b\u6bcf\u4e2a\u200b\u9650\u6d41\u200b\u952e\u200b\u7684\u200b\u8ba1\u6570\u200b\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u952e\u200b\u7684\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\u3002</p> </li> </ul> <p>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u76f8\u5173\u200b\u5b9e\u73b0\u200b\u76f8\u5bf9\u200b\u590d\u6742\u200b\uff0c\u200b\u9996\u5148\u200b\u6765\u770b\u200b<code>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5b9e\u4f53\u7c7b\u200b(SlidingWindowDTO)</code>\u200b\u662f\u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u7684\u200b   </p> Java<pre><code>public class SlidingWindowDTO extends FrequencyControlDTO {\n    /**\n     * \u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\uff0c\u200b\u9ed8\u8ba4\u200b 10 s\n     */\n    private int windowSize;\n    /**\n     * \u200b\u7a97\u53e3\u200b\u6700\u5c0f\u200b\u5468\u671f\u200b 1s (\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\u662f\u200b 10s\uff0c 1s\u200b\u4e00\u4e2a\u200b\u5c0f\u683c\u5b50\u200b\uff0c-\u200b\u5171\u200b10\u200b\u4e2a\u200b\u683c\u5b50\u200b)\n     */\n    private int period;\n}\n</code></pre> <p>\u200b\u5b9a\u4e49\u200b\u65b9\u9762\u200b\uff0c\u200b\u9996\u5148\u200b\u7ee7\u627f\u200b\u4e86\u200b\u9891\u63a7\u200b\u57fa\u7c7b\u200b <code>FrequencyControlDTO</code> \uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u9891\u63a7\u200b\u7684\u200b\u4e00\u4e9b\u200b\u57fa\u672c\u200b\u5c5e\u6027\u200b</p> Java<pre><code>public class FrequencyControlDTO {\n    /**\n     * \u200b\u4ee3\u8868\u200b\u9891\u63a7\u200b\u7684\u200bKey \u200b\u5982\u679c\u200btarget\u200b\u4e3a\u200bKey\u200b\u7684\u8bdd\u200b \u200b\u8fd9\u91cc\u200b\u8981\u200b\u4f20\u503c\u200b\u7528\u4e8e\u200b\u6784\u5efa\u200bredis\u200b\u7684\u200bKey target\u200b\u4e3a\u200bIp\u200b\u6216\u8005\u200bUID\u200b\u7684\u8bdd\u200b\u4f1a\u200b\u4ece\u200b\u4e0a\u4e0b\u6587\u200b\u53d6\u503c\u200b Key\u200b\u5b57\u200b\u6bb5\u200b\u65e0\u9700\u200b\u4f20\u503c\u200b\n     */\n    private String key;\n\n    /**\n     * \u200b\u9891\u63a7\u200b\u65f6\u95f4\u200b\u5355\u4f4d\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u79d2\u200b\n     *\n     * @return \u200b\u5355\u4f4d\u200b\n     */\n    private TimeUnit unit;\n\n    /**\n     * \u200b\u5355\u4f4d\u200b\u65f6\u95f4\u200b\u5185\u200b\u6700\u5927\u200b\u8bbf\u95ee\u200b\u6b21\u6570\u200b\n     *\n     * @return \u200b\u6b21\u6570\u200b\n     */\n    private Integer count;\n}\n</code></pre> <p>\u200b\u800c\u200b\u5b50\u7c7b\u200b\u5b9e\u73b0\u200b\u4e0a\u200b\u5b9a\u4e49\u200b\u4e86\u200b \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7279\u6709\u200b\u7684\u200b\u5c5e\u6027\u200b\uff1a<code>windowSize</code> \u200b\u548c\u200b <code>period</code></p> <ul> <li><code>windowSize</code> \u200b\u8868\u793a\u200b \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u603b\u200b\u5927\u5c0f\u200b(\u200b\u6570\u636e\u200b\u8303\u56f4\u200b) \uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u4ee3\u8868\u200b\u7740\u200bRedis\u200b\u5b58\u50a8\u200b\u7684\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b</li> <li><code>period</code> \u200b\u8868\u793a\u200b\u7a97\u53e3\u200b\u6700\u5c0f\u200b\u5468\u671f\u200b\uff0c\u200b\u4ee3\u8868\u200b\u65f6\u95f4\u200b\u7c92\u5ea6\u200b\u5927\u5c0f\u200b</li> </ul> <p>\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u8ba1\u7b97\u200b\u903b\u8f91\u200b\uff1a</p> Java<pre><code>SlidingWindowDTO dto = frequencyControlMap.get(key);\n // \u200b\u8ba1\u7b97\u200b\u6700\u5c0f\u200b\u7a97\u53e3\u200b\u5468\u671f\u200b\uff0c\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6beb\u79d2\u200b\u7ea7\u522b\u200b\nlong period = dto.getUnit().toMillis(dto.getPeriod());\nlong current = System.currentTimeMillis();\n// \u200b\u8ba1\u7b97\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\nlong length = period * dto.getWindowSize();\nlong start = current - length;\n// \u200b\u6dfb\u52a0\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\uff0c\u200b\u540c\u65f6\u200b\u5220\u9664\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\u5916\u200b\u7684\u200b\u65e7\u200b\u6570\u636e\u200b\nRedisUtil.zAddAndExpire(key, start, length, current);\n</code></pre> <p>\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u8bf7\u6c42\u200b\u90fd\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u6233\u200b\u5230\u200b Redis \u200b\u7684\u200b\u6709\u5e8f\u200b\u96c6\u5408\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u5220\u9664\u200b\u7a97\u53e3\u200b\u8303\u56f4\u200b\u4e4b\u5916\u200b\u7684\u200b\u65e7\u200b\u6570\u636e\u200b\uff0c\u200b\u4ee5\u200b\u4fdd\u6301\u200b\u8ba1\u6570\u200b\u6570\u636e\u200b\u53ea\u200b\u53cd\u6620\u200b\u5f53\u524d\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u8bf7\u6c42\u200b\u6570\u200b\u3002</p> <p>\u200b\u518d\u200b\u6765\u770b\u200bRedis\u200b\u4e2d\u662f\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff1a</p> Java<pre><code>public static void zAddAndExpire(String key, long startTime, long expireTime, long currentTime) {\n    // \u200b\u6dfb\u52a0\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\n    template.opsForZSet().add(key, String.valueOf(currentTime), currentTime);\n    // \u200b\u5220\u9664\u200b\u5468\u671f\u200b\u4e4b\u524d\u200b\u7684\u200b\u6570\u636e\u200b\n    template.opsForZSet().removeRangeByScore(key, 0, startTime);\n    // \u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\u957f\u5ea6\u200b+\u200b\u65f6\u95f4\u200b\u95f4\u9694\u200b\n    template.expire(key, expireTime, TimeUnit.MICROSECONDS);\n}\n</code></pre> <p>\u200b\u505a\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u64cd\u4f5c\u200b\uff1a</p> <ol> <li>\u200b\u6dfb\u52a0\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u6233\u200b\uff1a\u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u8bf7\u6c42\u200b\u7684\u200b\u65f6\u95f4\u200b\u3002</li> <li>\u200b\u5220\u9664\u200b\u65e7\u200b\u6570\u636e\u200b\uff1a\u200b\u53ea\u200b\u4fdd\u7559\u200b\u5f53\u524d\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u65f6\u95f4\u200b\u6233\u200b\u6570\u636e\u200b\uff0c\u200b\u4fdd\u8bc1\u200b\u9650\u6d41\u200b\u5224\u65ad\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002</li> <li>\u200b\u8bbe\u7f6e\u200b\u8fc7\u671f\u200b\u65f6\u95f4\u200b\uff1a\u200b\u63a7\u5236\u200b\u96c6\u5408\u200b\u7684\u200b\u751f\u5b58\u200b\u65f6\u95f4\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u6ca1\u6709\u200b\u65b0\u200b\u8bf7\u6c42\u200b\u65f6\u200b\u81ea\u52a8\u200b\u6e05\u9664\u200b\u6570\u636e\u200b\uff0c\u200b\u8282\u7701\u200b Redis \u200b\u5185\u5b58\u200b\u3002</li> </ol>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#54","title":"5.4 \u200b\u6f0f\u6876\u200b\u7b97\u6cd5","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1_3","title":"1. \u200b\u57fa\u672c\u200b\u4ecb\u7ecd","text":"<p>\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\u6b63\u5982\u200b\u5176\u540d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u60f3\u8c61\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5e95\u90e8\u200b\u7834\u200b\u4e86\u200b\u6d1e\u200b\u7684\u200b\u6876\u200b\uff0c\u200b\u65e0\u8bba\u200b\u4f60\u200b\u4ee5\u200b\u4ec0\u4e48\u6837\u200b\u7684\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u9891\u7387\u200b\u53bb\u200b\u6dfb\u52a0\u200b\u6c34\u200b\u3002\u200b\u6c34\u90fd\u4f1a\u200b\u4ece\u200b\u5e95\u90e8\u200b\u4ee5\u200b\u56fa\u5b9a\u200b\u7684\u200b\u9891\u7387\u200b\u6d41\u51fa\u200b\uff0c\u200b\u5176\u4f59\u200b\u7684\u200b\u6c34\u84c4\u200b\u5728\u200b\u6f0f\u6876\u200b\u4e2d\u200b\uff0c\u200b\u76f4\u5230\u200b\u6f0f\u6876\u200b\u6ee1\u200b\u4e86\u200b\u88ab\u200b\u4e22\u5f03\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b\u671f\u671b\u200b1S\u200b\u5185\u200b\u6700\u200b\u591a\u200b\u5904\u7406\u200b4\u200b\u6b21\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6d41\u51fa\u200b\u901f\u5ea6\u200b\u5c31\u662f\u200b\u6bcf\u200b0.25S\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b.\u200b\u5e76\u4e14\u200b\u6f0f\u6876\u200b\u6700\u5927\u200b\u5bb9\u91cf\u200b\u4e3a\u200b10\u200b\u4e2a\u200b\u8bf7\u6c42\u200b\u3002</p> <p></p> <p>\u200b\u4e0d\u89c4\u5219\u200b\u7684\u200b\u8bf7\u6c42\u200b\u968f\u610f\u200b\u7684\u200b\u6295\u9012\u200b\u5230\u200b\u6211\u4eec\u200b\u7684\u200b\u6876\u200b\u91cc\u200b\uff0c\u200b\u7136\u540e\u200b\u4f1a\u200b\u6709\u200b\u56fa\u5b9a\u200b\u7684\u200b\u9891\u7387\u200b\u53bb\u200b\u6d88\u8d39\u200b\u5b83\u200b\uff0c\u200b\u5982\u679c\u200b\u8d85\u8fc7\u200b\u6876\u200b\u7684\u200b\u6700\u5927\u200b\u5bb9\u91cf\u200b10\uff0c\u200b\u90a3\u4e48\u200b\u8bf7\u6c42\u200b\u5c06\u4f1a\u200b\u88ab\u200b\u4e22\u5f03\u200b\u3002 \u200b\u6f0f\u6876\u200b\u9650\u6d41\u200b\u7b97\u6cd5\u200b\u6700\u5927\u200b\u7684\u200b\u7279\u70b9\u200b\u5c31\u662f\u200b\u6d41\u91cf\u200b\u6574\u578b\u200b\u3002\u200b\u8ba9\u200b\u4e0d\u89c4\u5219\u200b\u7684\u200b\u8bf7\u6c42\u200b\u9891\u7387\u200b\uff0c\u200b\u8f6c\u4e3a\u200b\u89c4\u5219\u200b\u7684\u200b\u9891\u7387\u200b\u8fdb\u884c\u200b\u6d88\u8d39\u200b\u3002</p> <ul> <li> <p>\u200b\u4f18\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u53ef\u4ee5\u200b\u4e25\u683c\u200b\u9650\u5236\u200b\u8bf7\u6c42\u200b\u7684\u200b\u5904\u7406\u901f\u5ea6\u200b\uff0c\u200b\u907f\u514d\u200b\u77ac\u95f4\u200b\u8bf7\u6c42\u200b\u8fc7\u591a\u200b\u5bfc\u81f4\u7cfb\u7edf\u200b\u5d29\u6e83\u200b\u6216\u8005\u200b\u96ea\u5d29\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u7f3a\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u9700\u8981\u200b\u5bf9\u200b\u8bf7\u6c42\u200b\u8fdb\u884c\u200b\u7f13\u5b58\u200b\uff0c\u200b\u4f1a\u200b\u589e\u52a0\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u5185\u5b58\u200b\u6d88\u8017\u200b\u3002</li> <li>\u200b\u9762\u5bf9\u200b\u7a81\u53d1\u200b\u6d41\u91cf\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u4f18\u70b9\u200b\u540c\u65f6\u200b\u4e5f\u200b\u4f1a\u200b\u662f\u200b\u7f3a\u70b9\u200b\u3002\u200b\u65e0\u6cd5\u200b\u9002\u5e94\u200b\u77ac\u65f6\u200b\u7684\u200b\u7a81\u589e\u200b\u6d41\u91cf\u200b</li> </ul> </li> </ul>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2_3","title":"2. \u200b\u4e0d\u200b\u9002\u5408\u200b\u573a\u666f","text":"<p>\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\u4e0d\u592a\u200b\u9002\u5408\u200bC\u200b\u7aef\u200b\u63a5\u53e3\u200b\u7684\u200b\u9650\u6d41\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5bf9\u4e8e\u200b\u90fd\u200b\u5230\u200b\u4e86\u200b\u9650\u6d41\u200b\u7684\u200b\u573a\u666f\u200b\u4e86\u200b\u3002\u200b\u5e76\u53d1\u200b\u5df2\u7ecf\u200b\u6bd4\u8f83\u200b\u9ad8\u200b\u4e86\u200b\u3002\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u7684\u200b\u662f\u200b\u8d85\u8fc7\u200b\u9650\u5236\u200b\u7684\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u7acb\u9a6c\u200b\u5c31\u200b\u7ed9\u200b\u4ed6\u200b\u5feb\u901f\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b\u4e86\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u505c\u200b\u5728\u200b\u6876\u200b\u91cc\u200b\u4f11\u7720\u200b\u7b49\u5f85\u200b\u54cd\u5e94\u200b\u3002\u200b\u8fd9\u6837\u200b\u6574\u4f53\u200b\u7684\u200b\u54cd\u5e94\u200b\u65f6\u95f4\u200b\u4f1a\u200b\u5f88\u200b\u9ad8\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u200b\u5360\u7528\u200b\u7684\u200b\u8bf7\u6c42\u200b\u8fde\u63a5\u6c60\u200b\u3002</p> <p>\u200b\u6545\u4e0d\u5bf9\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\u505a\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#55","title":"5.5 \u200b\u4ee4\u724c\u200b\u6876","text":"","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#1_4","title":"1. \u200b\u57fa\u672c\u200b\u4ecb\u7ecd","text":"<p>\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u56fa\u5b9a\u200b\u5bb9\u91cf\u200b\u7684\u200b\u4ee4\u724c\u200b\u6876\u200b\uff0c\u200b\u6bcf\u79d2\u949f\u200b\u4f1a\u200b\u5411\u200b\u4ee4\u724c\u200b\u6876\u200b\u4e2d\u200b\u653e\u5165\u200b\u4e00\u5b9a\u200b\u6570\u91cf\u200b\u7684\u200b\u4ee4\u724c\u200b\u3002\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u90fd\u200b\u9700\u8981\u200b\u6d88\u8017\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b\u624d\u80fd\u200b\u653e\u884c\u200b\u3002\u200b\u4f60\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u4ed6\u200b\u548c\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\u5f88\u200b\u50cf\u200b\uff0c\u200b\u90fd\u200b\u6709\u200b\u4e2a\u200b\u5bb9\u91cf\u200b\u56fa\u5b9a\u200b\u7684\u200b\u6876\u200b\u3002   - \u200b\u4e00\u4e2a\u200b\u662f\u200b\u5300\u901f\u200b\u6d41\u51fa\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5300\u901f\u200b\u653e\u5165\u200b\u4ee4\u724c\u200b\u3002   - \u200b\u4e00\u4e2a\u200b\u79ef\u7d2f\u200b\u7684\u200b\u662f\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u79ef\u7d2f\u200b\u7684\u200b\u662f\u200b\u53ef\u200b\u653e\u884c\u200b\u7684\u200b\u4ee4\u724c\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b\u671f\u671b\u200b1S\u200b\u5185\u200b\u6700\u200b\u591a\u200b\u5904\u7406\u200b4\u200b\u6b21\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4ee4\u724c\u200b\u653e\u5165\u200b\u901f\u5ea6\u200b\u5c31\u662f\u200b\u6bcf\u200b0.25S\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b.\u200b\u5e76\u4e14\u200b\u6876\u200b\u6700\u5927\u200b\u5bb9\u91cf\u200b\u4e3a\u200b10\u200b\u4e2a\u200b\u4ee4\u724c\u200b\u3002</p> <p>\u200b\u5728\u200b\u8bf7\u6c42\u200b\u5f88\u591a\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4ed6\u200b\u5176\u5b9e\u200b\u548c\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\u7684\u200b\u6548\u679c\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\u3002\u200b\u6700\u5927\u200b\u7684\u200b\u5dee\u522b\u200b\u5c31\u662f\u200b\u5728\u200b\u8bf7\u6c42\u200b\u4e0d\u591a\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5b83\u200b\u80fd\u200b\u5b58\u50a8\u200b\u4ee4\u724c\u200b\uff0c\u200b\u7528\u6765\u200b\u5e94\u5bf9\u200b\u7a81\u589e\u200b\u6d41\u91cf\u200b\u3002</p> <ul> <li> <p>\u200b\u4f18\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u7cbe\u5ea6\u9ad8\u200b\uff1a\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u5b9e\u9645\u200b\u60c5\u51b5\u200b\u52a8\u6001\u200b\u8c03\u6574\u200b\u751f\u6210\u200b\u4ee4\u724c\u200b\u7684\u200b\u901f\u7387\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u8f83\u200b\u9ad8\u7cbe\u5ea6\u200b\u7684\u200b\u9650\u6d41\u200b\u3002</li> <li>\u200b\u5f39\u6027\u200b\u597d\u200b\uff1a\u200b\u76f8\u6bd4\u200b\u6f0f\u6876\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u7a81\u53d1\u200b\u6d41\u91cf\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u77ed\u65f6\u95f4\u200b\u5185\u200b\u63d0\u4f9b\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u5904\u7406\u200b\u80fd\u529b\u200b\uff0c\u200b\u4ee5\u200b\u5904\u7406\u200b\u7a81\u53d1\u200b\u6d41\u91cf\u200b\u3002</li> <li>\u200b\u65e0\u200b\u72b6\u6001\u200b\u6027\u200b\uff1a\u200b\u76f8\u8f83\u200b\u4e8e\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7b97\u6cd5\u200b\u7b49\u200b\u9700\u8981\u200b\u7ef4\u62a4\u200b\u72b6\u6001\u200b\u4fe1\u606f\u200b\u7684\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u4e0d\u200b\u9700\u8981\u200b\u6301\u7eed\u200b\u7ef4\u62a4\u200b\u5927\u91cf\u200b\u7684\u200b\u72b6\u6001\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u66f4\u5177\u200b\u6269\u5c55\u6027\u200b\u548c\u200b\u9ad8\u6548\u6027\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u7f3a\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u5b9e\u73b0\u200b\u590d\u6742\u200b\uff1a\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u9700\u8981\u200b\u5728\u200b\u56fa\u5b9a\u200b\u7684\u200b\u65f6\u95f4\u200b\u95f4\u9694\u200b\u5185\u200b\u751f\u6210\u200b\u4ee4\u724c\u200b\uff0c\u200b\u9700\u8981\u200b\u5f00\u542f\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u3002\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200b\u7279\u6b8a\u200b\u624b\u6bb5\u200b\u4e0d\u200b\u9700\u8981\u200b\u7ebf\u7a0b\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b9e\u73b0\u200b\u5c31\u200b\u66f4\u52a0\u200b\u590d\u6742\u200b\u3002</li> <li>\u200b\u9700\u8981\u200b\u9884\u70ed\u200b\uff1a\u200b\u5728\u200b\u521a\u200b\u542f\u52a8\u200b\u65f6\u200b\uff0c\u200b\u6876\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7684\u200b\u4ee4\u724c\u200b\uff0c\u200b\u8fd9\u65f6\u5019\u200b\u9000\u5316\u200b\u6210\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6ca1\u6876\u200b\u7684\u200b\u6f0f\u6876\u200b\uff0c\u200b\u5f88\u200b\u53ef\u80fd\u200b\u5728\u200b\u4e00\u200b\u5f00\u59cb\u200b\u5bf9\u200b\u8bf7\u6c42\u200b\u4ea7\u751f\u200b\u8f83\u5927\u200b\u7684\u200b\u9650\u5236\u200b\u3002</li> </ul> </li> </ul>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#2_4","title":"2. \u200b\u9002\u7528\u200b\u573a\u666f","text":"<p>\u200b\u76f8\u6bd4\u200b\u8d77\u6f0f\u200b\u6876\u200b\uff0c\u200b\u4ee4\u724c\u200b\u6876\u200b\u7b97\u6cd5\u200b\u66f4\u52a0\u200b\u9002\u5408\u200b\u5e94\u5bf9\u200b\u7a81\u53d1\u200b\u7684\u200b\u6d41\u91cf\u200b\u3002\u200b\u6d41\u91cf\u200b\u8fbe\u5230\u200b\u6781\u9650\u200b\u540e\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u9000\u5316\u200b\u6210\u6ca1\u6876\u200b\u7684\u200b\u6f0f\u6876\u200b\uff0c\u200b\u901f\u7387\u200b\u53d8\u6210\u200b\u4e86\u200b\u4e25\u683c\u63a7\u5236\u200b\u3002\u200b\u9002\u7528\u200b\u4e8e\u200b\u6d41\u91cf\u200b\u6574\u4f53\u200b\u5e73\u6ed1\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6ee1\u8db3\u200b\u4e00\u5b9a\u200b\u7684\u200b\u7a81\u53d1\u200b\u6d41\u7a0b\u200b\u573a\u666f\u200b</p> <p>\u200b\u4ed6\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5f88\u5927\u200b\u7684\u200b<code>\u200b\u7f3a\u70b9\u200b</code>\uff0c\u200b\u5c31\u662f\u200b\u4ed6\u200b\u7684\u200b\u9884\u70ed\u200b\u95ee\u9898\u200b\u3002\u200b\u521a\u200b\u521b\u5efa\u200b\u7684\u200b\u4ee4\u724c\u200b\u6876\u200b\uff0c\u200b\u8fd9\u65f6\u5019\u200b\u6ca1\u6709\u200b\u4ee4\u724c\u200b\uff0c\u200b\u8bf7\u6c42\u200b\u521a\u200b\u8fdb\u6765\u200b\uff0c\u200b\u53c8\u200b\u7531\u4e8e\u200b\u5b83\u200b\u6ca1\u6709\u200b\u6876\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5c31\u200b\u628a\u200b\u8bf7\u6c42\u200b\u4e22\u5f03\u200b\u4e86\u200b\u3002</p>","tags":["java"]},{"location":"blog/backend/Java/FrequencyControl/#3_3","title":"3. \u200b\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.starter.frequencycontrol.service.frequencycontrol.strategy.TokenBucketFrequencyController</code></p> <p>\u200b\u6838\u5fc3\u200b\u4ee3\u7801\u200b\uff1a</p> Java<pre><code>@Override\nprotected boolean reachRateLimit(Map&lt;String, TokenBucketDTO&gt; frequencyControlMap) {\n    List&lt;String&gt; frequencyKeys = new ArrayList&lt;&gt;(frequencyControlMap.keySet());\n    for (String key : frequencyKeys) {\n        // \u200b\u5c1d\u8bd5\u200b\u83b7\u53d6\u200b1\u200b\u4e2a\u200b\u4ee4\u724c\u200b(\u200b\u4e0d\u200b\u6263\u51cf\u200b)\uff0c\u200b\u5982\u679c\u200b\u5931\u8d25\u200b\uff0c\u200b\u8bf4\u660e\u200b\u4ee4\u724c\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u9700\u8981\u200b\u9650\u6d41\u200b\n        if (!tokenBucketManager.tryAcquire(key, 1)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n@Override\nprotected void addFrequencyControlStatisticsCount(Map&lt;String, TokenBucketDTO&gt; frequencyControlMap) {\n    List&lt;String&gt; frequencyKeys = new ArrayList&lt;&gt;(frequencyControlMap.keySet());\n    for (String key : frequencyKeys) {\n        TokenBucketDTO dto = frequencyControlMap.get(key);\n        // \u200b\u521b\u5efa\u200b\u4ee4\u724c\u200b\u6876\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        tokenBucketManager.createTokenBucket(key, dto.getCapacity(), dto.getRate());\n        // \u200b\u6263\u51cf\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b\n        tokenBucketManager.deductionToken(key, 1);\n    }\n}\n</code></pre> <ul> <li> <p><code>#reachRateLimit</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\u9608\u503c\u200b</p> <ol> <li>\u200b\u83b7\u53d6\u200b\u9891\u7387\u200b\u63a7\u5236\u952e\u200b\u5217\u8868\u200b\uff1a\u200b\u5c06\u200b <code>frequencyControlMap</code> \u200b\u7684\u200b\u952e\u200b\u5b58\u5165\u200b <code>frequencyKeys</code> \u200b\u5217\u8868\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u9010\u4e2a\u200b\u68c0\u67e5\u200b\u4ee4\u724c\u200b\u6876\u200b\uff1a<ul> <li>\u200b\u904d\u5386\u200b\u6bcf\u4e2a\u200b\u9891\u7387\u200b\u63a7\u5236\u952e\u200b <code>key</code>\u3002</li> <li>\u200b\u8c03\u7528\u200b <code>tokenBucketManager.tryAcquire(key, 1)</code> \u200b\u5c1d\u8bd5\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b\uff0c\u200b\u4e0d\u200b\u6263\u51cf\u200b\u6876\u200b\u4e2d\u200b\u5df2\u6709\u200b\u7684\u200b\u4ee4\u724c\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u8fd4\u56de\u200b <code>false</code>\uff0c\u200b\u8868\u793a\u200b\u5f53\u524d\u200b\u4ee4\u724c\u200b\u6876\u200b\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u9650\u6d41\u200b\uff0c\u200b\u4e8e\u662f\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b <code>true</code>\u3002</li> </ul> </li> <li>\u200b\u6ca1\u6709\u200b\u8fbe\u5230\u200b\u9650\u6d41\u200b\uff1a\u200b\u5982\u679c\u200b\u6240\u6709\u200b\u952e\u200b\u7684\u200b\u4ee4\u724c\u200b\u6876\u200b\u4e2d\u200b\u5747\u200b\u6709\u200b\u8db3\u591f\u200b\u7684\u200b\u4ee4\u724c\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b <code>false</code>\u3002</li> </ol> </li> <li> <p><code>#addFrequencyControlStatisticsCount</code></p> <p>\u200b\u529f\u80fd\u200b\uff1a\u200b\u589e\u52a0\u200b\u6bcf\u4e2a\u200b\u9650\u6d41\u200b\u952e\u200b\u7684\u200b\u8ba1\u6570\u200b\u3002</p> <ol> <li>\u200b\u904d\u5386\u200b <code>frequencyKeys</code> \u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b key\u3002</li> <li>\u200b\u83b7\u53d6\u200b\u4ee4\u724c\u200b\u6876\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b <code>dto</code>\uff0c\u200b\u5305\u62ec\u200b\u6876\u200b\u7684\u200b\u5bb9\u91cf\u200b\u548c\u200b\u4ee4\u724c\u200b\u586b\u5145\u200b\u901f\u7387\u200b\u3002 </li> <li>\u200b\u8c03\u7528\u200b <code>tokenBucketManager.createTokenBucket(key, dto.getCapacity(), dto.getRate())</code> \u200b\u521b\u5efa\u200b\u4ee4\u724c\u200b\u6876\u200b\uff08\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff09\u3002</li> <li>\u200b\u6263\u51cf\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b\uff0c\u200b\u901a\u8fc7\u200b <code>deductionToken(key, 1)</code> \u200b\u8868\u793a\u200b\u8bf7\u6c42\u200b\u6d88\u8017\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4ee4\u724c\u200b\u3002</li> </ol> </li> </ul> <p>\u200b\u5e95\u5c42\u200b\u4f7f\u7528\u200b <code>ConcurrentHashMap</code> \u200b\u5b9e\u73b0\u200b key \u200b\u548c\u200b \u200b\u4ee4\u724c\u200b\u6876\u200b \u200b\u7684\u200b\u5b58\u50a8\u200b</p> <p>\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u4e8e\u200b\uff1a<code>com.iflove.starter.frequencycontrol.manager.TokenBucketManager</code></p>","tags":["java"]},{"location":"blog/backend/spring/spring/","title":"Spring","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["spring","java"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/","title":"\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bBean\u200b\u5bb9\u5668","text":"<p> \u200b\u7ea6\u200b 756 \u200b\u4e2a\u200b\u5b57\u200b  40 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 3 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#_1","title":"\u4e00\u200b. \u200b\u76ee\u6807","text":"<p>Spring Bean \u200b\u5bb9\u5668\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</p> <p>Spring \u200b\u5305\u542b\u200b\u5e76\u200b\u7ba1\u7406\u200b\u5e94\u7528\u200b\u5bf9\u8c61\u200b\u7684\u200b\u914d\u7f6e\u200b\u548c\u200b\u751f\u547d\u5468\u671f\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u610f\u4e49\u200b\u4e0a\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b\u7528\u4e8e\u200b\u627f\u8f7d\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5bb9\u5668\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u914d\u7f6e\u200b\u4f60\u200b\u7684\u200b\u6bcf\u4e2a\u200b Bean \u200b\u5bf9\u8c61\u200b\u662f\u200b\u5982\u4f55\u200b\u88ab\u200b\u521b\u5efa\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4e9b\u200b Bean \u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u6216\u8005\u200b\u6bcf\u6b21\u200b\u9700\u8981\u200b\u65f6\u200b\u90fd\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5b83\u4eec\u200b\u662f\u200b\u5982\u4f55\u200b\u76f8\u4e92\u200b\u5173\u8054\u200b\u6784\u5efa\u200b\u548c\u200b\u4f7f\u7528\u200b\u7684\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b Bean \u200b\u5bf9\u8c61\u200b\u4ea4\u7ed9\u200b Spring \u200b\u5bb9\u5668\u200b\u7ba1\u7406\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u4e2a\u200b Bean \u200b\u5bf9\u8c61\u200b\u5c31\u200b\u5e94\u8be5\u200b\u4ee5\u200b\u7c7b\u4f3c\u200b\u96f6\u4ef6\u200b\u7684\u200b\u65b9\u5f0f\u200b\u88ab\u200b\u62c6\u89e3\u200b\u540e\u200b\u5b58\u653e\u200b\u5230\u200b Bean \u200b\u7684\u200b\u5b9a\u4e49\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u6837\u200b\u76f8\u5f53\u4e8e\u200b\u4e00\u79cd\u200b\u628a\u200b\u5bf9\u8c61\u200b\u89e3\u200b\u8026\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7531\u200b Spring \u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\u7684\u200b\u7ba1\u7406\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200b\u5904\u7406\u200b\u5faa\u73af\u200b\u4f9d\u8d56\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u5f53\u200b\u4e00\u4e2a\u200b Bean \u200b\u5bf9\u8c61\u200b\u88ab\u200b\u5b9a\u4e49\u200b\u5b58\u653e\u200b\u4ee5\u540e\u200b\uff0c\u200b\u518d\u200b\u7531\u200b Spring \u200b\u7edf\u4e00\u200b\u8fdb\u884c\u200b\u88c5\u914d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u5305\u62ec\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u3001\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u7b49\u200b\uff0c\u200b\u6700\u7ec8\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b8c\u6574\u200b\u7684\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u540e\u200b\u7684\u200b\u5bf9\u8c61\u200b\u4e86\u200b\u3002</p> <p>\u200b\u800c\u200b\u6211\u4eec\u200b\u672c\u200b\u7ae0\u8282\u200b\u7684\u200b\u6848\u4f8b\u200b\u76ee\u6807\u200b\u5c31\u662f\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b Spring \u200b\u5bb9\u5668\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u3001\u200b\u5b58\u653e\u200b\u548c\u200b\u83b7\u53d6\u200b Bean \u200b\u5bf9\u8c61\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#_2","title":"\u4e8c\u200b. \u200b\u8bbe\u8ba1","text":"<ul> <li>\u200b\u5b9a\u4e49\u200b\uff1a<code>BeanDefinition</code>\uff0c\u200b\u53ef\u80fd\u200b\u8fd9\u200b\u662f\u200b\u4f60\u200b\u5728\u200b\u67e5\u9605\u200b Spring \u200b\u6e90\u7801\u200b\u65f6\u200b\u7ecf\u5e38\u200b\u770b\u5230\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5b83\u4f1a\u200b\u5305\u62ec\u200b <code>singleton</code>\u3001<code>prototype</code>\u3001<code>BeanClassName</code> \u200b\u7b49\u200b\u3002\u200b\u4f46\u200b\u76ee\u524d\u200b\u6211\u4eec\u200b\u521d\u6b65\u200b\u5b9e\u73b0\u200b\u4f1a\u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\u7684\u200b\u5904\u7406\u200b\uff0c\u200b\u53ea\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b <code>Object</code> \u200b\u7c7b\u578b\u200b\u7528\u4e8e\u200b\u5b58\u653e\u200b\u5bf9\u8c61\u200b\u3002</li> <li>\u200b\u6ce8\u518c\u200b\uff1a\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u6211\u4eec\u200b\u628a\u200b\u6570\u636e\u200b\u5b58\u653e\u200b\u5230\u200b <code>HashMap</code> \u200b\u4e2d\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u73b0\u5728\u200b <code>HashMap</code> \u200b\u5b58\u653e\u200b\u7684\u200b\u662f\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u7684\u200b <code>Bean</code> \u200b\u7684\u200b\u5bf9\u8c61\u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u83b7\u53d6\u200b\uff1a\u200b\u6700\u540e\u200b\u5c31\u662f\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\uff0c<code>Bean</code> \u200b\u7684\u200b\u540d\u5b57\u200b\u5c31\u662f\u200bkey\uff0cSpring \u200b\u5bb9\u5668\u200b\u521d\u59cb\u5316\u200b\u597d\u200b <code>Bean</code> \u200b\u4ee5\u540e\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u83b7\u53d6\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#_3","title":"\u4e09\u200b. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784\u200b\uff1a","text":"Text Only<pre><code>simple-spring-01\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 BeanFactory.java\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u251c\u2500\u2500 ApiTest.java\n            \u2514\u2500\u2500 bean\n                \u2514\u2500\u2500 UserService.java\n</code></pre> <p>Simple-Spring Bean \u200b\u5bb9\u5668\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <p>Spring Bean \u200b\u5bb9\u5668\u200b\u7684\u200b\u6574\u4e2a\u200b\u5b9e\u73b0\u200b\u5185\u5bb9\u200b\u975e\u5e38\u7b80\u5355\u200b\uff0c\u200b\u4e5f\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b <code>BeanFactory</code> \u200b\u548c\u200b <code>BeanDefinition</code>\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b\u7c7b\u200b\u540d\u79f0\u200b\u662f\u200b\u4e0e\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u200b\u4e00\u81f4\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u73b0\u5728\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u4f1a\u200b\u76f8\u5bf9\u6765\u8bf4\u200b\u66f4\u200b\u7b80\u5316\u200b\u4e00\u4e9b\u200b\uff0c\u200b\u5728\u200b\u540e\u7eed\u200b\u7684\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u518d\u200b\u4e0d\u65ad\u200b\u7684\u200b\u6dfb\u52a0\u200b\u5185\u5bb9\u200b\u3002</p> <ul> <li><code>BeanDefinition</code>\uff0c\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4fe1\u606f\u200b\uff0c\u200b\u73b0\u5728\u200b\u7684\u200b\u5b9e\u73b0\u200b\u662f\u200b\u4ee5\u200b\u4e00\u4e2a\u200b Object \u200b\u5b58\u653e\u200b\u5bf9\u8c61\u200b</li> <li><code>BeanFactory</code>\uff0c\u200b\u4ee3\u8868\u200b\u4e86\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5de5\u5382\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b58\u653e\u200b Bean \u200b\u5b9a\u4e49\u200b\u5230\u200b Map \u200b\u4e2d\u200b\u4ee5\u53ca\u200b\u83b7\u53d6\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#2-bean","title":"2. Bean\u200b\u5b9a\u4e49","text":"Java<pre><code>public class BeanDefinition {\n    private Object bean;\n\n    public BeanDefinition(Object bean) {\n        this.bean = bean;\n    }\n\n    public Object getBean() {\n        return bean;\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#3-bean","title":"3. Bean\u200b\u5de5\u5382","text":"Java<pre><code>public class BeanFactory {\n    private Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;();\n\n    public Object getBean(String name) {\n        return beanDefinitionMap.get(name).getBean();\n    }\n\n    public void registerBeanDefinition(String name, BeanDefinition beanDefinition) {\n        beanDefinitionMap.put(name, beanDefinition);\n    }\n}\n</code></pre> <p>\u200b\u5728\u200b Bean \u200b\u5de5\u5382\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b Bean \u200b\u7684\u200b\u6ce8\u518c\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6ce8\u518c\u200b\u7684\u200b\u662f\u200b Bean \u200b\u7684\u200b\u5b9a\u4e49\u200b\u4fe1\u606f\u200b\u3002\u200b\u540c\u65f6\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u7c7b\u4e2d\u200b\u8fd8\u200b\u5305\u62ec\u200b\u4e86\u200b\u83b7\u53d6\u200b Bean \u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#_4","title":"\u56db\u200b. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bBean","text":"Java<pre><code>public class UserService {\n    public void queryUserInfo(){\n        System.out.println(\"\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\");\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#2","title":"2. \u200b\u6d4b\u8bd5\u7528\u4f8b","text":"Java<pre><code>public class ApiTest {\n\n    @Test\n    public void test() {\n        BeanFactory beanFactory = new BeanFactory();\n\n        BeanDefinition beanDefinition = new BeanDefinition(new UserService());\n        beanFactory.registerBeanDefinition(\"userService\", beanDefinition);\n\n        UserService userService = (UserService) beanFactory.getBean(\"userService\");\n        userService.queryUserInfo();\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u5355\u6d4b\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u5305\u62ec\u200b\u521d\u59cb\u5316\u200b Bean \u200b\u5de5\u5382\u200b\u3001\u200b\u6ce8\u518c\u200b Bean\u3001\u200b\u83b7\u53d6\u200b Bean\uff0c\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u4f7f\u7528\u200b\u6548\u679c\u200b\u4e0a\u200b\u8d34\u8fd1\u200b\u4e0e\u200b Spring\uff0c\u200b\u4f46\u200b\u663e\u5f97\u200b\u4f1a\u200b\u66f4\u200b\u7b80\u5316\u200b\u3002</li> <li>\u200b\u5728\u200b Bean \u200b\u7684\u200b\u6ce8\u518c\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u662f\u200b\u76f4\u63a5\u200b\u628a\u200b UserService \u200b\u5b9e\u4f8b\u200b\u5316\u540e\u200b\u4f5c\u4e3a\u200b\u5165\u53c2\u200b\u4f20\u9012\u200b\u7ed9\u200b BeanDefinition \u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u540e\u7eed\u200b\u7684\u200b\u9646\u7eed\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u628a\u200b\u8fd9\u90e8\u5206\u200b\u5185\u5bb9\u200b\u653e\u5165\u200b Bean \u200b\u5de5\u5382\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-01/#_5","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/fiWX6abSCiUKHAUa-HKg4A</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/","title":"\u5b9e\u73b0\u200bBean\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u6ce8\u518c\u200b\u3001\u200b\u83b7\u53d6","text":"<p> \u200b\u7ea6\u200b 1560 \u200b\u4e2a\u200b\u5b57\u200b  95 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 6 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#_1","title":"\u4e00\u200b. \u200b\u76ee\u6807","text":"<p>\u200b\u5728\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b \u300a\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bBean\u200b\u5bb9\u5668\u200b\u300b \u200b\u6211\u4eec\u200b\u521d\u6b65\u200b\u4f9d\u7167\u200b Spring Bean \u200b\u5bb9\u5668\u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7c97\u7cd9\u200b\u7248\u672c\u200b\u7684\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u3002\u200b\u90a3\u4e48\u200b\u672c\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u7ed3\u5408\u200b\u5df2\u200b\u5b9e\u73b0\u200b\u7684\u200b Spring Bean \u200b\u5bb9\u5668\u200b\u8fdb\u884c\u200b\u529f\u80fd\u5b8c\u5584\u200b\uff0c\u200b\u5b9e\u73b0\u200b Bean \u200b\u5bb9\u5668\u200b\u5173\u4e8e\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u6ce8\u518c\u200b\u548c\u200b\u83b7\u53d6\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u4e00\u6b21\u200b\u6211\u4eec\u200b\u628a\u200b Bean \u200b\u7684\u200b\u521b\u5efa\u200b\u4ea4\u7ed9\u200b\u5bb9\u5668\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u6211\u4eec\u200b\u5728\u200b\u8c03\u7528\u200b\u65f6\u5019\u200b\u4f20\u9012\u200b\u4e00\u4e2a\u200b\u5b9e\u4f8b\u200b\u5316\u597d\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u53e6\u5916\u200b\u8fd8\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5728\u200b\u5bf9\u8c61\u200b\u7684\u200b\u4e8c\u6b21\u200b\u83b7\u53d6\u200b\u65f6\u200b\u662f\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u5185\u5b58\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\u7684\u200b\u3002\u200b\u6b64\u5916\u200b\u4e0d\u4ec5\u200b\u8981\u200b\u5b9e\u73b0\u200b\u529f\u80fd\u200b\u8fd8\u200b\u9700\u8981\u200b\u5b8c\u5584\u200b\u57fa\u7840\u200b\u5bb9\u5668\u200b\u6846\u67b6\u200b\u7684\u200b\u7c7b\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u5426\u5219\u200b\u5c06\u6765\u200b\u5c31\u200b\u5f88\u200b\u96be\u200b\u6269\u5bb9\u200b\u8fdb\u53bb\u200b\u5176\u4ed6\u200b\u7684\u200b\u529f\u80fd\u200b\u4e86\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#_2","title":"\u4e8c\u200b. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u9274\u4e8e\u200b\u672c\u200b\u7ae0\u8282\u200b\u7684\u200b\u6848\u4f8b\u200b\u76ee\u6807\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5c06\u200b <code>Spring Bean</code> \u200b\u5bb9\u5668\u200b\u5b8c\u5584\u200b\u8d77\u6765\u200b\uff0c\u200b\u9996\u5148\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u7684\u200b\u4e00\u70b9\u200b\u662f\u200b\u5728\u200b <code>Bean</code> \u200b\u6ce8\u518c\u200b\u7684\u200b\u65f6\u5019\u200b\u53ea\u200b\u6ce8\u518c\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u4fe1\u606f\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u76f4\u63a5\u200b\u628a\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4fe1\u606f\u200b\u6ce8\u518c\u200b\u5230\u200b <code>Spring</code> \u200b\u5bb9\u5668\u200b\u4e2d\u200b\u3002\u200b\u90a3\u4e48\u200b\u5c31\u200b\u9700\u8981\u200b\u4fee\u6539\u200b <code>BeanDefinition</code> \u200b\u4e2d\u200b\u7684\u200b\u5c5e\u6027\u200b <code>Object</code> \u200b\u4e3a\u200b <code>Class</code>\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5728\u200b\u9700\u8981\u200b\u505a\u200b\u7684\u200b\u5c31\u662f\u200b\u5728\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u65f6\u200b\u9700\u8981\u200b\u5904\u7406\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b\u4ee5\u53ca\u200b\u5224\u65ad\u200b\u5f53\u524d\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u5728\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u662f\u5426\u200b\u5df2\u7ecf\u200b\u7f13\u5b58\u200b\u8d77\u6765\u200b\u4e86\u200b.  * \u200b\u9996\u5148\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b <code>BeanFactory</code> \u200b\u8fd9\u6837\u200b\u4e00\u4e2a\u200b <code>Bean</code> \u200b\u5de5\u5382\u200b\uff0c\u200b\u63d0\u4f9b\u200b <code>Bean</code> \u200b\u7684\u200b\u83b7\u53d6\u200b\u65b9\u6cd5\u200b <code>getBean(String name)</code>\uff0c\u200b\u4e4b\u540e\u200b\u8fd9\u4e2a\u200b <code>Bean</code> \u200b\u5de5\u5382\u200b\u63a5\u53e3\u200b\u7531\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u5b9e\u73b0\u200b\u3002\u200b\u8fd9\u6837\u200b\u4f7f\u7528\u200b\u6a21\u677f\u200b\u6a21\u5f0f\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7edf\u4e00\u200b\u6536\u53e3\u200b\u901a\u7528\u200b\u6838\u5fc3\u200b\u65b9\u6cd5\u200b\u7684\u200b\u8c03\u7528\u200b\u903b\u8f91\u200b\u548c\u200b\u6807\u51c6\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u63a7\u5236\u200b\u4e86\u200b\u540e\u7eed\u200b\u7684\u200b\u5b9e\u73b0\u200b\u8005\u200b\u4e0d\u7528\u200b\u5173\u5fc3\u200b\u8c03\u7528\u200b\u903b\u8f91\u200b\uff0c\u200b\u6309\u7167\u200b\u7edf\u4e00\u200b\u65b9\u5f0f\u200b\u6267\u884c\u200b\u3002\u200b\u90a3\u4e48\u200b\u7c7b\u200b\u7684\u200b\u7ee7\u627f\u8005\u200b\u53ea\u200b\u9700\u8981\u200b\u5173\u5fc3\u200b\u5177\u4f53\u65b9\u6cd5\u200b\u7684\u200b\u903b\u8f91\u200b\u5b9e\u73b0\u200b\u5373\u53ef\u200b\u3002 * \u200b\u90a3\u4e48\u200b\u5728\u200b\u7ee7\u627f\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u540e\u200b\u7684\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u76f8\u5e94\u200b\u7684\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\u4e86\u200b\uff0c\u200b\u56e0\u4e3a\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u672c\u8eab\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u7c7b\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5b83\u200b\u53ea\u4f1a\u200b\u5b9e\u73b0\u200b\u5c5e\u4e8e\u200b\u81ea\u5df1\u200b\u7684\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5176\u4ed6\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\u7531\u200b\u7ee7\u627f\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u3002\u200b\u8fd9\u91cc\u200b\u5c31\u200b\u4f53\u73b0\u200b\u4e86\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u5404\u53f8\u5176\u804c\u200b\uff0c\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u5173\u5fc3\u200b\u5c5e\u4e8e\u200b\u4f60\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4e0d\u662f\u200b\u4f60\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4e0d\u8981\u200b\u53c2\u4e0e\u200b. * \u200b\u53e6\u5916\u200b\u8fd9\u91cc\u200b\u8fd8\u6709\u200b\u5757\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u7684\u200b\u77e5\u8bc6\u70b9\u200b\uff0c\u200b\u5c31\u662f\u200b\u5173\u4e8e\u200b\u5355\u4f8b\u200b <code>SingletonBeanRegistry</code> \u200b\u7684\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u800c\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u5bf9\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u88ab\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u7ee7\u627f\u200b\u3002\u200b\u73b0\u5728\u200b <code>AbstractBeanFactory</code> \u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u5b8c\u6574\u200b\u4e14\u200b\u5f3a\u5927\u200b\u7684\u200b\u62bd\u8c61\u7c7b\u200b\u4e86\u200b\uff0c\u200b\u4e5f\u200b\u80fd\u200b\u975e\u5e38\u200b\u597d\u200b\u7684\u200b\u4f53\u73b0\u200b\u51fa\u200b\u5b83\u200b\u5bf9\u200b\u6a21\u677f\u200b\u6a21\u5f0f\u200b\u7684\u200b\u62bd\u8c61\u200b\u5b9a\u4e49\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\u6211\u4eec\u200b\u5c31\u200b\u5e26\u200b\u7740\u200b\u8fd9\u4e9b\u200b\u8bbe\u8ba1\u200b\u5c42\u9762\u200b\u7684\u200b\u601d\u8003\u200b\uff0c\u200b\u53bb\u200b\u770b\u200b\u4ee3\u7801\u200b\u7684\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u7ed3\u679c\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#_3","title":"\u4e09\u200b. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-02\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0                     \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u2514\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u251c\u2500\u2500 ApiTest.java\n            \u2514\u2500\u2500 bean\n                \u2514\u2500\u2500 UserService.java\n</code></pre> <ul> <li><code>BeanFactory</code> \u200b\u7684\u200b\u5b9a\u4e49\u200b\u7531\u200b <code>AbstractBeanFactory</code> \u200b\u62bd\u8c61\u7c7b\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u7684\u200b <code>getBean</code> \u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u800c\u200b <code>AbstractBeanFactory</code> \u200b\u53c8\u200b\u7ee7\u627f\u200b\u4e86\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>SingletonBeanRegistry</code> \u200b\u7684\u200b<code>DefaultSingletonBeanRegistry</code> \u200b\u7c7b\u200b\u3002\u200b\u8fd9\u6837\u200b <code>AbstractBeanFactory</code> \u200b\u62bd\u8c61\u7c7b\u200b\u5c31\u200b\u5177\u5907\u200b\u4e86\u200b\u5355\u4f8b\u200b <code>Bean</code> \u200b\u7684\u200b\u6ce8\u518c\u200b\u529f\u80fd\u200b\u3002</li> <li><code>AbstractBeanFactory</code> \u200b\u4e2d\u200b\u53c8\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\uff1a<code>getBeanDefinition(String beanName)</code>\u3001<code>createBean(String beanName, BeanDefinition beanDefinition)</code> \uff0c\u200b\u800c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\u5206\u522b\u200b\u7531\u200b <code>DefaultListableBeanFactory</code>\u3001<code>AbstractAutowireCapableBeanFactory</code> \u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u6700\u7ec8\u200b <code>DefaultListableBeanFactory</code> \u200b\u8fd8\u4f1a\u200b\u7ee7\u627f\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u4e5f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u62bd\u8c61\u7c7b\u200b\u4e2d\u200b\u7684\u200b createBean \u200b\u65b9\u6cd5\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#2-beandefinition","title":"2. BeanDefinition \u200b\u5b9a\u4e49","text":"Java<pre><code>public class BeanDefinition {\n    private Object bean;\n\n    public BeanDefinition(Object bean) {\n        this.bean = bean;\n    }\n\n    public Object getBean() {\n        return bean;\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b Bean \u200b\u5b9a\u4e49\u200b\u7c7b\u4e2d\u200b\u5df2\u7ecf\u200b\u628a\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u4e2d\u200b\u7684\u200b Object bean \u200b\u66ff\u6362\u200b\u4e3a\u200b Class\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u628a\u200b Bean \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b\u653e\u5230\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u5904\u7406\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#3","title":"3. \u200b\u5355\u4f8b\u200b\u6ce8\u518c\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u548c\u200b\u5b9e\u73b0","text":"Java<pre><code>public interface SingletonBeanRegistry {\n    Object getSingleton(String beanName);\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u6bd4\u8f83\u7b80\u5355\u200b\u4e3b\u8981\u200b\u662f\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u83b7\u53d6\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002</li> </ul> <p>Java<pre><code>public class DefaultSingletonBeanRegistry implements SingletonBeanRegistry {\n    private Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;();\n\n    @Override\n    public Object getSingleton(String beanName) {\n        return singletonObjects.get(beanName);\n    }\n\n    public void addSingleton(String beanName, Object singletonObject) {\n        singletonObjects.put(beanName, singletonObject);\n    }\n}\n</code></pre> * \u200b\u5728\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u4e2d\u200b\u4e3b\u8981\u200b\u5b9e\u73b0\u200b <code>getSingleton</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u540c\u65f6\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b <code>addSingleton</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u7ee7\u627f\u200b\u6b64\u7c7b\u200b\u7684\u200b\u5176\u4ed6\u200b\u7c7b\u200b\u8c03\u7528\u200b\u3002\u200b\u5305\u62ec\u200b\uff1a<code>AbstractBeanFactory</code> \u200b\u4ee5\u53ca\u200b\u7ee7\u627f\u200b\u7684\u200b <code>DefaultListableBeanFactory</code> \u200b\u8c03\u7528\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#4-abstractbeanfactory","title":"4. \u200b\u62bd\u8c61\u7c7b\u200b\u5b9a\u4e49\u200b\u6a21\u677f\u200b\u65b9\u6cd5\u200b(AbstractBeanFactory)","text":"Java<pre><code>public abstract class AbstractBeanFactory extends DefaultSingletonBeanRegistry implements BeanFactory {\n\n    @Override\n    public Object getBean(String beanName) throws BeansException {\n        Object bean = getSingleton(beanName);\n        if (Objects.nonNull(bean)) {\n            return bean;\n        }\n\n        BeanDefinition beanDefinition = getBeanDefinition(beanName);\n        return createBean(beanName, beanDefinition);\n    }\n\n    protected abstract BeanDefinition getBeanDefinition(String beanName) throws BeansException;\n\n    protected abstract Object createBean(String beanName, BeanDefinition beanDefinition) throws BeansException;\n}\n</code></pre> <ul> <li><code>AbstractBeanFactory</code> \u200b\u9996\u5148\u200b\u7ee7\u627f\u200b\u4e86\u200b <code>DefaultSingletonBeanRegistry</code>\uff0c\u200b\u4e5f\u200b\u5c31\u200b\u5177\u5907\u200b\u4e86\u200b\u4f7f\u7528\u200b\u5355\u4f8b\u200b\u6ce8\u518c\u200b\u7c7b\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u5f88\u200b\u91cd\u8981\u200b\u7684\u200b\u4e00\u70b9\u200b\u662f\u200b\u5173\u4e8e\u200b\u63a5\u53e3\u200b <code>BeanFactory</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5728\u200b\u65b9\u6cd5\u200b <code>getBean</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u200b\u5355\u4f8b\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u83b7\u53d6\u200b\u4ee5\u53ca\u200b\u5728\u200b\u83b7\u53d6\u200b\u4e0d\u5230\u200b\u65f6\u200b\u9700\u8981\u200b\u62ff\u5230\u200b <code>Bean</code> \u200b\u7684\u200b\u5b9a\u4e49\u200b\u505a\u200b\u76f8\u5e94\u200b <code>Bean</code> \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b\u3002\u200b\u90a3\u4e48\u200b <code>getBean</code> \u200b\u5e76\u200b\u6ca1\u6709\u200b\u81ea\u8eab\u200b\u7684\u200b\u53bb\u200b\u5b9e\u73b0\u200b\u8fd9\u4e9b\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u800c\u662f\u200b\u53ea\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8c03\u7528\u200b\u8fc7\u7a0b\u200b\u4ee5\u53ca\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7531\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u62bd\u8c61\u7c7b\u200b\u7684\u200b\u5176\u4ed6\u200b\u7c7b\u200b\u505a\u200b\u76f8\u5e94\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u540e\u7eed\u200b\u7ee7\u627f\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u7684\u200b\u7c7b\u200b\u6709\u200b\u4e24\u4e2a\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a<code>AbstractAutowireCapableBeanFactory</code>\u3001<code>DefaultListableBeanFactory</code>\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u7c7b\u200b\u5206\u522b\u200b\u505a\u200b\u4e86\u200b\u76f8\u5e94\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5904\u7406\u200b\uff0c\u200b\u63a5\u7740\u200b\u5f80\u4e0b\u200b\u770b\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#5-beanabstractautowirecapablebeanfactory","title":"5. \u200b\u5b9e\u4f8b\u200b\u5316\u200bBean\u200b\u7c7b\u200b(AbstractAutowireCapableBeanFactory)","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory{\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition) throws BeansException {\n        Object bean;\n        try {\n            bean = beanDefinition.getBeanClass().newInstance();\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new BeansException(\"Instantiation of bean failed\");\n        }\n        addSingleton(beanName, bean);\n        return bean;\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7c7b\u4e2d\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>Bean</code> \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b <code>newInstance</code>.</li> <li>\u200b\u5728\u200b\u5904\u7406\u200b\u5b8c\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u540e\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b <code>addSingleton</code> \u200b\u65b9\u6cd5\u200b\u5b58\u653e\u200b\u5230\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u53bb\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#6-defaultsingletonbeanregistry","title":"6. \u200b\u6838\u5fc3\u200b\u7c7b\u200b\u5b9e\u73b0\u200b(DefaultSingletonBeanRegistry)","text":"Java<pre><code>public class DefaultListableBeanFactory extends AbstractAutowireCapableBeanFactory implements BeanDefinitionRegistry {\n    private Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;();\n\n    @Override\n    protected BeanDefinition getBeanDefinition(String beanName) throws BeansException {\n        BeanDefinition beanDefinition = beanDefinitionMap.get(beanName);\n        if (beanDefinition == null) throw new BeansException(\"No bean named '\" + beanName + \"' is defined\");\n        return beanDefinition;\n    }\n\n    @Override\n    public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) {\n        beanDefinitionMap.put(beanName, beanDefinition);\n    }\n}\n</code></pre> <ul> <li><code>DefaultListableBeanFactory</code> \u200b\u5728\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u6838\u5fc3\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u5728\u200b\u6211\u4eec\u200b\u76ee\u524d\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u4e5f\u200b\u662f\u200b\u9010\u6b65\u200b\u8d34\u8fd1\u200b\u4e8e\u200b\u6e90\u7801\u200b\uff0c\u200b\u4e0e\u200b\u6e90\u7801\u200b\u7c7b\u540d\u200b\u4fdd\u6301\u4e00\u81f4\u200b\u3002</li> <li><code>DefaultListableBeanFactory</code> \u200b\u7ee7\u627f\u200b\u4e86\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7c7b\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u200b\u5177\u5907\u200b\u4e86\u200b\u63a5\u53e3\u200b <code>BeanFactory</code> \u200b\u548c\u200b <code>AbstractBeanFactory</code> \u200b\u7b49\u200b\u4e00\u8fde\u4e32\u200b\u7684\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u3002\u200b\u6240\u4ee5\u200b\u6709\u65f6\u5019\u200b\u4f60\u200b\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e9b\u200b\u7c7b\u200b\u7684\u200b\u5f3a\u8f6c\u200b\uff0c\u200b\u8c03\u7528\u200b\u67d0\u4e9b\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4e5f\u200b\u662f\u56e0\u4e3a\u200b\u4f60\u200b\u5f3a\u8f6c\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u6216\u200b\u7ee7\u627f\u200b\u4e86\u200b\u67d0\u4e9b\u200b\u7c7b\u200b\u3002</li> <li>\u200b\u9664\u6b64\u4e4b\u5916\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u8fd8\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u63a5\u53e3\u200b <code>BeanDefinitionRegistry</code> \u200b\u4e2d\u200b\u7684\u200b <code>registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5f53\u7136\u200b\u4f60\u200b\u8fd8\u200b\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b <code>getBeanDefinition</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u6211\u4eec\u200b\u6587\u4e2d\u200b\u63d0\u5230\u200b\u8fc7\u200b\u5b83\u200b\u662f\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\u3002\u200b\u73b0\u5728\u200b\u6ce8\u518c\u200bBean\u200b\u5b9a\u4e49\u200b\u4e0e\u200b\u83b7\u53d6\u200bBean\u200b\u5b9a\u4e49\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b\u4e86\u200b\uff0c\u200b\u662f\u200b\u4e0d\u200b\u611f\u89c9\u200b\u8fd9\u4e2a\u200b\u5957\u8def\u200b\u8fd8\u200b\u86ee\u200b\u6df1\u200b\u7684\u200b\u3002\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u4e86\u200b\u6ce8\u518c\u200b\uff0c\u200b\u62bd\u8c61\u7c7b\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u83b7\u53d6\u200b\uff0c\u200b\u90fd\u200b\u96c6\u4e2d\u200b\u5728\u200b <code>DefaultListableBeanFactory</code> \u200b\u4e2d\u200b\u7684\u200b <code>beanDefinitionMap</code> \u200b\u91cc\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#_4","title":"\u56db\u200b. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bBean","text":"Java<pre><code>public class UserService {\n    public void queryUserInfo(){\n        System.out.println(\"\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\");\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#2","title":"2. \u200b\u6d4b\u8bd5\u7528\u4f8b","text":"Java<pre><code>public class ApiTest {\n    @Test\n    public void test_BeanFactory(){\n        // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\n        // 2.\u200b\u6ce8\u518c\u200b bean\n        BeanDefinition beanDefinition = new BeanDefinition(UserService.class);\n        beanFactory.registerBeanDefinition(\"userService\", beanDefinition);\n\n        // 3.\u200b\u7b2c\u4e00\u6b21\u200b\u83b7\u53d6\u200b bean\n        UserService userService = (UserService) beanFactory.getBean(\"userService\");\n        userService.queryUserInfo();\n\n        // 4.\u200b\u7b2c\u4e8c\u6b21\u200b\u83b7\u53d6\u200b bean from Singleton\n        UserService userService_singleton = (UserService) beanFactory.getSingleton(\"userService\");\n        userService_singleton.queryUserInfo();\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u6b64\u6b21\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u4e2d\u200b\u9664\u4e86\u200b\u5305\u62ec\u200b\uff1bBean \u200b\u5de5\u5382\u200b\u3001\u200b\u6ce8\u518c\u200b Bean\u3001\u200b\u83b7\u53d6\u200b Bean\uff0c\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u8fd8\u200b\u989d\u5916\u200b\u589e\u52a0\u200b\u4e86\u200b\u4e00\u6b21\u200b\u5bf9\u8c61\u200b\u7684\u200b\u83b7\u53d6\u200b\u548c\u200b\u8c03\u7528\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u6d4b\u8bd5\u200b\u9a8c\u8bc1\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u662f\u5426\u200b\u6b63\u786e\u200b\u7684\u200b\u5b58\u653e\u200b\u5230\u200b\u4e86\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u6b64\u5916\u200b\u4e0e\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4e0d\u540c\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u628a\u200b UserService.class \u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e86\u200b BeanDefinition \u200b\u800c\u200b\u4e0d\u662f\u200b\u50cf\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u90a3\u6837\u200b\u76f4\u63a5\u200b new UserService() \u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-02/#_5","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/CgvQzm8B-CvQvXdxONC-lA</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/","title":"\u57fa\u4e8e\u200bCglib\u200b\u5b9e\u73b0\u200b\u542b\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565","text":"<p> \u200b\u7ea6\u200b 1127 \u200b\u4e2a\u200b\u5b57\u200b  110 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 5 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5728\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u6269\u5145\u200b\u4e86\u200b <code>Bean</code> \u200b\u5bb9\u5668\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u628a\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5bf9\u8c61\u200b\u4ea4\u7ed9\u200b\u5bb9\u5668\u200b\u6765\u200b\u7edf\u4e00\u200b\u5904\u7406\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u6211\u4eec\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5bf9\u8c61\u200b\u7684\u200b\u4ee3\u7801\u200b\u91cc\u200b\u5e76\u200b\u6ca1\u6709\u200b\u8003\u8651\u200b\u5bf9\u8c61\u200b\u7c7b\u200b\u662f\u5426\u200b\u542b\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u53bb\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5bf9\u8c61\u200b\u90a3\u4e48\u200b\u5c31\u8981\u200b\u629b\u200b\u5f02\u5e38\u200b\u4e86\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\u672c\u7ae0\u200b\u7684\u200b\u76ee\u6807\u200b\u5c31\u662f\u200b\u5c06\u200b\u8fd9\u4e2a\u200b\u5751\u200b\u586b\u5e73\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u586b\u5e73\u200b\u8fd9\u4e2a\u200b\u5751\u200b\u7684\u200b\u6280\u672f\u200b\u8bbe\u8ba1\u200b\u4e3b\u8981\u200b\u8003\u8651\u200b\u4e24\u200b\u90e8\u5206\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u4e32\u200b\u6d41\u7a0b\u200b\u4ece\u200b\u54ea\u200b\u5408\u7406\u200b\u7684\u200b\u628a\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\u4f20\u9012\u200b\u5230\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b\u91cc\u200b\uff0c\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u662f\u200b\u600e\u4e48\u200b\u53bb\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u542b\u6709\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002 </p> <ul> <li>\u200b\u53c2\u8003\u200b Spring Bean \u200b\u5bb9\u5668\u200b\u6e90\u7801\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5728\u200b <code>BeanFactory</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>Object getBean(String name, Object... args)</code> \u200b\u63a5\u53e3\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u65f6\u200b\u628a\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\u4f20\u9012\u200b\u8fdb\u53bb\u200b\u4e86\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u7684\u200b\u5185\u5bb9\u200b\u662f\u200b\u4f7f\u7528\u200b\u4ec0\u4e48\u200b\u65b9\u5f0f\u200b\u6765\u200b\u521b\u5efa\u200b\u542b\u6709\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u5462\u200b\uff1f\u200b\u8fd9\u91cc\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u57fa\u4e8e\u200b Java \u200b\u672c\u8eab\u200b\u81ea\u5e26\u200b\u7684\u200b\u65b9\u6cd5\u200b <code>DeclaredConstructor</code>\uff0c\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u662f\u200b\u4f7f\u7528\u200b Cglib \u200b\u6765\u200b\u52a8\u6001\u521b\u5efa\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u3002Cglib \u200b\u662f\u200b\u57fa\u4e8e\u200b\u5b57\u8282\u200b\u7801\u200b\u6846\u67b6\u200b ASM \u200b\u5b9e\u73b0\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u901a\u8fc7\u200b ASM \u200b\u64cd\u4f5c\u200b\u6307\u4ee4\u7801\u200b\u6765\u200b\u521b\u5efa\u5bf9\u8c61\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-03\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0                     \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0                         \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u251c\u2500\u2500 ApiTest.java\n            \u2514\u2500\u2500 bean\n                \u2514\u2500\u2500 UserService.java\n</code></pre> <p>Spring \u200b\u5bb9\u5668\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <p></p> <p>\u200b\u672c\u200b\u7ae0\u8282\u200b \u201c\u200b\u586b\u5751\u200b\u201d \u200b\u4e3b\u8981\u200b\u662f\u200b\u5728\u200b\u73b0\u6709\u200b\u5de5\u7a0b\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>InstantiationStrategy</code> \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565\u200b\u63a5\u53e3\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u8865\u5145\u200b\u76f8\u5e94\u200b\u7684\u200b <code>getBean</code> \u200b\u5165\u53c2\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8ba9\u200b\u5916\u90e8\u200b\u8c03\u7528\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u5e76\u200b\u987a\u5229\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#2-getbean","title":"2. \u200b\u65b0\u589e\u200bgetBean\u200b\u63a5\u53e3","text":"Java<pre><code>public interface BeanFactory {\n    Object getBean(String beanName) throws BeansException;\n\n    Object getBean(String beanName, Object... args) throws BeansException;\n}\n</code></pre> <ul> <li><code>BeanFactory</code> \u200b\u4e2d\u200b\u6211\u4eec\u200b\u91cd\u8f7d\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b\u5165\u53c2\u200b\u4fe1\u606f\u200b args \u200b\u7684\u200b <code>getBean</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u65b9\u4fbf\u200b\u7684\u200b\u4f20\u9012\u200b\u5165\u200b\u53c2\u7ed9\u200b\u6784\u9020\u51fd\u6570\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#3_1","title":"3. \u200b\u5b9a\u4e49\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565\u200b\u63a5\u53e3","text":"Java<pre><code>public interface InstantiationStrategy {\n    Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args);\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u63a5\u53e3\u200b instantiate \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u5fc5\u8981\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a<code>beanDefinition</code>\u3001 <code>beanName</code>\u3001<code>ctor</code>\u3001<code>args</code></li> <li>\u200b\u5176\u4e2d\u200b <code>Constructor</code> \u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u4e00\u70b9\u200b\u964c\u751f\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b <code>java.lang.reflect</code> \u200b\u5305\u4e0b\u200b\u7684\u200b <code>Constructor</code> \u200b\u7c7b\u200b\uff0c\u200b\u91cc\u9762\u200b\u5305\u542b\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u5fc5\u8981\u200b\u7684\u200b\u7c7b\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6709\u200b\u8fd9\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u76ee\u7684\u200b\u5c31\u662f\u200b\u4e3a\u4e86\u200b\u62ff\u5230\u200b\u7b26\u5408\u200b\u5165\u53c2\u200b\u4fe1\u606f\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u3002</li> <li>\u200b\u800c\u200b <code>args</code> \u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5177\u4f53\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\u4e86\u200b\uff0c\u200b\u6700\u7ec8\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u65f6\u5019\u200b\u4f1a\u200b\u7528\u5230\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#4-jdk","title":"4. JDK\u200b\u5b9e\u4f8b\u200b\u5316","text":"Java<pre><code>public class SimpleInstantiationStrategy implements InstantiationStrategy {\n    @Override\n    public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) {\n        Class clazz = beanDefinition.getBeanClass();\n        try {\n            if (Objects.nonNull(ctor)) {\n                return clazz.getDeclaredConstructor(ctor.getParameterTypes()).newInstance(args);\n            } else {\n                return clazz.getDeclaredConstructor().newInstance();\n            }\n        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n</code></pre> <ul> <li>\u200b\u9996\u5148\u200b\u901a\u8fc7\u200b <code>beanDefinition</code> \u200b\u83b7\u53d6\u200b <code>Class</code> \u200b\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u4e2a\u200b <code>Class</code> \u200b\u4fe1\u606f\u200b\u662f\u200b\u5728\u200b <code>Bean</code> \u200b\u5b9a\u4e49\u200b\u7684\u200b\u65f6\u5019\u200b\u4f20\u9012\u200b\u8fdb\u53bb\u200b\u7684\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u5224\u65ad\u200b <code>ctor</code> \u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u5982\u679c\u200b\u4e3a\u200b\u7a7a\u5219\u200b\u662f\u200b\u65e0\u200b\u6784\u9020\u51fd\u6570\u200b\u5b9e\u4f8b\u200b\u5316\u200b\uff0c\u200b\u5426\u5219\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u6709\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u3002</li> <li>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b\u6709\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\uff0c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u65b9\u5f0f\u200b\u4e3a\u200b <code>clazz.getDeclaredConstructor(ctor.getParameterTypes()).newInstance(args);</code>\uff0c\u200b\u628a\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>newInstance</code> \u200b\u8fdb\u884c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#5-cglib","title":"5. Cglib\u200b\u5b9e\u4f8b\u200b\u5316","text":"Java<pre><code>public class CglibSubclassingInstantiationStrategy implements InstantiationStrategy {\n    @Override\n    public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(beanDefinition.getBeanClass());\n        enhancer.setCallback(new NoOp() {\n            @Override\n            public int hashCode() {\n                return super.hashCode();\n            }\n        });\n        if (Objects.isNull(ctor)) return enhancer.create();\n        return enhancer.create(ctor.getParameterTypes(), args);\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#6","title":"6. \u200b\u521b\u5efa\u200b\u7b56\u7565\u200b\u8c03\u7528","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory{\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean;\n        try {\n            bean = createBeanInstance(beanDefinition, beanName, args);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n    protected Object createBeanInstance(BeanDefinition beanDefinition, String beanName, Object[] args) {\n        Constructor constructorToUse = null;\n        Class beanClass = beanDefinition.getBeanClass();\n        Constructor[] declaredConstructors = beanClass.getDeclaredConstructors();\n        for (Constructor ctor : declaredConstructors) {\n            if (Objects.nonNull(args) &amp;&amp; ctor.getParameterTypes().length == args.length) {\n                constructorToUse = ctor;\n                break;\n            }\n        }\n        return getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);\n    }\n\n    public InstantiationStrategy getInstantiationStrategy() {\n        return instantiationStrategy;\n    }\n\n    public void setInstantiationStrategy(InstantiationStrategy instantiationStrategy) {\n        this.instantiationStrategy = instantiationStrategy;\n    }\n}\n</code></pre> <ul> <li>\u200b\u9996\u5148\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u62bd\u8c61\u7c7b\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u521b\u5efa\u5bf9\u8c61\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565\u200b\u5c5e\u6027\u200b\u7c7b\u200b <code>InstantiationStrategy instantiationStrategy</code>\uff0c\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u9009\u62e9\u200b\u4e86\u200b Cglib \u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u62bd\u53d6\u200b <code>createBeanInstance</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b Constructor \u200b\u4ee3\u8868\u200b\u4e86\u200b\u4f60\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200b <code>beanClass.getDeclaredConstructors()</code> \u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u83b7\u53d6\u200b\u5230\u200b\u4f60\u200b\u6240\u6709\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u96c6\u5408\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u200b\u9700\u8981\u200b\u5faa\u73af\u200b\u6bd4\u200b\u5bf9\u200b\u51fa\u200b\u6784\u9020\u51fd\u6570\u200b\u96c6\u5408\u200b\u4e0e\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b args \u200b\u7684\u200b\u5339\u914d\u200b\u60c5\u51b5\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u5bf9\u6bd4\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6bd4\u8f83\u7b80\u5355\u200b\uff0c\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u6570\u91cf\u200b\u5bf9\u6bd4\u200b\uff0c\u200b\u800c\u200b\u5b9e\u9645\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u200b\u8fd8\u200b\u9700\u8981\u200b\u6bd4\u5bf9\u5165\u200b\u53c2\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5426\u5219\u200b\u76f8\u540c\u200b\u6570\u91cf\u200b\u4e0d\u540c\u200b\u5165\u53c2\u200b\u7c7b\u578b\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u629b\u200b\u5f02\u5e38\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bbean","text":"Java<pre><code>public class UserService {\n\n    private String name;\n\n    public UserService() {\n    }\n\n    public UserService(String name) {\n        this.name = name;\n    }\n\n    public void queryUserInfo() {\n        System.out.println(\"\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\uff1a\" + name);\n    }\n\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(\"\");\n        sb.append(\"\").append(name);\n        return sb.toString();\n    }\n}\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u552f\u4e00\u200b\u591a\u200b\u5728\u200b <code>UserService</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u7684\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u6709\u200b name \u200b\u5165\u53c2\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u6211\u4eec\u200b\u9a8c\u8bc1\u200b\u8fd9\u6837\u200b\u7684\u200b\u5bf9\u8c61\u200b\u662f\u5426\u200b\u80fd\u200b\u88ab\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#2_1","title":"2. \u200b\u6d4b\u8bd5\u7528\u4f8b","text":"Java<pre><code>@Test\npublic void test_BeanFactory() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\n    // 3. \u200b\u6ce8\u5165\u200bbean\n    BeanDefinition beanDefinition = new BeanDefinition(UserService.class);\n    beanFactory.registerBeanDefinition(\"userService\", beanDefinition);\n\n    // 4.\u200b\u83b7\u53d6\u200bbean\n    UserService userService = (UserService) beanFactory.getBean(\"userService\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    userService.queryUserInfo();\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u6b64\u6b21\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u4e2d\u200b\u9664\u4e86\u200b\u5305\u62ec\u200b\uff1bBean \u200b\u5de5\u5382\u200b\u3001\u200b\u6ce8\u518c\u200b Bean\u3001\u200b\u83b7\u53d6\u200b Bean\uff0c\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u8fd8\u200b\u989d\u5916\u200b\u589e\u52a0\u200b\u4e86\u200b\u4e00\u6b21\u200b\u5bf9\u8c61\u200b\u7684\u200b\u83b7\u53d6\u200b\u548c\u200b\u8c03\u7528\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u6d4b\u8bd5\u200b\u9a8c\u8bc1\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u662f\u5426\u200b\u6b63\u786e\u200b\u7684\u200b\u5b58\u653e\u200b\u5230\u200b\u4e86\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u6b64\u5916\u200b\u4e0e\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4e0d\u540c\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u628a\u200b <code>UserService.class</code> \u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e86\u200b <code>BeanDefinition</code> \u200b\u800c\u200b\u4e0d\u662f\u200b\u50cf\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u90a3\u6837\u200b\u76f4\u63a5\u200b <code>new UserService()</code> \u200b\u64cd\u4f5c\u200b\u3002</li> </ul> <p>\u200b\u542f\u52a8\u200b\u65f6\u200b\u9700\u8981\u200b\u6dfb\u52a0\u200bVM\u200b\u53c2\u6570\u200b (\u200b\u8c8c\u4f3c\u200b\u662f\u56e0\u4e3a\u200bCglib\u200b\u4e0e\u200b\u9ad8\u200b\u7248\u672c\u200bjava\u200b\u4e0d\u200b\u517c\u5bb9\u200b) \u200b\u6216\u8005\u200b\u9009\u62e9\u200b\u4f4e\u7248\u672c\u200bjava Bash<pre><code>--add-opens java.base/java.lang=ALL-UNNAMED\n</code></pre></p> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b</p> Text Only<pre><code>\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b\n\nProcess finished with exit code 0\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-03/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/olrwapkSTQMyIGpR10ZDzA</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/","title":"\u4e3a\u200bBean\u200b\u5bf9\u8c61\u200b\u6ce8\u5165\u200b\u5c5e\u6027\u200b\u548c\u200b\u4f9d\u8d56\u200bBean\u200b\u7684\u200b\u529f\u80fd\u200b\u5b9e\u73b0","text":"<p> \u200b\u7ea6\u200b 887 \u200b\u4e2a\u200b\u5b57\u200b  155 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 5 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u9996\u5148\u200b\u6211\u4eec\u200b\u56de\u987e\u200b\u4e0b\u200b\u8fd9\u200b\u51e0\u200b\u7ae0\u8282\u200b\u90fd\u200b\u5b8c\u6210\u200b\u4e86\u200b\u4ec0\u4e48\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u5bb9\u5668\u200b\u3001\u200b\u5b9a\u4e49\u200b\u548c\u200b\u6ce8\u518c\u200bBean\u3001\u200b\u5b9e\u4f8b\u200b\u5316\u200bBean\uff0c\u200b\u6309\u7167\u200b\u662f\u5426\u200b\u5305\u542b\u200b\u6784\u9020\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u521b\u5efa\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8fd9\u200b\u6211\u4eec\u200b\u8fd8\u200b\u7f3a\u5c11\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u5176\u5b9e\u200b\u8fd8\u200b\u7f3a\u5c11\u200b\u4e00\u4e2a\u200b\u5173\u4e8e\u200b\u7c7b\u4e2d\u200b\u662f\u5426\u200b\u6709\u200b\u5c5e\u6027\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u7c7b\u200b\u4e2d\u200b\u5305\u542b\u200b\u5c5e\u6027\u200b\u90a3\u4e48\u200b\u5728\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u65f6\u5019\u200b\u5c31\u200b\u9700\u8981\u200b\u628a\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u586b\u5145\u200b\u4e0a\u200b\uff0c\u200b\u8fd9\u6837\u200b\u624d\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u5c5e\u6027\u200b\u7684\u200b\u586b\u5145\u200b\u4e0d\u200b\u53ea\u662f\u200b int\u3001Long\u3001String\uff0c\u200b\u8fd8\u200b\u5305\u62ec\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u5bf9\u8c61\u200b\u5c5e\u6027\u200b\uff0c\u200b\u90fd\u200b\u9700\u8981\u200b\u5728\u200b Bean \u200b\u521b\u5efa\u200b\u65f6\u200b\u8fdb\u884c\u200b\u586b\u5145\u200b\u64cd\u4f5c\u200b\u3002\u200b\u4e0d\u8fc7\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u6682\u65f6\u200b\u4e0d\u4f1a\u200b\u8003\u8651\u200b Bean \u200b\u7684\u200b\u5faa\u73af\u200b\u4f9d\u8d56\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u628a\u200b\u6574\u4e2a\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u6491\u5927\u200b\uff0c\u200b\u5f85\u200b\u540e\u7eed\u200b\u9646\u7eed\u200b\u5148\u200b\u628a\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u518d\u200b\u9010\u6b65\u5b8c\u5584\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u9274\u4e8e\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u662f\u200b\u5728\u200b <code>Bean</code> \u200b\u4f7f\u7528\u200b <code>newInstance</code> \u200b\u6216\u8005\u200b <code>Cglib</code> \u200b\u521b\u5efa\u200b\u540e\u200b\uff0c\u200b\u5f00\u59cb\u200b\u8865\u5168\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7c7b\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7684\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u8865\u5168\u200b\u5c5e\u6027\u200b\u65b9\u6cd5\u200b\u3002</p> <p></p> <ul> <li>\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u8981\u200b\u5728\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u521b\u5efa\u200b\u4e4b\u540e\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7684\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>applyPropertyValues</code> \u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b\u521b\u5efa\u200b<code>Bean</code>\u200b\u65f6\u5019\u200b\u586b\u5145\u200b\u5c5e\u6027\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u9700\u8981\u200b\u5728\u200b <code>bean</code> \u200b\u5b9a\u4e49\u200b <code>BeanDefinition</code> \u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b <code>PropertyValues</code> \u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u662f\u200b\u586b\u5145\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u8fd8\u200b\u5305\u62ec\u200b\u4e86\u200b <code>Bean</code> \u200b\u7684\u200b\u5bf9\u8c61\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u518d\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b <code>BeanReference</code>\uff0c\u200b\u91cc\u9762\u200b\u5176\u5b9e\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b <code>Bean</code> \u200b\u540d\u79f0\u200b\uff0c\u200b\u5728\u200b\u5177\u4f53\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u64cd\u4f5c\u200b\u65f6\u200b\u8fdb\u884c\u200b\u9012\u5f52\u200b\u521b\u5efa\u200b\u548c\u200b\u586b\u5145\u200b\uff0c\u200b\u4e0e\u200b <code>Spring</code> \u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200b\u4e00\u6837\u200b\u3002<code>Spring</code> \u200b\u6e90\u7801\u200b\u4e2d\u200b <code>BeanReference</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-04\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0                     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0                     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0                     \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0                         \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0                         \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u251c\u2500\u2500 ApiTest.java\n            \u2514\u2500\u2500 bean\n                \u251c\u2500\u2500 UserDao.java\n                \u2514\u2500\u2500 UserService.java\n</code></pre> <ul> <li>\u200b\u672c\u200b\u7ae0\u8282\u200b\u4e2d\u200b\u9700\u8981\u200b\u65b0\u200b\u589e\u52a0\u200b3\u200b\u4e2a\u7c7b\u200b\uff0c<code>BeanReference</code>(\u200b\u7c7b\u200b\u5f15\u7528\u200b)\u3001<code>PropertyValue</code>(\u200b\u5c5e\u6027\u200b\u503c\u200b)\u3001<code>PropertyValues</code>(\u200b\u5c5e\u6027\u200b\u96c6\u5408\u200b)\uff0c\u200b\u5206\u522b\u200b\u7528\u4e8e\u200b\u7c7b\u200b\u548c\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u6539\u52a8\u200b\u7684\u200b\u7c7b\u200b\u4e3b\u8981\u200b\u662f\u200b <code>AbstractAutowireCapableBeanFactory</code>\uff0c\u200b\u5728\u200b <code>createBean</code> \u200b\u4e2d\u200b\u8865\u5168\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u90e8\u5206\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#2_1","title":"2. \u200b\u5b9a\u4e49\u200b\u5c5e\u6027","text":"Java<pre><code>public class PropertyValue {\n    private final String name;\n\n    private final Object value;\n\n    public PropertyValue(String name, Object value) {\n        this.name = name;\n        this.value = value;\n    }\n\n    public Object getValue() {\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n</code></pre> Java<pre><code>public class PropertyValues {\n    private final List&lt;PropertyValue&gt; propertyValueList = new ArrayList&lt;&gt;();\n\n    public void addPropertyValue(PropertyValue propertyValue) {\n        this.propertyValueList.add(propertyValue);\n    }\n\n    public PropertyValue[] getPropertyValues() {\n        return this.propertyValueList.toArray(new PropertyValue[0]);\n    }\n\n    public PropertyValue getPropertyValue(String propertyName) {\n        for (PropertyValue pv : this.propertyValueList) {\n            if (Objects.equals(pv.getName(), propertyName)) {\n                return pv;\n            }\n        }\n        return null;\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#3-bean","title":"3. Bean\u200b\u5b9a\u4e49\u200b\u8865\u5168","text":"Java<pre><code>public class BeanDefinition {\n    private Class beanClass;\n\n    private PropertyValues propertyValues;\n\n    public BeanDefinition(Class beanClass) {\n        this.beanClass = beanClass;\n        this.propertyValues = new PropertyValues();\n    }\n\n    public BeanDefinition(Class beanClass, PropertyValues propertyValues) {\n        this.beanClass = beanClass;\n        this.propertyValues = Objects.nonNull(propertyValues) ? propertyValues : new PropertyValues();\n    }\n\n    .....\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>Bean</code> \u200b\u6ce8\u518c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u662f\u200b\u9700\u8981\u200b\u4f20\u9012\u200b <code>Bean</code> \u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5728\u200b\u51e0\u4e2a\u200b\u524d\u9762\u200b\u7ae0\u8282\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\u90fd\u200b\u6709\u6240\u200b\u4f53\u73b0\u200b <code>new BeanDefinition(UserService.class, propertyValues)</code>;</li> <li>\u200b\u6240\u4ee5\u200b\u4e3a\u4e86\u200b\u628a\u200b\u5c5e\u6027\u200b\u4e00\u5b9a\u200b\u4ea4\u7ed9\u200b <code>Bean</code> \u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u91cc\u200b\u586b\u5145\u200b\u4e86\u200b <code>PropertyValues</code> \u200b\u5c5e\u6027\u200b\uff0c\u200b\u540c\u65f6\u200b\u628a\u200b\u4e24\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\u505a\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u7b80\u5355\u200b\u7684\u200b\u4f18\u5316\u200b\uff0c\u200b\u907f\u514d\u200b\u540e\u9762\u200b for \u200b\u5faa\u73af\u200b\u65f6\u200b\u8fd8\u200b\u5f97\u200b\u5224\u65ad\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#4-bean","title":"4. Bean\u200b\u5c5e\u6027\u200b\u586b\u5145","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory{\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean;\n        try {\n            bean = createBeanInstance(beanDefinition, beanName, args);\n\n            applyPropertyValues(beanDefinition, bean, beanName);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n    .....\n\n    public void applyPropertyValues(BeanDefinition beanDefinition, Object bean, String beanName) {\n        try {\n            PropertyValues propertyValues = beanDefinition.getPropertyValues();\n            for (PropertyValue propertyValue : propertyValues.getPropertyValues()) {\n                String name = propertyValue.getName();\n                Object value = propertyValue.getValue();\n\n                if (value instanceof BeanReference) {\n                    BeanReference beanReference = (BeanReference) value;\n                    value = getBean(beanReference.getBeanName());\n                }\n\n                BeanUtil.setFieldValue(bean, name, value);\n            }\n        } catch (Exception e) {\n            throw new BeansException(\"Error setting property values\uff1a\" + beanName);\n        }\n    }\n\n    .....\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>applyPropertyValues</code> \u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u83b7\u53d6\u200b <code>beanDefinition.getPropertyValues()</code> \u200b\u5faa\u73af\u200b\u8fdb\u884c\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5982\u679c\u200b\u9047\u5230\u200b\u7684\u200b\u662f\u200b <code>BeanReference</code>\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u9700\u8981\u200b\u9012\u5f52\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u8c03\u7528\u200b <code>getBean</code> \u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u5f53\u200b\u628a\u200b\u4f9d\u8d56\u200b\u7684\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u9012\u5f52\u200b\u56de\u200b\u73b0\u5728\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u4e2d\u200b\u3002\u200b\u8fd9\u91cc\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u6211\u4eec\u200b\u5e76\u200b\u6ca1\u6709\u200b\u53bb\u200b\u5904\u7406\u200b\u5faa\u73af\u200b\u4f9d\u8d56\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u5185\u5bb9\u200b\u8f83\u5927\u200b\uff0c\u200b\u540e\u7eed\u200b\u8865\u5145\u200b\u3002<code>BeanUtil.setFieldValue(bean, name, value)</code> \u200b\u662f\u200b <code>hutool-all</code> \u200b\u5de5\u5177\u200b\u7c7b\u4e2d\u200b\u7684\u200b\u65b9\u6cd5\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bBean","text":"Java<pre><code>public class UserDao {\n\n    private static Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n\n    static {\n        hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    }\n\n    public String queryUserName(String uId) {\n        return hashMap.get(uId);\n    }\n\n}\n</code></pre> Java<pre><code>public class UserService {\n\n    private String uId;\n\n    private UserDao userDao;\n\n    public void queryUserInfo() {\n        System.out.println(\"\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\uff1a\" + userDao.queryUserName(uId));\n    }\n\n    public String getuId() {\n        return uId;\n    }\n\n    public void setuId(String uId) {\n        this.uId = uId;\n    }\n\n    public UserDao getUserDao() {\n        return userDao;\n    }\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#2_2","title":"2. \u200b\u6d4b\u8bd5\u7528\u4f8b","text":"Java<pre><code> @Test\npublic void test_BeanFactory() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\n    // 2. UserDao \u200b\u6ce8\u518c\u200b\n    beanFactory.registerBeanDefinition(\"userDao\", new BeanDefinition(UserDao.class));\n\n    // 3. UserService \u200b\u8bbe\u7f6e\u200b\u5c5e\u6027\u200b[uId\u3001userDao]\n    PropertyValues propertyValues = new PropertyValues();\n    propertyValues.addPropertyValue(new PropertyValue(\"uId\", \"10001\"));\n    propertyValues.addPropertyValue(new PropertyValue(\"userDao\",new BeanReference(\"userDao\")));\n\n    // 4. UserService \u200b\u6ce8\u5165\u200bbean\n    BeanDefinition beanDefinition = new BeanDefinition(UserService.class, propertyValues);\n    beanFactory.registerBeanDefinition(\"userService\", beanDefinition);\n\n    // 5. UserService \u200b\u83b7\u53d6\u200bbean\n    UserService userService = (UserService) beanFactory.getBean(\"userService\");\n    userService.queryUserInfo();\n}\n</code></pre> <ul> <li>\u200b\u4e0e\u200b\u76f4\u63a5\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u4e0d\u540c\u200b\uff0c\u200b\u8fd9\u6b21\u200b\u6211\u4eec\u200b\u8fd8\u200b\u9700\u8981\u200b\u5148\u200b\u628a\u200b <code>userDao</code> \u200b\u6ce8\u5165\u200b\u5230\u200b <code>Bean</code> \u200b\u5bb9\u5668\u200b\u4e2d\u200b\u3002<code>beanFactory.registerBeanDefinition(\"userDao\", new BeanDefinition(UserDao.class))</code>;</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u7684\u200b\u64cd\u4f5c\u200b\u4e86\u200b\uff0c\u200b\u4e00\u79cd\u200b\u662f\u200b\u666e\u901a\u200b\u5c5e\u6027\u200b <code>new PropertyValue(\"uId\", \"10001\")</code>\uff0c\u200b\u53e6\u5916\u200b\u4e00\u79cd\u200b\u662f\u200b\u5bf9\u8c61\u200b\u5c5e\u6027\u200b <code>new PropertyValue(\"userDao\",new BeanReference(\"userDao\"))</code></li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5c31\u200b\u7b80\u5355\u200b\u4e86\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u662f\u200b\u6b63\u5e38\u200b\u83b7\u53d6\u200b <code>userService</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\u5373\u53ef\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#3_1","title":"3. \u200b\u6d4b\u8bd5\u200b\u7ed3\u679c","text":"Text Only<pre><code>\u200b\u67e5\u8be2\u200b\u7528\u6237\u200b\u4fe1\u606f\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-04/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/EKoMDpa4q8TMikRM2wBIzw</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/","title":"\u8bbe\u8ba1\u200b\u4e0e\u200b\u5b9e\u73b0\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\uff0c\u200b\u4ece\u200bSpring.xml\u200b\u89e3\u6790\u200b\u548c\u200b\u6ce8\u518c\u200bBean\u200b\u5bf9\u8c61","text":"<p> \u200b\u7ea6\u200b 2345 \u200b\u4e2a\u200b\u5b57\u200b  325 \u200b\u884c\u200b\u4ee3\u7801\u200b  3 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 12 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5728\u200b\u5b8c\u6210\u200b Spring \u200b\u7684\u200b\u6846\u67b6\u200b\u96cf\u5f62\u200b\u540e\u200b\uff0c\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u8fdb\u884c\u200b\u624b\u52a8\u200b\u64cd\u4f5c\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u6ce8\u518c\u200b\u548c\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6700\u7ec8\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\u3002\u200b\u4f46\u200b\u8fd9\u91cc\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5c31\u662f\u200b\u5982\u679c\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b Spring \u200b\u6846\u67b6\u200b\uff0c\u200b\u662f\u200b\u4e0d\u592a\u53ef\u80fd\u200b\u8ba9\u200b\u7528\u6237\u200b\u901a\u8fc7\u200b\u624b\u52a8\u200b\u65b9\u5f0f\u200b\u521b\u5efa\u200b\u7684\u200b\uff0c\u200b\u800c\u662f\u200b\u6700\u597d\u200b\u80fd\u200b\u901a\u8fc7\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u65b9\u5f0f\u200b\u7b80\u5316\u200b\u521b\u5efa\u200b\u8fc7\u7a0b\u200b\u3002</p> <p>\u200b\u63a5\u4e0b\u6765\u200b\u6211\u4eec\u200b\u5c31\u200b\u9700\u8981\u200b\u5728\u200b\u73b0\u6709\u200b\u7684\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u80fd\u200b\u89e3\u51b3\u200b Spring \u200b\u914d\u7f6e\u200b\u7684\u200b\u8bfb\u53d6\u200b\u3001\u200b\u89e3\u6790\u200b\u3001\u200b\u6ce8\u518c\u200bBean\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u4f9d\u7167\u200b\u672c\u200b\u7ae0\u8282\u200b\u7684\u200b\u9700\u6c42\u200b\u80cc\u666f\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b\u73b0\u6709\u200b\u7684\u200b Spring \u200b\u6846\u67b6\u200b\u96cf\u5f62\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u8d44\u6e90\u200b\u89e3\u6790\u5668\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u80fd\u200b\u8bfb\u53d6\u200bclasspath\u3001\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u548c\u200b\u4e91\u200b\u6587\u4ef6\u200b\u7684\u200b\u914d\u7f6e\u200b\u5185\u5bb9\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u914d\u7f6e\u200b\u5185\u5bb9\u200b\u5c31\u662f\u200b\u50cf\u200b\u4f7f\u7528\u200b Spring \u200b\u65f6\u200b\u914d\u7f6e\u200b\u7684\u200b Spring.xml \u200b\u4e00\u6837\u200b\uff0c\u200b\u91cc\u9762\u200b\u4f1a\u200b\u5305\u62ec\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u63cf\u8ff0\u200b\u548c\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u3002\u200b\u5728\u200b\u8bfb\u53d6\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4fe1\u606f\u200b\u540e\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u5bf9\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b Bean \u200b\u63cf\u8ff0\u200b\u4fe1\u606f\u200b\u89e3\u6790\u200b\u540e\u200b\u8fdb\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u628a\u200b Bean \u200b\u5bf9\u8c61\u200b\u6ce8\u518c\u200b\u5230\u200b Spring \u200b\u5bb9\u5668\u200b\u4e2d\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\u5c5e\u4e8e\u200b\u76f8\u5bf9\u200b\u72ec\u7acb\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u5b83\u200b\u4f4d\u4e8e\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u6838\u5fc3\u200b\u5305\u4e0b\u200b\u7684\u200bIO\u200b\u5b9e\u73b0\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u5904\u7406\u200bClass\u3001\u200b\u672c\u5730\u200b\u548c\u200b\u4e91\u200b\u73af\u5883\u200b\u4e2d\u200b\u7684\u200b\u6587\u4ef6\u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u5f53\u200b\u8d44\u6e90\u200b\u53ef\u4ee5\u200b\u52a0\u8f7d\u200b\u540e\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u89e3\u6790\u200b\u548c\u200b\u6ce8\u518c\u200b <code>Bean</code> \u200b\u5230\u200b <code>Spring</code> \u200b\u4e2d\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u5b9e\u73b0\u200b\u9700\u8981\u200b\u548c\u200b <code>DefaultListableBeanFactory</code> \u200b\u6838\u5fc3\u200b\u7c7b\u200b\u7ed3\u5408\u200b\u8d77\u6765\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4f60\u200b\u6240\u6709\u200b\u7684\u200b\u89e3\u6790\u200b\u540e\u200b\u7684\u200b\u6ce8\u518c\u200b\u52a8\u4f5c\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u628a\u200b <code>Bean</code> \u200b\u5b9a\u4e49\u200b\u4fe1\u606f\u200b\u653e\u5165\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u7c7b\u4e2d\u200b\u3002</li> <li>\u200b\u90a3\u4e48\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7684\u200b\u65f6\u5019\u200b\u5c31\u200b\u8bbe\u8ba1\u200b\u597d\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5c42\u7ea7\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5305\u62ec\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u51fa\u200b <code>Bean</code> \u200b\u5b9a\u4e49\u200b\u7684\u200b\u8bfb\u53d6\u200b\u63a5\u53e3\u200b <code>BeanDefinitionReader</code> \u200b\u4ee5\u53ca\u200b\u505a\u597d\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7c7b\u4e2d\u200b\u5b8c\u6210\u200b\u5bf9\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u89e3\u6790\u200b\u548c\u200b\u6ce8\u518c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-05\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 bean\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 UserDao.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 UserService.java\n        \u2514\u2500\u2500 resources\n            \u251c\u2500\u2500 important.properties\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>Spring \u200b\u5bb9\u5668\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u548c\u200b\u4f7f\u7528\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u672c\u200b\u7ae0\u8282\u200b\u4e3a\u4e86\u200b\u80fd\u200b\u628a\u200b <code>Bean</code> \u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u6ce8\u518c\u200b\u548c\u200b\u521d\u59cb\u5316\u200b\u4ea4\u7ed9\u200b Spring.xml \u200b\u914d\u7f6e\u200b\u5316\u200b\u5904\u7406\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u4e24\u5927\u5757\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200b\uff1a\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\u3001xml\u200b\u8d44\u6e90\u200b\u5904\u7406\u200b\u7c7b\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e3b\u8981\u200b\u4ee5\u200b\u5bf9\u63a5\u53e3\u200b <code>Resource</code>\u3001<code>ResourceLoader</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u800c\u200b\u53e6\u5916\u200b <code>BeanDefinitionReader</code> \u200b\u63a5\u53e3\u200b\u5219\u200b\u662f\u200b\u5bf9\u200b\u8d44\u6e90\u200b\u7684\u200b\u5177\u4f53\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5c06\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u6ce8\u518c\u200b\u5230\u200b <code>Spring</code> \u200b\u5bb9\u5668\u200b\u4e2d\u200b\u53bb\u200b\u3002</li> <li>\u200b\u5728\u200b <code>Resource</code> \u200b\u7684\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u5305\u62ec\u200b\u4e86\u200b\uff0cClassPath\u3001\u200b\u7cfb\u7edf\u6587\u4ef6\u200b\u3001\u200b\u4e91\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u8fd9\u4e09\u200b\u90e8\u5206\u200b\u4e0e\u200b <code>Spring</code> \u200b\u6e90\u7801\u200b\u4e2d\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5b9e\u73b0\u200b\u4fdd\u6301\u4e00\u81f4\u200b\uff0c\u200b\u6700\u7ec8\u200b\u5728\u200b <code>DefaultResourceLoader</code> \u200b\u4e2d\u200b\u505a\u200b\u5177\u4f53\u200b\u7684\u200b\u8c03\u7528\u200b\u3002</li> <li>\u200b\u63a5\u53e3\u200b\uff1a<code>BeanDefinitionReader</code>\u3001\u200b\u62bd\u8c61\u7c7b\u200b\uff1a<code>AbstractBeanDefinitionReader</code>\u3001\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff1a<code>XmlBeanDefinitionReader</code>\uff0c\u200b\u8fd9\u4e09\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\u4e3b\u8981\u200b\u662f\u200b\u5408\u7406\u200b\u6e05\u6670\u200b\u7684\u200b\u5904\u7406\u200b\u4e86\u200b\u8d44\u6e90\u200b\u8bfb\u53d6\u200b\u540e\u200b\u7684\u200b\u6ce8\u518c\u200b <code>Bean</code> \u200b\u5bb9\u5668\u200b\u64cd\u4f5c\u200b\u3002\u200b\u63a5\u53e3\u200b\u7ba1\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u62bd\u8c61\u7c7b\u200b\u5904\u7406\u200b\u975e\u200b\u63a5\u53e3\u200b\u529f\u80fd\u200b\u5916\u200b\u7684\u200b\u6ce8\u518c\u200b<code>Bean</code>\u200b\u7ec4\u4ef6\u200b\u586b\u5145\u200b\uff0c\u200b\u6700\u7ec8\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u5373\u53ef\u200b\u53ea\u200b\u5173\u5fc3\u200b\u5177\u4f53\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5b9e\u73b0\u200b</li> </ul> <p>\u200b\u53e6\u5916\u200b\u672c\u200b\u7ae0\u8282\u200b\u8fd8\u200b\u53c2\u8003\u200b <code>Spring</code> \u200b\u6e90\u7801\u200b\uff0c\u200b\u505a\u200b\u4e86\u200b\u76f8\u5e94\u200b\u63a5\u53e3\u200b\u7684\u200b\u96c6\u6210\u200b\u548c\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u867d\u7136\u200b\u8fd9\u4e9b\u200b\u63a5\u53e3\u200b\u76ee\u524d\u200b\u8fd8\u200b\u5e76\u200b\u6ca1\u6709\u200b\u592a\u5927\u200b\u7684\u200b\u4f5c\u7528\u200b\uff0c\u200b\u4f46\u200b\u968f\u7740\u200b\u6846\u67b6\u200b\u7684\u200b\u9010\u6b65\u5b8c\u5584\u200b\uff0c\u200b\u5b83\u4eec\u200b\u4e5f\u200b\u4f1a\u200b\u53d1\u6325\u4f5c\u7528\u200b\u3002</p> <p></p> <ul> <li>BeanFactory\uff0c\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u7684\u200b <code>Bean</code> \u200b\u5de5\u5382\u200b\u63a5\u53e3\u200b\u7528\u4e8e\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8fd9\u6b21\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u6309\u7167\u200b\u7c7b\u578b\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a<code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code></li> <li>ListableBeanFactory\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6269\u5c55\u200b <code>Bean</code> \u200b\u5de5\u5382\u200b\u63a5\u53e3\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b <code>getBeansOfType</code>\u3001<code>getBeanDefinitionNames</code>() \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5728\u200b <code>Spring</code> \u200b\u6e90\u7801\u200b\u4e2d\u200b\u8fd8\u6709\u200b\u5176\u4ed6\u200b\u6269\u5c55\u200b\u65b9\u6cd5\u200b\u3002</li> <li>HierarchicalBeanFactory\uff0c\u200b\u5728\u200b <code>Spring</code> \u200b\u6e90\u7801\u200b\u4e2d\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u53ef\u4ee5\u200b\u83b7\u53d6\u200b\u7236\u7c7b\u200b <code>BeanFactory</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5c5e\u4e8e\u200b\u662f\u200b\u4e00\u79cd\u200b\u6269\u5c55\u200b\u5de5\u5382\u200b\u7684\u200b\u5c42\u6b21\u200b\u5b50\u200b\u63a5\u53e3\u200b\u3002Sub-interface implemented by bean factories that can be part of a hierarchy.</li> <li>AutowireCapableBeanFactory\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u81ea\u52a8\u5316\u200b\u5904\u7406\u200b<code>Bean</code>\u200b\u5de5\u5382\u200b\u914d\u7f6e\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u76ee\u524d\u200b\u6848\u4f8b\u200b\u5de5\u7a0b\u200b\u4e2d\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u505a\u200b\u76f8\u5e94\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u540e\u7eed\u200b\u9010\u6b65\u5b8c\u5584\u200b\u3002</li> <li>ConfigurableBeanFactory\uff0c\u200b\u53ef\u200b\u83b7\u53d6\u200b <code>BeanPostProcessor</code>\u3001<code>BeanClassLoader</code>\u200b\u7b49\u200b\u7684\u200b\u4e00\u4e2a\u200b\u914d\u7f6e\u200b\u5316\u200b\u63a5\u53e3\u200b\u3002</li> <li>ConfigurableListableBeanFactory\uff0c\u200b\u63d0\u4f9b\u200b\u5206\u6790\u200b\u548c\u200b\u4fee\u6539\u200bBean\u200b\u4ee5\u53ca\u200b\u9884\u5148\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u64cd\u4f5c\u200b\u63a5\u53e3\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u76ee\u524d\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b <code>getBeanDefinition</code> \u200b\u65b9\u6cd5\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2_1","title":"2. \u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u548c\u200b\u5b9e\u73b0","text":"Java<pre><code>public interface Resource {\n\n    InputStream getInputStream() throws IOException;\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u4e0b\u200b\u521b\u5efa\u200b <code>core.io</code> \u200b\u6838\u5fc3\u200b\u5305\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u5305\u4e2d\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\u3002</li> <li>\u200b\u5b9a\u4e49\u200b <code>Resource</code> \u200b\u63a5\u53e3\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u83b7\u53d6\u200b <code>InputStream</code> \u200b\u6d41\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u518d\u200b\u5206\u522b\u200b\u5b9e\u73b0\u200b\u4e09\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u6d41\u200b\u6587\u4ef6\u200b\u64cd\u4f5c\u200b\uff1aclassPath\u3001FileSystem\u3001URL</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1-classpath","title":"1. ClassPath","text":"Java<pre><code>public class ClassPathResource implements Resource {\n    private final String path;\n\n    private ClassLoader classLoader;\n\n    public ClassPathResource(String path) {\n        this(path, null);\n    }\n\n    public ClassPathResource(String path, ClassLoader classLoader) {\n        this.path = path;\n        this.classLoader = Objects.nonNull(classLoader) ? classLoader : ClassUtils.getDefaultClassLoader();\n    }\n\n    /**\n     * \u200b\u83b7\u53d6\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     * @return \u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        InputStream inputStream = classLoader.getResourceAsStream(path);\n        if (Objects.isNull(inputStream)) {\n            throw new FileNotFoundException(this.path + \" cannot be opened because it does not exist\");\n        }\n        return inputStream;\n    }\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u200b\u4e00\u90e8\u5206\u200b\u7684\u200b\u5b9e\u73b0\u200b\u662f\u200b\u7528\u4e8e\u200b\u901a\u8fc7\u200b <code>ClassLoader</code> \u200b\u8bfb\u53d6\u200b ClassPath \u200b\u4e0b\u200b\u7684\u200b\u6587\u4ef6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5177\u4f53\u200b\u7684\u200b\u8bfb\u53d6\u200b\u8fc7\u7a0b\u200b\u4e3b\u8981\u200b\u662f\u200b\uff1a<code>classLoader.getResourceAsStream(path)</code></li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2-filesystem","title":"2. FileSystem","text":"Java<pre><code>public class FileSystemResource implements Resource {\n    private final File file;\n\n    private final String path;\n\n    public FileSystemResource(String path) {\n        this.path = path;\n        this.file = new File(path);\n    }\n\n    public FileSystemResource(File file) {\n        this.file = file;\n        this.path = file.getPath();\n    }\n\n    /**\n     * \u200b\u83b7\u53d6\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     * @return \u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        return Files.newInputStream(file.toPath());\n    }\n\n    public String getPath() {\n        return path;\n    }\n}\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b\u6307\u5b9a\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8bfb\u53d6\u200b\u6587\u4ef6\u200b\u4fe1\u606f\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#3-url","title":"3. URL","text":"Java<pre><code>public class UrlResource implements Resource {\n    private final URL url;\n\n    public UrlResource(URL url) {\n        Assert.notNull(url,\"URL must not be null\");\n        this.url = url;\n    }\n\n    /**\n     * \u200b\u83b7\u53d6\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     * @return \u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u6d41\u200b\n     */\n    @Override\n    public InputStream getInputStream() throws IOException {\n        URLConnection connection = this.url.openConnection();\n        try {\n            return connection.getInputStream();\n        } catch (IOException e) {\n            if (connection instanceof HttpURLConnection){\n                ((HttpURLConnection) connection).disconnect();\n            }\n            throw e;\n        }\n    }\n}\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b HTTP \u200b\u7684\u200b\u65b9\u5f0f\u200b\u8bfb\u53d6\u200b\u4e91\u200b\u670d\u52a1\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u628a\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u653e\u5230\u200b GitHub \u200b\u4e0a\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#3_1","title":"3. \u200b\u5305\u88c5\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668","text":"<p>\u200b\u6309\u7167\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u7684\u200b\u4e0d\u540c\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\u53ef\u4ee5\u200b\u628a\u200b\u8fd9\u4e9b\u200b\u65b9\u5f0f\u200b\u96c6\u4e2d\u200b\u5230\u200b\u7edf\u4e00\u200b\u7684\u200b\u7c7b\u200b\u670d\u52a1\u200b\u4e0b\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u5916\u90e8\u200b\u7528\u6237\u200b\u53ea\u200b\u9700\u8981\u200b\u4f20\u9012\u200b\u8d44\u6e90\u200b\u5730\u5740\u200b\u5373\u53ef\u200b\uff0c\u200b\u7b80\u5316\u200b\u4f7f\u7528\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1_2","title":"1. \u200b\u5b9a\u4e49\u200b\u63a5\u53e3","text":"Java<pre><code>public interface ResourceLoader {\n    String CLASSPATH_URL_PRRFIX = \"classpath:\";\n\n    /**\n     * \u200b\u5b9a\u4e49\u200b\u8d44\u6e90\u200b\u83b7\u53d6\u200b\u63a5\u53e3\u200b\n     * @param location \u200b\u5730\u5740\u200b\n     * @return \u200b\u8d44\u6e90\u200b\u83b7\u53d6\u200b\u63a5\u53e3\u200b\n     */\n    Resource getResource(String location);\n}\n</code></pre> <ul> <li>\u200b\u5b9a\u4e49\u200b\u83b7\u53d6\u200b\u8d44\u6e90\u200b\u63a5\u53e3\u200b\uff0c\u200b\u91cc\u9762\u200b\u4f20\u9012\u200b location \u200b\u5730\u5740\u200b\u5373\u53ef\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2_2","title":"2. \u200b\u5b9e\u73b0\u200b\u63a5\u53e3","text":"Java<pre><code>public class DefaultResourceLoader implements ResourceLoader {\n\n    /**\n     * \u200b\u5b9a\u4e49\u200b\u8d44\u6e90\u200b\u83b7\u53d6\u200b\u63a5\u53e3\u200b\n     * @param location \u200b\u5730\u5740\u200b\n     * @return \u200b\u8d44\u6e90\u200b\u83b7\u53d6\u200b\u63a5\u53e3\u200b\n     */\n    @Override\n    public Resource getResource(String location) {\n        Assert.notNull(location, \"Location must not be null\");\n        // \u200b\u7c7b\u200b\u8def\u5f84\u200b\n        if (location.startsWith(CLASSPATH_URL_PRRFIX)) {\n            return new ClassPathResource(location.substring(CLASSPATH_URL_PRRFIX.length()));\n        } else {\n            try {\n                // URL\u200b\u89e3\u6790\u200b\n                URL url = new URL(location);\n                return new UrlResource(url);\n            } catch (MalformedURLException e) {\n                // \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n                return new FileSystemResource(location);\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u83b7\u53d6\u200b\u8d44\u6e90\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u628a\u200b\u4e09\u79cd\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u8d44\u6e90\u200b\u5904\u7406\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5305\u88c5\u200b\uff0c\u200b\u5206\u4e3a\u200b\uff1a\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u4e3a\u200bClassPath\u3001URL\u200b\u4ee5\u53ca\u200b\u6587\u4ef6\u200b\u3002</li> <li>\u200b\u867d\u7136\u200b <code>DefaultResourceLoader</code> \u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u7b80\u5355\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u8bbe\u8ba1\u6a21\u5f0f\u200b\u7ea6\u5b9a\u200b\u7684\u200b\u5177\u4f53\u200b\u7ed3\u679c\u200b\uff0c\u200b\u50cf\u662f\u200b\u8fd9\u91cc\u200b\u4e0d\u4f1a\u200b\u8ba9\u200b\u5916\u90e8\u200b\u8c03\u7528\u200b\u653e\u200b\u77e5\u9053\u200b\u8fc7\u591a\u200b\u7684\u200b\u7ec6\u8282\u200b\uff0c\u200b\u800c\u662f\u200b\u4ec5\u200b\u5173\u5fc3\u200b\u5177\u4f53\u200b\u8c03\u7528\u200b\u7ed3\u679c\u200b\u5373\u53ef\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#4-bean","title":"4. Bean\u200b\u5b9a\u4e49\u200b\u8bfb\u53d6\u200b\u63a5\u53e3","text":"Java<pre><code>public interface BeanDefinitionReader {\n    BeanDefinitionRegistry getRegistry();\n\n    ResourceLoader getResourceLoader();\n\n    void loadBeanDefinitions(Resource resource) throws BeansException;\n\n    void loadBeanDefinitions(Resource... resources) throws BeansException;\n\n    void loadBeanDefinitions(String location) throws BeansException;\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b Simple interface for bean definition readers. \u200b\u5176\u5b9e\u200b\u91cc\u9762\u200b\u65e0\u975e\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a<code>getRegistry()</code>\u3001<code>getResourceLoader()</code>\uff0c\u200b\u4ee5\u53ca\u200b\u4e09\u4e2a\u200b\u52a0\u8f7d\u200bBean\u200b\u5b9a\u4e49\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u8fd9\u91cc\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b <code>getRegistry()</code>\u3001<code>getResourceLoader()</code>\uff0c\u200b\u90fd\u200b\u662f\u200b\u7528\u4e8e\u200b\u63d0\u4f9b\u200b\u7ed9\u200b\u540e\u9762\u200b\u4e09\u4e2a\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u52a0\u8f7d\u200b\u548c\u200b\u6ce8\u518c\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4f1a\u200b\u5305\u88c5\u200b\u5230\u200b\u62bd\u8c61\u7c7b\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u514d\u200b\u6c61\u67d3\u200b\u5177\u4f53\u200b\u7684\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#5-bean","title":"5. Bean\u200b\u5b9a\u4e49\u200b\u8bfb\u53d6\u200b\u62bd\u8c61\u7c7b\u200b\u5b9e\u73b0","text":"Java<pre><code>public abstract class AbstractBeanDefinitionReader implements BeanDefinitionReader {\n    private final BeanDefinitionRegistry registry;\n\n    private ResourceLoader resourceLoader;\n\n    protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {\n        this(registry, new DefaultResourceLoader());\n    }\n\n    public AbstractBeanDefinitionReader(BeanDefinitionRegistry registry, ResourceLoader resourceLoader) {\n        this.registry = registry;\n        this.resourceLoader = resourceLoader;\n    }\n\n    @Override\n    public BeanDefinitionRegistry getRegistry() {\n        return registry;\n    }\n\n    @Override\n    public ResourceLoader getResourceLoader() {\n        return resourceLoader;\n    }\n}\n</code></pre> <ul> <li>\u200b\u62bd\u8c61\u7c7b\u200b\u628a\u200b <code>BeanDefinitionReader</code> \u200b\u63a5\u53e3\u200b\u7684\u200b\u524d\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u5168\u90e8\u200b\u5b9e\u73b0\u200b\u5b8c\u200b\u4e86\u200b\uff0c\u200b\u5e76\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u8ba9\u200b\u5916\u90e8\u200b\u7684\u200b\u8c03\u7528\u200b\u4f7f\u7528\u200b\u65b9\u200b\uff0c\u200b\u628a\u200bBean\u200b\u5b9a\u4e49\u200b\u6ce8\u5165\u200b\u7c7b\u200b (DefaultListableBeanFactory)\uff0c\u200b\u4f20\u9012\u200b\u8fdb\u6765\u200b\u3002</li> <li>\u200b\u8fd9\u6837\u200b\u5728\u200b\u63a5\u53e3\u200b <code>BeanDefinitionReader</code> \u200b\u7684\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u628a\u200b\u89e3\u6790\u200b\u540e\u200b\u7684\u200b XML \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b <code>Bean</code> \u200b\u4fe1\u606f\u200b\uff0c\u200b\u6ce8\u518c\u200b\u5230\u200b <code>Spring</code> \u200b\u5bb9\u5668\u200b\u53bb\u200b\u4e86\u200b\u3002\u200b\u4ee5\u524d\u200b\u6211\u4eec\u200b\u662f\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8c03\u7528\u200b <code>BeanDefinitionRegistry</code> \u200b\u5b8c\u6210\u200b<code>Bean</code>\u200b\u7684\u200b\u6ce8\u518c\u200b\uff0c\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u653e\u5230\u200b <code>XMl</code> \u200b\u4e2d\u200b\u64cd\u4f5c\u200b\u4e86\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#6-xmlbean","title":"6. \u200b\u89e3\u6790\u200bXML\u200b\u5904\u7406\u200bBean\u200b\u6ce8\u518c","text":"Java<pre><code>public class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n    public XmlBeanDefinitionReader(BeanDefinitionRegistry registry) {\n        super(registry);\n    }\n\n    public XmlBeanDefinitionReader(BeanDefinitionRegistry registry, ResourceLoader resourceLoader) {\n        super(registry, resourceLoader);\n    }\n\n    @Override\n    public void loadBeanDefinitions(Resource resource) throws BeansException {\n        try (InputStream inputStream = resource.getInputStream()){\n            doLoadBeanDefinitions(inputStream);\n        } catch (IOException | ClassNotFoundException e) {\n            throw new BeansException(\"IOException parsing XML document from \" + resource, e);\n        }\n    }\n\n    @Override\n    public void loadBeanDefinitions(Resource... resources) throws BeansException {\n        for (Resource resource : resources) {\n            loadBeanDefinitions(resource);\n        }\n    }\n\n    @Override\n    public void loadBeanDefinitions(String location) throws BeansException {\n        ResourceLoader resourceLoader = getResourceLoader();\n        Resource resource = resourceLoader.getResource(location);\n        loadBeanDefinitions(resource);\n    }\n\n    protected void doLoadBeanDefinitions(InputStream inputStream) throws ClassNotFoundException {\n        Document doc = XmlUtil.readXML(inputStream);\n        Element root = doc.getDocumentElement();\n        NodeList childNodes = root.getChildNodes();\n\n        for (int i = 0; i &lt; childNodes.getLength(); i++) {\n            // \u200b\u5224\u65ad\u200b\u5143\u7d20\u200b\n            if (!(childNodes.item(i) instanceof Element)) continue;\n            // \u200b\u5224\u65ad\u200b\u5bf9\u8c61\u200b\n            if (!\"bean\".equals(childNodes.item(i).getNodeName())) continue;\n\n            // \u200b\u89e3\u6790\u200b\u6807\u7b7e\u200b\n            Element bean = (Element) childNodes.item(i);\n            String id = bean.getAttribute(\"id\");\n            String name = bean.getAttribute(\"name\");\n            String className = bean.getAttribute(\"class\");\n            // \u200b\u83b7\u53d6\u200b Class\uff0c\u200b\u65b9\u4fbf\u200b\u83b7\u53d6\u200b\u7c7b\u4e2d\u200b\u7684\u200b\u540d\u79f0\u200b\n            Class&lt;?&gt; clazz = Class.forName(className);\n            // \u200b\u4f18\u5148\u7ea7\u200b id &gt; name\n            String beanName = StrUtil.isNotEmpty(id) ? id : name;\n            if (StrUtil.isEmpty(beanName)) {\n                beanName = StrUtil.lowerFirst(clazz.getSimpleName());\n            }\n\n            // \u200b\u5b9a\u4e49\u200bBean\n            BeanDefinition beanDefinition = new BeanDefinition(clazz);\n            // \u200b\u8bfb\u53d6\u200b\u5c5e\u6027\u200b\u5e76\u200b\u586b\u5145\u200b\n            for (int j = 0; j &lt; bean.getChildNodes().getLength(); j++) {\n                if (!(bean.getChildNodes().item(j) instanceof Element)) continue;\n                if (!\"property\".equals(bean.getChildNodes().item(j).getNodeName())) continue;\n                // \u200b\u89e3\u6790\u200b\u6807\u7b7e\u200b\uff1aproperty\n                Element property = (Element) bean.getChildNodes().item(j);\n                String attrName = property.getAttribute(\"name\");\n                String attrValue = property.getAttribute(\"value\");\n                String attrRef = property.getAttribute(\"ref\");\n                // \u200b\u83b7\u53d6\u200b\u5c5e\u6027\u200b\u503c\u200b\uff1a\u200b\u5f15\u5165\u200b\u5bf9\u8c61\u200b\u3001\u200b\u503c\u200b\u5bf9\u8c61\u200b\n                Object value = StrUtil.isNotEmpty(attrRef) ? new BeanReference(attrRef) : attrValue;\n                // \u200b\u521b\u5efa\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\n                PropertyValue propertyValue = new PropertyValue(attrName, value);\n                beanDefinition.getPropertyValues().addPropertyValue(propertyValue);\n            }\n            if (getRegistry().containsBeanDefinition(beanName)) {\n                throw new BeansException(\"Duplicate beanName[\" + beanName + \"] is not allowed\");\n            }\n            // \u200b\u6ce8\u518c\u200b BeanDefinition\n            getRegistry().registerBeanDefinition(beanName, beanDefinition);\n        }\n    }\n}\n</code></pre> <p><code>XmlBeanDefinitionReader</code> \u200b\u7c7b\u200b\u6700\u200b\u6838\u5fc3\u200b\u7684\u200b\u5185\u5bb9\u200b\u5c31\u662f\u200b\u5bf9\u200b <code>XML</code> \u200b\u6587\u4ef6\u200b\u7684\u200b\u89e3\u6790\u200b\uff0c\u200b\u628a\u200b\u6211\u4eec\u200b\u672c\u6765\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u64cd\u4f5c\u200b\u653e\u5230\u200b\u4e86\u200b\u901a\u8fc7\u200b\u89e3\u6790\u200b <code>XML</code> \u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002</p> <ul> <li><code>loadBeanDefinitions</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5904\u7406\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5185\u90e8\u200b\u65b9\u6cd5\u200b\uff1a<code>doLoadBeanDefinitions</code>\uff0c\u200b\u5b83\u200b\u4e3b\u8981\u200b\u8d1f\u8d23\u200b\u89e3\u6790\u200b <code>xml</code></li> <li>\u200b\u5728\u200b <code>doLoadBeanDefinitions</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u200bxml\u200b\u7684\u200b\u8bfb\u53d6\u200b <code>XmlUtil.readXML(inputStream)</code> \u200b\u548c\u200b\u5143\u7d20\u200b <code>Element</code> \u200b\u89e3\u6790\u200b\u3002\u200b\u5728\u200b\u89e3\u6790\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u5faa\u73af\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4ee5\u6b64\u200b\u83b7\u53d6\u200b <code>Bean</code> \u200b\u914d\u7f6e\u200b\u4ee5\u53ca\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b id\u3001name\u3001class\u3001value\u3001ref \u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u6700\u7ec8\u200b\u628a\u200b\u8bfb\u53d6\u200b\u51fa\u6765\u200b\u7684\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\uff0c\u200b\u521b\u5efa\u200b\u6210\u200b <code>BeanDefinition</code> \u200b\u4ee5\u53ca\u200b <code>PropertyValue</code>\uff0c\u200b\u6700\u7ec8\u200b\u628a\u200b\u5b8c\u6574\u200b\u7684\u200b <code>Bean</code> \u200b\u5b9a\u4e49\u200b\u5185\u5bb9\u200b\u6ce8\u518c\u200b\u5230\u200b <code>Bean</code> \u200b\u5bb9\u5668\u200b\uff1a<code>getRegistry().registerBeanDefinition(beanName, beanDefinition)</code></li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1-xml","title":"1. \u200b\u89e3\u6790\u200bXML","text":"Java<pre><code>Document doc = XmlUtil.readXML(inputStream);\nElement root = doc.getDocumentElement();\nNodeList childNodes = root.getChildNodes();\n</code></pre> <ol> <li> <p>XmlUtil.readXML(inputStream)\uff1a</p> <ul> <li>\u200b\u4f7f\u7528\u200b\u5de5\u5177\u200b\u7c7b\u200b <code>XmlUtil</code> \u200b\u89e3\u6790\u200b\u8f93\u5165\u200b\u6d41\u4e2d\u200b\u7684\u200b <code>XML</code> \u200b\u6570\u636e\u200b\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b <code>Document</code> \u200b\u5bf9\u8c61\u200b\u3002</li> <li><code>Document</code> \u200b\u662f\u200b\u6574\u4e2a\u200b <code>XML</code> \u200b\u7684\u200b <code>DOM</code> \u200b\u6811\u7ed3\u6784\u200b\u7684\u200b\u6839\u200b\u3002</li> </ul> </li> <li> <p>doc.getDocumentElement()\uff1a</p> <ul> <li>\u200b\u83b7\u53d6\u200b <code>XML</code> \u200b\u7684\u200b\u6839\u200b\u8282\u70b9\u200b\u5bf9\u8c61\u200b\uff08<code>Element</code>\uff09\u3002</li> <li>\u200b\u5bf9\u4e8e\u200b <code>Spring</code> \u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u6839\u200b\u8282\u70b9\u200b\u901a\u5e38\u200b\u662f\u200b <code>&lt;beans&gt;</code>\u3002</li> </ul> </li> <li> <p>root.getChildNodes()\uff1a</p> <ul> <li>\u200b\u83b7\u53d6\u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u6240\u6709\u200b\u5b50\u200b\u8282\u70b9\u200b\uff0c\u200b\u5305\u62ec\u200b\u6587\u672c\u200b\u8282\u70b9\u200b\u3001\u200b\u5143\u7d20\u200b\u8282\u70b9\u200b\u7b49\u200b\u3002</li> </ul> </li> </ol>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2-bean","title":"2. \u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u4e3a\u200b\u6709\u6548\u200b\u7684\u200b <code>&lt;bean&gt;</code> \u200b\u8282\u70b9","text":"Java<pre><code>if (!(childNodes.item(i) instanceof Element)) continue;\nif (!\"bean\".equals(childNodes.item(i).getNodeName())) continue;\n</code></pre> <ol> <li> <p>childNodes.item(i) instanceof Element\uff1a</p> <ul> <li>\u200b\u68c0\u67e5\u200b\u5f53\u524d\u200b\u5b50\u200b\u8282\u70b9\u200b\u662f\u5426\u662f\u200b\u5143\u7d20\u200b\u8282\u70b9\u200b\uff08<code>Element</code>\uff09\u3002</li> <li>\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b\uff08\u200b\u6bd4\u5982\u200b\u662f\u200b\u6587\u672c\u200b\u8282\u70b9\u200b\uff09\uff0c\u200b\u8df3\u8fc7\u200b\u3002</li> </ul> </li> <li> <p>\"bean\".equals(childNodes.item(i).getNodeName())\uff1a</p> <ul> <li>\u200b\u68c0\u67e5\u200b\u8282\u70b9\u200b\u540d\u79f0\u200b\u662f\u5426\u662f\u200b bean\u3002</li> <li>\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b bean \u200b\u6807\u7b7e\u200b\uff0c\u200b\u8df3\u8fc7\u200b\u3002</li> </ul> </li> </ol>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#3-bean","title":"3. \u200b\u89e3\u6790\u200b <code>&lt;bean&gt;</code> \u200b\u6807\u7b7e","text":"Java<pre><code>Element bean = (Element) childNodes.item(i);\nString id = bean.getAttribute(\"id\");\nString name = bean.getAttribute(\"name\");\nString className = bean.getAttribute(\"class\");\n</code></pre> <ol> <li>Element bean = (Element) childNodes.item(i)\uff1a<ul> <li>\u200b\u5c06\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u5f3a\u5236\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5143\u7d20\u200b\u8282\u70b9\u200b\uff08<code>Element</code>\uff09\u3002</li> </ul> </li> <li>bean.getAttribute(\"id\")\uff1a<ul> <li>\u200b\u83b7\u53d6\u200b <code>id</code> \u200b\u5c5e\u6027\u200b\u503c\u200b\u3002</li> </ul> </li> <li>bean.getAttribute(\"name\")\uff1a<ul> <li>\u200b\u83b7\u53d6\u200b <code>name</code> \u200b\u5c5e\u6027\u200b\u503c\u200b\u3002</li> </ul> </li> <li>bean.getAttribute(\"class\")\uff1a<ul> <li>\u200b\u83b7\u53d6\u200b <code>class</code> \u200b\u5c5e\u6027\u200b\u503c\u200b\uff0c\u200b\u7528\u4e8e\u200b\u52a0\u8f7d\u200b\u5bf9\u5e94\u200b\u7684\u200b <code>Java</code> \u200b\u7c7b\u200b\u3002</li> </ul> </li> </ol>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#4-bean_1","title":"4. \u200b\u5b9a\u4e49\u200bBean","text":"Java<pre><code>// \u200b\u83b7\u53d6\u200b Class\uff0c\u200b\u65b9\u4fbf\u200b\u83b7\u53d6\u200b\u7c7b\u4e2d\u200b\u7684\u200b\u540d\u79f0\u200b\nClass&lt;?&gt; clazz = Class.forName(className);\n// \u200b\u4f18\u5148\u7ea7\u200b id &gt; name\nString beanName = StrUtil.isNotEmpty(id) ? id : name;\nif (StrUtil.isEmpty(beanName)) {\n    beanName = StrUtil.lowerFirst(clazz.getSimpleName());\n}\n\n// \u200b\u5b9a\u4e49\u200bBean\nBeanDefinition beanDefinition = new BeanDefinition(clazz);\n</code></pre> <ol> <li> <p>Class&lt;?&gt; clazz = Class.forName(className); </p> <ul> <li>\u200b\u4f7f\u7528\u200b <code>Class.forName</code> \u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b <code>class</code> \u200b\u5c5e\u6027\u200b\u6307\u5b9a\u200b\u7684\u200b <code>Java</code> \u200b\u7c7b\u200b\u3002</li> </ul> </li> <li> <p>StrUtil.isNotEmpty(id) ? id : name\uff1a</p> <ul> <li>\u200b\u5982\u679c\u200b id \u200b\u4e0d\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u4f18\u5148\u200b\u4f7f\u7528\u200b id \u200b\u4f5c\u4e3a\u200b Bean \u200b\u7684\u200b\u540d\u79f0\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b id \u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u5219\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b name\u3002</li> </ul> </li> <li> <p>StrUtil.isEmpty(beanName)\uff1a</p> <ul> <li>\u200b\u5982\u679c\u200b id \u200b\u548c\u200b name \u200b\u90fd\u200b\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u5219\u200b\u6839\u636e\u200b\u7c7b\u540d\u200b\u751f\u6210\u200b\u9ed8\u8ba4\u200b Bean \u200b\u540d\u79f0\u200b\u3002</li> <li>clazz.getSimpleName()\uff1a<ul> <li>\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u7684\u200b\u7b80\u5355\u200b\u540d\u79f0\u200b\uff08\u200b\u53bb\u200b\u6389\u5305\u200b\u540d\u200b\uff09\u3002</li> </ul> </li> <li>StrUtil.lowerFirst\uff1a<ul> <li>\u200b\u5c06\u200b\u9996\u5b57\u6bcd\u200b\u5c0f\u5199\u200b\uff08\u200b\u7b26\u5408\u200b Java Bean \u200b\u7684\u200b\u547d\u540d\u200b\u89c4\u8303\u200b\uff09\u3002    </li> </ul> </li> </ul> </li> <li> <p>BeanDefinition beanDefinition = new BeanDefinition(clazz);</p> <ul> <li>\u200b\u5c06\u7c7b\u200b\u4fe1\u606f\u200b\u5305\u88c5\u200b\u6210\u200b <code>BeanDefinition</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4fdd\u5b58\u200b Bean \u200b\u7684\u200b\u5143\u200b\u6570\u636e\u200b\u3002</li> </ul> </li> </ol>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#5-property","title":"5. \u200b\u89e3\u6790\u200b<code>&lt;property&gt;</code>\u200b\u6807\u7b7e","text":"Java<pre><code>if (!(bean.getChildNodes().item(j) instanceof Element)) continue;\nif (!\"property\".equals(bean.getChildNodes().item(j).getNodeName())) continue;\n\n// \u200b\u89e3\u6790\u200b\u6807\u7b7e\u200b\uff1aproperty\nElement property = (Element) bean.getChildNodes().item(j);\nString attrName = property.getAttribute(\"name\");\nString attrValue = property.getAttribute(\"value\");\nString attrRef = property.getAttribute(\"ref\");\n\n// \u200b\u83b7\u53d6\u200b\u5c5e\u6027\u200b\u503c\u200b\uff1a\u200b\u5f15\u5165\u200b\u5bf9\u8c61\u200b\u3001\u200b\u503c\u200b\u5bf9\u8c61\u200b\nObject value = StrUtil.isNotEmpty(attrRef) ? new BeanReference(attrRef) : attrValue;\n\n// \u200b\u521b\u5efa\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\nPropertyValue propertyValue = new PropertyValue(attrName, value);\nbeanDefinition.getPropertyValues().addPropertyValue(propertyValue); \n</code></pre> <ol> <li> <p>\u200b\u8fc7\u6ee4\u200b\u65e0\u200b\u5173\u8282\u70b9\u200b</p> <ul> <li>\u200b\u8df3\u8fc7\u200b\u975e\u200b\u5143\u7d20\u200b\u8282\u70b9\u200b\u3002</li> <li>\u200b\u8df3\u8fc7\u200b\u540d\u79f0\u200b\u4e0d\u662f\u200b property \u200b\u7684\u200b\u8282\u70b9\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u89e3\u6790\u200b\u5c5e\u6027\u200b\u503c\u200b</p> <ul> <li>name\uff1a\u200b\u5c5e\u6027\u200b\u540d\u79f0\u200b\u3002</li> <li>value\uff1a\u200b\u76f4\u63a5\u200b\u7684\u200b\u503c\u200b\u3002</li> <li>ref\uff1a\u200b\u5f15\u7528\u200b\u5176\u4ed6\u200b Bean\u3002</li> </ul> </li> <li> <p>\u200b\u786e\u5b9a\u200b\u5c5e\u6027\u200b\u503c\u200b\u7c7b\u578b\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b ref \u200b\u5b58\u5728\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b BeanReference \u200b\u5bf9\u8c61\u200b\u8868\u793a\u200b\u5f15\u7528\u200b\u5173\u7cfb\u200b\u3002</li> <li>\u200b\u5426\u5219\u200b\u4f7f\u7528\u200b value \u200b\u4f5c\u4e3a\u200b\u5c5e\u6027\u200b\u503c\u200b\u3002</li> </ul> </li> <li> <p>\u200b\u5305\u88c5\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b</p> <ul> <li>\u200b\u4f7f\u7528\u200b PropertyValue \u200b\u5c01\u88c5\u200b\u5c5e\u6027\u200b\u540d\u200b\u548c\u200b\u5c5e\u6027\u200b\u503c\u200b\u3002</li> <li>\u200b\u6dfb\u52a0\u200b\u5230\u200b BeanDefinition \u200b\u7684\u200b\u5c5e\u6027\u200b\u96c6\u5408\u200b\u4e2d\u200b\u3002 </li> </ul> </li> </ol>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#6-beandefinition","title":"6. \u200b\u6ce8\u518c\u200bBeanDefinition","text":"Java<pre><code>if (getRegistry().containsBeanDefinition(beanName)) {\n    throw new BeansException(\"Duplicate beanName[\" + beanName + \"] is not allowed\");\n}\n\n// \u200b\u6ce8\u518c\u200b BeanDefinition\ngetRegistry().registerBeanDefinition(beanName, beanDefinition);\n</code></pre> <ul> <li> <p>\u200b\u5982\u679c\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u540c\u540d\u200b Bean\uff0c\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\u3002</p> </li> <li> <p>\u200b\u5c06\u200b\u89e3\u6790\u200b\u5b8c\u6210\u200b\u7684\u200b BeanDefinition \u200b\u6ce8\u518c\u200b\u5230\u200b\u5bb9\u5668\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u540e\u7eed\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u548c\u200b\u4f9d\u8d56\u200b\u6ce8\u5165\u200b\u3002</p> </li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bbean","text":"<p>\u200b\u51c6\u5907\u200b\u6d4b\u8bd5\u200bbean</p> Java<pre><code>public class UserService {\n\n    private String uId;\n\n    private UserDao userDao;\n\n    public String queryUserInfo() {\n        return userDao.queryUserName(uId);\n    }\n\n    ...\n}\n</code></pre> Java<pre><code>public class UserDao {\n\n    private static Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n\n    static {\n        hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    }\n\n    public String queryUserName(String uId) {\n        return hashMap.get(uId);\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#2_3","title":"2. \u200b\u914d\u7f6e\u6587\u4ef6","text":"XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userDao\" class=\"test.bean.UserDao\"/&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#3_2","title":"3. \u200b\u6d4b\u8bd5\u200b\u6848\u4f8b","text":"Java<pre><code>@Test\npublic void test_xml() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\n    // 2. \u200b\u8bfb\u53d6\u200b\u914d\u7f6e\u6587\u4ef6\u200b&amp;\u200b\u6ce8\u518c\u200bBean\n    XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n    reader.loadBeanDefinitions(\"classpath:spring.xml\");\n\n    // 3. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n    UserService userService = beanFactory.getBean(\"userService\", UserService.class);\n    String result = userService.queryUserInfo();\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-05/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/GMcHUL7-oB7T0GWKjNC5Ng</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/","title":"\u5b9e\u73b0\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u81ea\u52a8\u8bc6\u522b\u200b\u3001\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u3001\u200b\u6269\u5c55\u200b\u673a\u5236","text":"<p> \u200b\u7ea6\u200b 2758 \u200b\u4e2a\u200b\u5b57\u200b  602 \u200b\u884c\u200b\u4ee3\u7801\u200b  3 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 17 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u5b9e\u9645\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u5f00\u53d1\u200b\u8fc7\u200b\u57fa\u4e8e\u200b <code>Spring</code> \u200b\u7684\u200b\u6280\u672f\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u6216\u8005\u200b\u5b66\u4e60\u200b\u8fc7\u200b\u5173\u4e8e\u200b <code>SpringBoot</code> \u200b\u4e2d\u95f4\u4ef6\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5f00\u53d1\u200b \u200b\u7b49\u200b\u5185\u5bb9\u200b\u3002\u200b\u90a3\u4e48\u200b\u4f60\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u7ee7\u627f\u200b\u6216\u8005\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>Spring</code> \u200b\u5bf9\u5916\u200b\u66b4\u9732\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5728\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u4e86\u200b <code>BeanFactory</code> \u200b\u4ee5\u53ca\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u83b7\u53d6\u200b\u7b49\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5e76\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u5185\u5bb9\u200b\u505a\u200b\u4e00\u4e9b\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a\u200b\u4fee\u6539\u200b Bean \u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u65e5\u5fd7\u200b\u6253\u5370\u200b\u3001\u200b\u5904\u7406\u200b\u6570\u636e\u5e93\u200b\u8def\u7531\u200b\u5bf9\u200b\u6570\u636e\u6e90\u200b\u7684\u200b\u5207\u6362\u200b\u3001\u200b\u7ed9\u200b RPC \u200b\u670d\u52a1\u200b\u8fde\u63a5\u200b\u6ce8\u518c\u200b\u4e2d\u5fc3\u200b\u7b49\u200b\u3002</p> <p>\u200b\u5728\u200b\u5bf9\u200b\u5bb9\u5668\u200b\u4e2d\u200b <code>Bean</code> \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8fc7\u7a0b\u200b\u6dfb\u52a0\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u7684\u200b\u540c\u65f6\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u628a\u200b\u76ee\u524d\u200b\u5173\u4e8e\u200b Spring.xml \u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u52a0\u8f7d\u200b\u7b56\u7565\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u592a\u53ef\u80fd\u200b\u8ba9\u200b\u9762\u5411\u200b <code>Spring</code> \u200b\u672c\u8eab\u200b\u5f00\u53d1\u200b\u7684\u200b <code>DefaultListableBeanFactory</code> \u200b\u670d\u52a1\u200b\uff0c\u200b\u76f4\u63a5\u200b\u7ed9\u4e88\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u3002\u200b\u4fee\u6539\u200b\u70b9\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <ul> <li><code>DefaultListableBeanFactory</code>\u3001<code>XmlBeanDefinitionReader</code>\uff0c\u200b\u662f\u200b\u6211\u4eec\u200b\u5728\u200b\u76ee\u524d\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u4e2d\u200b\u5bf9\u4e8e\u200b\u670d\u52a1\u200b\u529f\u80fd\u6d4b\u8bd5\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5b83\u200b\u80fd\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u4f53\u73b0\u200b\u51fa\u200b <code>Spring</code> \u200b\u662f\u200b\u5982\u4f55\u200b\u5bf9\u200b xml \u200b\u52a0\u8f7d\u200b\u4ee5\u53ca\u200b\u6ce8\u518c\u200bBean\u200b\u5bf9\u8c61\u200b\u7684\u200b\u64cd\u4f5c\u8fc7\u7a0b\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u662f\u200b\u9762\u5411\u200b <code>Spring</code> \u200b\u672c\u8eab\u200b\u7684\u200b\uff0c\u200b\u8fd8\u200b\u4e0d\u200b\u5177\u5907\u200b\u4e00\u5b9a\u200b\u7684\u200b\u6269\u5c55\u6027\u200b\u3002</li> <li>\u200b\u5c31\u200b\u50cf\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u51fa\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>Bean</code> \u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u5b8c\u6210\u200b\u5bf9\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u6269\u5c55\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u5f88\u200b\u96be\u200b\u505a\u5230\u200b\u81ea\u52a8\u5316\u200b\u5904\u7406\u200b\u3002\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u8981\u200b\u628a\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u529f\u80fd\u200b\u548c\u200b\u5bf9\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u4e0a\u4e0b\u6587\u200b\u7684\u200b\u5305\u88c5\u200b\u878d\u5408\u200b\u8d77\u6765\u200b\uff0c\u200b\u5bf9\u5916\u200b\u63d0\u4f9b\u200b\u5b8c\u6574\u200b\u7684\u200b\u670d\u52a1\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u4e3a\u4e86\u200b\u80fd\u200b\u6ee1\u8db3\u200b\u4e8e\u200b\u5728\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u4ece\u200b\u6ce8\u518c\u200b\u5230\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u6267\u884c\u200b\u7528\u6237\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u5728\u200b <code>Bean</code> \u200b\u7684\u200b\u5b9a\u4e49\u200b\u548c\u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b \u200b\u63d2\u5165\u200b\u63a5\u53e3\u7c7b\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u518d\u6709\u200b\u5916\u90e8\u200b\u53bb\u200b\u5b9e\u73b0\u200b\u81ea\u5df1\u200b\u9700\u8981\u200b\u7684\u200b\u670d\u52a1\u200b\u3002\u200b\u90a3\u4e48\u200b\u5728\u200b\u7ed3\u5408\u200b\u5bf9\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u4e0a\u4e0b\u6587\u200b\u7684\u200b\u5904\u7406\u200b\u80fd\u529b\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6ee1\u8db3\u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u6807\u200b\u9700\u6c42\u200b\u4e86\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u6ee1\u8db3\u200b\u4e8e\u200b\u5bf9\u200b Bean \u200b\u5bf9\u8c61\u200b\u6269\u5c55\u200b\u7684\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5176\u5b9e\u200b\u4e5f\u200b\u662f\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u975e\u5e38\u200b\u5177\u6709\u200b\u91cd\u91cf\u7ea7\u200b\u7684\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\uff1a<code>BeanFactoryPostProcess</code> \u200b\u548c\u200b <code>BeanPostProcessor</code>\uff0c\u200b\u4e5f\u200b\u51e0\u4e4e\u200b\u662f\u200b\u5927\u5bb6\u200b\u5728\u200b\u4f7f\u7528\u200b Spring \u200b\u6846\u67b6\u200b\u989d\u5916\u200b\u65b0\u589e\u200b\u5f00\u53d1\u200b\u81ea\u5df1\u200b\u7ec4\u5efa\u200b\u9700\u6c42\u200b\u7684\u200b\u4e24\u4e2a\u200b\u5fc5\u5907\u200b\u63a5\u53e3\u200b\u3002</li> <li><code>BeanFactoryPostProcessor</code>\uff0c\u200b\u662f\u200b\u7531\u200b Spring \u200b\u6846\u67b6\u200b\u7ec4\u5efa\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5bb9\u5668\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\uff0c\u200b\u5141\u8bb8\u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u6ce8\u518c\u200b\u540e\u200b\u4f46\u200b\u672a\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5bf9\u200b Bean \u200b\u7684\u200b\u5b9a\u4e49\u200b\u4fe1\u606f\u200b <code>BeanDefinition</code> \u200b\u6267\u884c\u200b\u4fee\u6539\u200b\u64cd\u4f5c\u200b\u3002</li> <li><code>BeanPostProcessor</code>\uff0c\u200b\u4e5f\u200b\u662f\u200b Spring \u200b\u63d0\u4f9b\u200b\u7684\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\uff0c\u200b\u4e0d\u8fc7\u200b <code>BeanPostProcessor</code> \u200b\u662f\u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u540e\u200b\u4fee\u6539\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u66ff\u6362\u200b Bean \u200b\u5bf9\u8c61\u200b\u3002\u200b\u8fd9\u90e8\u5206\u200b\u4e0e\u200b\u540e\u9762\u200b\u8981\u200b\u5b9e\u73b0\u200b\u7684\u200b AOP \u200b\u6709\u7740\u200b\u5bc6\u5207\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</li> <li>\u200b\u540c\u65f6\u200b\u5982\u679c\u200b\u53ea\u662f\u200b\u6dfb\u52a0\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u4e0d\u200b\u505a\u200b\u4efb\u4f55\u200b\u5305\u88c5\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5bf9\u4e8e\u200b\u4f7f\u7528\u8005\u200b\u6765\u8bf4\u200b\u8fd8\u662f\u200b\u975e\u5e38\u200b\u9ebb\u70e6\u200b\u7684\u200b\u3002\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u4e8e\u200b\u5f00\u53d1\u200b <code>Spring</code> \u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u64cd\u4f5c\u200b\u7c7b\u200b\uff0c\u200b\u628a\u200b\u76f8\u5e94\u200b\u7684\u200b XML \u200b\u52a0\u8f7d\u200b \u3001\u200b\u6ce8\u518c\u200b\u3001\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4ee5\u53ca\u200b\u65b0\u589e\u200b\u7684\u200b\u4fee\u6539\u200b\u548c\u200b\u6269\u5c55\u200b\u90fd\u200b\u878d\u5408\u200b\u8fdb\u53bb\u200b\uff0c\u200b\u8ba9\u200b Spring \u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u626b\u63cf\u200b\u5230\u200b\u6211\u4eec\u200b\u7684\u200b\u65b0\u589e\u200b\u670d\u52a1\u200b\uff0c\u200b\u4fbf\u4e8e\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u3002</li> </ul> <p>\u200b\u5173\u4e8e\u200b <code>BeanPostProcessor</code> \u200b\u548c\u200b <code>BeanFactoryPostProcess</code> \u200b\u7684\u200b\u5bf9\u6bd4\u200b\u603b\u7ed3\u200b\uff1a</p> \u200b\u7279\u6027\u200b BeanFactoryPostProcess BeanPostProcessor \u200b\u4f5c\u7528\u200b\u5bf9\u8c61\u200b Bean\u200b\u5b9a\u4e49\u200b \uff08BeanDefinition\uff09 Bean \u200b\u521d\u59cb\u5316\u200b\u524d\u540e\u200b \u200b\u6267\u884c\u200b\u65f6\u673a\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u914d\u7f6e\u200b\u52a0\u8f7d\u200b\u540e\u200b Bean \u200b\u521d\u59cb\u5316\u200b\u524d\u540e\u200b \u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b \u200b\u4fee\u6539\u200b Bean \u200b\u7684\u200b\u5143\u200b\u6570\u636e\u200b\uff0c\u200b\u52a8\u6001\u200b\u8c03\u6574\u200b\u914d\u7f6e\u200b \u200b\u589e\u5f3a\u200b\u6216\u200b\u4ee3\u7406\u200b Bean\uff0c\u200b\u6dfb\u52a0\u200b\u529f\u80fd\u200b \u200b\u5178\u578b\u200b\u573a\u666f\u200b - \u200b\u52a8\u6001\u200b\u4fee\u6539\u200b\u5c5e\u6027\u200b\u503c\u200b - \u200b\u5360\u4f4d\u200b\u7b26\u200b\u89e3\u6790\u200b - \u200b\u6dfb\u52a0\u200b/\u200b\u5220\u9664\u200b Bean \u200b\u5b9a\u4e49\u200b - AOP \u200b\u4ee3\u7406\u200b - \u200b\u6ce8\u89e3\u200b\u5904\u7406\u200b - \u200b\u52a8\u6001\u200b\u589e\u5f3a\u200b \u200b\u5e38\u89c1\u200b\u5b9e\u73b0\u200b\u7c7b\u200b PropertySourcesPlaceholderConfigurer AutowiredAnnotationBeanPostProcessor- AOP \u200b\u76f8\u5173\u200b <p>\u200b\u5173\u952e\u70b9\u200b\uff1a</p> <ul> <li><code>BeanFactoryPostProcessor</code> \u200b\u64cd\u4f5c\u200b\u7684\u200b\u662f\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b Bean \u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6539\u53d8\u200b\u7684\u200b\u662f\u200b Bean \u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</li> <li><code>BeanPostProcessor</code> \u200b\u64cd\u4f5c\u200b\u7684\u200b\u662f\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b Bean \u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u6539\u53d8\u200b\u7684\u200b\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-06\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 bean\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 UserDao.java\n        \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 UserService.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 common\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyBeanFactoryPostProcessor.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyBeanPostProcessor.java\n        \u2514\u2500\u2500 resources\n            \u251c\u2500\u2500 important.properties\n            \u251c\u2500\u2500 spring.xml\n            \u2514\u2500\u2500 springPostProcessor.xml\n</code></pre> <p>Spring \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u548c\u200b\u5bf9\u200bBean\u200b\u5bf9\u8c61\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u7684\u200b\u7c7b\u200b\u5173\u7cfb\u200b:</p> <p></p> <ul> <li>\u200b\u5728\u200b\u6574\u4e2a\u200b\u7c7b\u56fe\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u4f53\u73b0\u200b\u51fa\u6765\u200b\u7684\u200b\u662f\u200b\u5173\u4e8e\u200b Spring \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u4ee5\u53ca\u200b\u5bf9\u200b Bean \u200b\u5bf9\u8c61\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u4ee5\u200b\u7ee7\u627f\u200b\u4e86\u200b <code>ListableBeanFactory</code> \u200b\u63a5\u53e3\u200b\u7684\u200b <code>ApplicationContext</code> \u200b\u63a5\u53e3\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6269\u5c55\u200b\u51fa\u200b\u4e00\u7cfb\u5217\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u7684\u200b\u62bd\u8c61\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u5e76\u200b\u6700\u7ec8\u200b\u5b8c\u6210\u200b <code>ClassPathXmlApplicationContext</code> \u200b\u7c7b\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5c31\u662f\u200b\u6700\u540e\u200b\u4ea4\u7ed9\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u7c7b\u200b\u3002</li> <li>\u200b\u540c\u65f6\u200b\u5728\u200b\u5b9e\u73b0\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b\uff1a<code>BeanFactoryPostProcessor</code>\u3001<code>BeanPostProcessor</code> \u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u628a\u200b\u5173\u4e8e\u200b\u5bf9\u200b Bean \u200b\u7684\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u4e32\u8054\u200b\u8fdb\u53bb\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#2-beanfactorypostprocessor","title":"2. \u200b\u5b9a\u4e49\u200b BeanFactoryPostProcessor","text":"Java<pre><code>public interface BeanFactoryPostProcessor {\n\n    /**\n     * \u200b\u5728\u200b\u6240\u6709\u200b\u7684\u200b BeanDefinition \u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u5b9e\u4f8b\u200b\u5316\u200b Bean \u200b\u5bf9\u8c61\u200b\u4e4b\u524d\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4fee\u6539\u200b BeanDefinition \u200b\u5c5e\u6027\u200b\u7684\u200b\u673a\u5236\u200b\n     *\n     * @param beanFactory   bean\u200b\u5de5\u5382\u200b\n     */\n    void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u6709\u200b\u8fd9\u6837\u200b\u4e00\u6bb5\u200b\u63cf\u8ff0\u200b Allows for custom modification of an application context's bean definitions,adapting the bean property values of the context's underlying bean factory. \u200b\u5176\u5b9e\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u662f\u200b\u6ee1\u8db3\u200b\u4e8e\u200b\u5728\u200b\u6240\u6709\u200b\u7684\u200b BeanDefinition \u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u5b9e\u4f8b\u200b\u5316\u200b Bean \u200b\u5bf9\u8c61\u200b\u4e4b\u524d\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4fee\u6539\u200b BeanDefinition \u200b\u5c5e\u6027\u200b\u7684\u200b\u673a\u5236\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#3-beanpostprocessor","title":"3. \u200b\u5b9a\u4e49\u200b BeanPostProcessor","text":"Java<pre><code>public interface BeanPostProcessor {\n\n    /**\n     * \u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\n     *\n     * @param bean bean\u200b\u5bf9\u8c61\u200b\n     * @param beanName bean\u200b\u540d\u79f0\u200b\n     * @return \u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b Bean \u200b\u5b9e\u4f8b\u200b\n     * @throws BeansException\n     */\n    Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;\n\n    /**\n     * \u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6267\u884c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\n     *\n     * @param bean bean\u200b\u5bf9\u8c61\u200b\n     * @param beanName bean\u200b\u540d\u79f0\u200b\n     * @return \u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b Bean \u200b\u5b9e\u4f8b\u200b\n     * @throws BeansException\n     */\n    Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u6709\u200b\u8fd9\u6837\u200b\u4e00\u6bb5\u200b\u63cf\u8ff0\u200b Factory hook that allows for custom modification of new bean instances,e.g. checking for marker interfaces or wrapping them with proxies. \u200b\u4e5f\u200b\u5c31\u662f\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4fee\u6539\u200b\u65b0\u200b\u5b9e\u4f8b\u200b\u5316\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u6269\u5c55\u200b\u70b9\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u6b64\u200b\u63a5\u53e3\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\uff1a<code>postProcessBeforeInitialization</code> \u200b\u7528\u4e8e\u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u3001<code>postProcessAfterInitialization</code>\u200b\u7528\u4e8e\u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6267\u884c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#4","title":"4. \u200b\u5b9a\u4e49\u200b\u4e0a\u4e0b\u6587\u200b\u63a5\u53e3","text":"Java<pre><code>public interface ApplicationContext extends ListableBeanFactory {\n}\n</code></pre> <ul> <li><code>context</code> \u200b\u662f\u200b\u672c\u6b21\u200b\u5b9e\u73b0\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u529f\u80fd\u200b\u65b0\u589e\u200b\u7684\u200b\u670d\u52a1\u200b\u5305\u200b</li> <li><code>ApplicationContext</code>\uff0c\u200b\u7ee7\u627f\u200b\u4e8e\u200b <code>ListableBeanFactory</code>\uff0c\u200b\u4e5f\u200b\u5c31\u200b\u7ee7\u627f\u200b\u4e86\u200b\u5173\u4e8e\u200b <code>BeanFactory</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e00\u4e9b\u200b <code>getBean</code> \u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u53e6\u5916\u200b <code>ApplicationContext</code> \u200b\u672c\u8eab\u200b\u662f\u200b Central \u200b\u63a5\u53e3\u200b\uff0c\u200b\u4f46\u200b\u76ee\u524d\u200b\u8fd8\u200b\u4e0d\u200b\u9700\u8981\u200b\u6dfb\u52a0\u200b\u4e00\u4e9b\u200b\u83b7\u53d6\u200bID\u200b\u548c\u200b\u7236\u7c7b\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3002</li> </ul> Java<pre><code>public interface ConfigurableApplicationContext extends ApplicationContext {\n\n    /**\n     * \u200b\u5237\u65b0\u200b\u5bb9\u5668\u200b\n     *\n     * @throws BeansException\n     */\n    void refresh() throws BeansException;\n}\n</code></pre> <ul> <li><code>ConfigurableApplicationContext</code> \u200b\u7ee7\u627f\u200b\u81ea\u200b <code>ApplicationContext</code>\uff0c\u200b\u5e76\u200b\u63d0\u4f9b\u200b\u4e86\u200b <code>refresh</code> \u200b\u8fd9\u4e2a\u200b\u6838\u5fc3\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u6709\u200b\u770b\u8fc7\u200b\u4e00\u4e9b\u200b Spring \u200b\u6e90\u7801\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u770b\u5230\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u3002 \u200b\u63a5\u4e0b\u6765\u200b\u4e5f\u200b\u662f\u200b\u9700\u8981\u200b\u5728\u200b\u4e0a\u4e0b\u6587\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u5b8c\u6210\u200b\u5237\u65b0\u200b\u5bb9\u5668\u200b\u7684\u200b\u64cd\u4f5c\u8fc7\u7a0b\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#5","title":"5. \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u62bd\u8c61\u7c7b\u200b\u5b9e\u73b0","text":"Java<pre><code>public abstract class AbstractApplicationContext extends DefaultResourceLoader implements ConfigurableApplicationContext {\n\n    @Override\n    public void refresh() throws BeansException {\n        // 1. \u200b\u521b\u5efa\u200b BeanFactory\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b BeanDefinition\n        refreshBeanFactory();\n\n        // 2. \u200b\u83b7\u53d6\u200b beanFactory\n        ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n\n        // 3.  \u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)\n        invokeBeanFactoryPostProcessors(beanFactory);\n\n        // 4. BeanPostProcessor \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b\n        registerBeanPostProcessors(beanFactory);\n\n        // 5. \u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b\n        beanFactory.preInstantiateSingletons();\n    }\n\n\n    protected abstract void refreshBeanFactory() throws BeansException;\n\n    protected abstract ConfigurableListableBeanFactory getBeanFactory();\n\n    private void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        Map&lt;String, BeanFactoryPostProcessor&gt; beanFactoryPostProcessorMap = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);\n        for (BeanFactoryPostProcessor processor : beanFactoryPostProcessorMap.values()) {\n            processor.postProcessBeanFactory(beanFactory);\n        }\n    }\n\n    private void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        Map&lt;String, BeanPostProcessor&gt; beanPostProcessorMap = beanFactory.getBeansOfType(BeanPostProcessor.class);\n        for (BeanPostProcessor processor : beanPostProcessorMap.values()) {\n            beanFactory.addBeanPostProcessor(processor);\n        }\n    }\n\n    @Override\n    public &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; type) throws BeansException {\n        return getBeanFactory().getBeansOfType(type);\n    }\n\n    @Override\n    public String[] getBeanDefinitionNames() {\n        return getBeanFactory().getBeanDefinitionNames();\n    }\n\n    @Override\n    public &lt;T&gt; T getBean(String beanName, Class&lt;T&gt; requiredType) throws BeansException {\n        return getBeanFactory().getBean(beanName, requiredType);\n    }\n\n    @Override\n    public Object getBean(String beanName, Object... args) throws BeansException {\n        return getBeanFactory().getBean(beanName, args);\n    }\n\n    @Override\n    public Object getBean(String beanName) throws BeansException {\n        return getBeanFactory().getBean(beanName);\n    }\n}\n</code></pre> <ul> <li><code>AbstractApplicationContext</code> \u200b\u7ee7\u627f\u200b <code>DefaultResourceLoader</code> \u200b\u662f\u200b\u4e3a\u4e86\u200b\u5904\u7406\u200b <code>spring.xml</code> \u200b\u914d\u7f6e\u200b\u8d44\u6e90\u200b\u7684\u200b\u52a0\u8f7d\u200b\u3002</li> <li> <p>\u200b\u4e4b\u540e\u200b\u662f\u200b\u5728\u200b <code>refresh()</code> \u200b\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b <code>BeanFactory</code>\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b <code>BeanDefinition</code></li> <li>\u200b\u83b7\u53d6\u200b <code>BeanFactory</code></li> <li>\u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b <code>BeanFactoryPostProcessor</code> (Invoke factory processors registered as beans in the context.)</li> <li><code>BeanPostProcessor</code> \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b</li> </ol> </li> <li> <p>\u200b\u53e6\u5916\u200b\u628a\u200b\u5b9a\u4e49\u200b\u51fa\u6765\u200b\u7684\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\uff0c<code>refreshBeanFactory()</code>\u3001<code>getBeanFactory()</code> \u200b\u7531\u200b\u540e\u9762\u200b\u7684\u200b\u7ee7\u627f\u200b\u6b64\u200b\u62bd\u8c61\u7c7b\u200b\u7684\u200b\u5176\u4ed6\u200b\u62bd\u8c61\u7c7b\u200b\u5b9e\u73b0\u200b\u3002</p> </li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#6-bean","title":"6. \u200b\u83b7\u53d6\u200bBean\u200b\u5de5\u5382\u200b\u548c\u200b\u52a0\u8f7d\u200b\u8d44\u6e90","text":"Java<pre><code>public abstract class AbstractRefreshableApplicationContext extends AbstractApplicationContext {\n    private DefaultListableBeanFactory beanFactory;\n\n    @Override\n    protected void refreshBeanFactory() throws BeansException {\n        DefaultListableBeanFactory beanFactory = createBeanFactory();\n        loadBeanDefinitions(beanFactory);\n        this.beanFactory = beanFactory;\n    }\n\n    protected abstract void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);\n\n    private DefaultListableBeanFactory createBeanFactory() {\n        return new DefaultListableBeanFactory();\n    }\n\n    @Override\n    public DefaultListableBeanFactory getBeanFactory() {\n        return beanFactory;\n    }\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>refreshBeanFactory()</code> \u200b\u4e2d\u200b\u4e3b\u8981\u200b\u662f\u200b\u83b7\u53d6\u200b\u4e86\u200b <code>DefaultListableBeanFactory</code> \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4ee5\u53ca\u200b\u5bf9\u200b\u8d44\u6e90\u914d\u7f6e\u200b\u7684\u200b\u52a0\u8f7d\u200b\u64cd\u4f5c\u200b <code>loadBeanDefinitions(beanFactory)</code>\uff0c\u200b\u5728\u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b\u540e\u200b\u5373\u53ef\u200b\u5b8c\u6210\u200b\u5bf9\u200b <code>spring.xml</code> \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9a\u4e49\u200b\u548c\u200b\u6ce8\u518c\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u5305\u62ec\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u63a5\u53e3\u200b <code>BeanFactoryPostProcessor</code>\u3001<code>BeanPostProcessor</code> \u200b\u7684\u200b\u914d\u7f6e\u200b Bean \u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u4f46\u200b\u6b64\u65f6\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u8fd8\u200b\u53ea\u662f\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u7c7b\u200b\u65b9\u6cd5\u200b <code>loadBeanDefinitions(DefaultListableBeanFactory beanFactory)</code>\uff0c\u200b\u7ee7\u7eed\u200b\u7531\u200b\u5176\u4ed6\u200b\u62bd\u8c61\u7c7b\u200b\u7ee7\u627f\u200b\u5b9e\u73b0\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#7","title":"7. \u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\u5bf9\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u7684\u200b\u52a0\u8f7d","text":"Java<pre><code>public abstract class AbstractXmlApplicationContext extends AbstractRefreshableApplicationContext {\n\n    @Override\n    protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n        XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory, this);\n        String[] configLocations = getConfigLocations();\n        if (Objects.nonNull(configLocations)) {\n            beanDefinitionReader.loadBeanDefinitions(configLocations);\n        }\n    }\n\n    protected abstract String[] getConfigLocations();\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>AbstractXmlApplicationContext</code> \u200b\u62bd\u8c61\u7c7b\u200b\u7684\u200b <code>loadBeanDefinitions</code> \u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>XmlBeanDefinitionReader</code> \u200b\u7c7b\u200b\uff0c\u200b\u5904\u7406\u200b\u4e86\u200b\u5173\u4e8e\u200b <code>XML</code> \u200b\u6587\u4ef6\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u540c\u65f6\u200b\u8fd9\u91cc\u200b\u53c8\u200b\u7559\u4e0b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u7c7b\u200b\u65b9\u6cd5\u200b\uff0c<code>getConfigLocations()</code>\uff0c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4e3a\u4e86\u200b\u4ece\u200b\u5165\u53e3\u200b\u4e0a\u4e0b\u6587\u200b\u7c7b\u200b\uff0c\u200b\u62ff\u5230\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u7684\u200b\u5730\u5740\u200b\u63cf\u8ff0\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#8-classpathxmlapplicationcontext","title":"8. \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u5b9e\u73b0\u200b\u7c7b\u200b(ClassPathXmlApplicationContext)","text":"Java<pre><code>public class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext {\n    private String[] configLocations;\n\n    public ClassPathXmlApplicationContext() {\n\n    }\n\n    /**\n     * \u200b\u4ece\u200bxml\u200b\u4e2d\u200b\u52a0\u8f7d\u200b BeanDefinition\uff0c\u200b\u5e76\u200b\u5237\u65b0\u200b\u4e0a\u4e0b\u6587\u200b\n     *\n     * @param configLocation \u200b\u914d\u7f6e\u200b\u5730\u5740\u200b\n     */\n    public ClassPathXmlApplicationContext(String configLocation) {\n        this(new String[] {configLocation});\n    }\n\n    /**\n     * \u200b\u4ece\u200bxml\u200b\u4e2d\u200b\u52a0\u8f7d\u200b BeanDefinition\uff0c\u200b\u5e76\u200b\u5237\u65b0\u200b\u4e0a\u4e0b\u6587\u200b\n     *\n     * @param configLocations \u200b\u914d\u7f6e\u200b\u5730\u5740\u200b\n     */\n    public ClassPathXmlApplicationContext(String[] configLocations) {\n        this.configLocations = configLocations;\n        refresh();\n    }\n\n    @Override\n    protected String[] getConfigLocations() {\n        return this.configLocations;\n    }\n}\n</code></pre> <ul> <li><code>ClassPathXmlApplicationContext</code>\uff0c\u200b\u662f\u200b\u5177\u4f53\u200b\u5bf9\u5916\u200b\u7ed9\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u5728\u200b\u7ee7\u627f\u200b\u4e86\u200b <code>AbstractXmlApplicationContext</code> \u200b\u4ee5\u53ca\u200b\u5c42\u5c42\u200b\u62bd\u8c61\u7c7b\u200b\u7684\u200b\u529f\u80fd\u200b\u5206\u79bb\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u5728\u200b\u6b64\u7c7b\u200b <code>ClassPathXmlApplicationContext</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u5c31\u200b\u7b80\u5355\u200b\u591a\u200b\u4e86\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u200b\u7ee7\u627f\u200b\u62bd\u8c61\u7c7b\u200b\u4e2d\u200b\u65b9\u6cd5\u200b\u7684\u200b\u8c03\u7528\u200b\u548c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#9-bean","title":"9. \u200b\u5728\u200bBean\u200b\u521b\u5efa\u200b\u65f6\u200b\u5b8c\u6210\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n    /**\n     * \u200b\u521d\u59cb\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u9ed8\u8ba4\u200bcglib\n     */\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    /**\n     * \u200b\u521d\u59cb\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n     * @param beanName          bean\u200b\u540d\u79f0\u200b\n     * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n     * @param args              \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n     * @return bean\u200b\u5bf9\u8c61\u200b\n     */\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean;\n        try {\n            // \u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b\n            applyPropertyValues(beanDefinition, bean, beanName);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n        // \u200b\u6dfb\u52a0\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n    /**\n     * \u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n     * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n     * @param beanName          bean\u200b\u540d\u79f0\u200b\n     * @param args              \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n     * @return bean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n     */\n    protected Object createBeanInstance(BeanDefinition beanDefinition, String beanName, Object[] args) {\n        Constructor constructorToUse = null;\n        Class beanClass = beanDefinition.getBeanClass();\n        Constructor[] declaredConstructors = beanClass.getDeclaredConstructors();\n        for (Constructor ctor : declaredConstructors) {\n            // \u200b\u5224\u65ad\u200b\uff1a\u200b\u53c2\u6570\u200b\u4e0d\u200b\u4e3a\u200bnull\uff0c\u200b\u4e14\u200b\u53c2\u6570\u200b\u4e2a\u6570\u200b == \u200b\u6784\u9020\u200b\u5668\u200b\u53c2\u6570\u200b\u4e2a\u6570\u200b\n            // \u200b\u8fd9\u91cc\u200b\u5176\u5b9e\u200b\u662f\u200b\u7b80\u5316\u200b\u5224\u65ad\u200b\uff0c\u200b\u5e76\u672a\u200b\u5224\u65ad\u200b\u53c2\u6570\u200b\u7c7b\u578b\u200b\u662f\u5426\u200b\u4e00\u81f4\u200b\n            if (Objects.nonNull(args) &amp;&amp; ctor.getParameterTypes().length == args.length) {\n                constructorToUse = ctor;\n                break;\n            }\n        }\n        // \u200b\u8c03\u7528\u200b\u521d\u59cb\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u5b9e\u4f8b\u200b\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n        return getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);\n    }\n\n    /**\n     * \u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b\n     * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n     * @param bean              bean\u200b\u5bf9\u8c61\u200b\n     * @param beanName          bean\u200b\u540d\u79f0\u200b\n     */\n    public void applyPropertyValues(BeanDefinition beanDefinition, Object bean, String beanName) {\n        try {\n            PropertyValues propertyValues = beanDefinition.getPropertyValues();\n            for (PropertyValue propertyValue : propertyValues.getPropertyValues()) {\n                String name = propertyValue.getName();\n                Object value = propertyValue.getValue();\n\n                // A \u200b\u4f9d\u8d56\u200b B\uff0c\u200b\u9012\u5f52\u200b\u83b7\u53d6\u200b B \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5bf9\u8c61\u200b\n                if (value instanceof BeanReference) {\n                    BeanReference beanReference = (BeanReference) value;\n                    value = getBean(beanReference.getBeanName());\n                }\n\n                BeanUtil.setFieldValue(bean, name, value);\n            }\n        } catch (Exception e) {\n            throw new BeansException(\"Error setting property values\uff1a\" + beanName);\n        }\n    }\n\n    public InstantiationStrategy getInstantiationStrategy() {\n        return instantiationStrategy;\n    }\n\n    public void setInstantiationStrategy(InstantiationStrategy instantiationStrategy) {\n        this.instantiationStrategy = instantiationStrategy;\n    }\n\n    private Object initializeBean(String beanName, Object bean, BeanDefinition beanDefinition) {\n        // 1. \u200b\u6267\u884c\u200b BeanPostProcessor Before \u200b\u5904\u7406\u200b\n        Object wrappedBean = applyBeanPostProcessorsBeforeInitialization(bean, beanName);\n\n        // TODO: \u200b\u5f85\u200b\u5b8c\u6210\u200b\n        invokeInitMethods(beanName, wrappedBean, beanDefinition);\n\n        // 2. \u200b\u6267\u884c\u200b BeanPostProcessor After \u200b\u5904\u7406\u200b\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(bean, beanName);\n        return wrappedBean;\n    }\n\n    private void invokeInitMethods(String beanName, Object wrappedBean, BeanDefinition beanDefinition) {\n\n    }\n\n    @Override\n    public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessBeforeInitialization(result, beanName);\n            if (Objects.isNull(current)) return result;\n            result = current;\n        }\n        return result;\n    }\n\n    @Override\n    public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessAfterInitialization(result, beanName);\n            if (Objects.isNull(current)) return result;\n            result = current;\n        }\n        return result;\n    }\n}\n</code></pre> <ul> <li>\u200b\u5b9e\u73b0\u200b <code>BeanPostProcessor</code> \u200b\u63a5\u53e3\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u6d89\u53ca\u200b\u5230\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\uff0c<code>postProcessBeforeInitialization</code>\u3001<code>postProcessAfterInitialization</code>\uff0c\u200b\u5206\u522b\u200b\u4f5c\u7528\u200b\u4e8e\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u524d\u540e\u200b\u7684\u200b\u989d\u5916\u200b\u5904\u7406\u200b\u3002</li> <li>\u200b\u4e5f\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u5728\u200b\u521b\u5efa\u200b Bean \u200b\u5bf9\u8c61\u200b\u65f6\u200b\uff0c\u200b\u5728\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>initializeBean(beanName, bean, beanDefinition);</code> \u200b\u64cd\u4f5c\u200b\u3002\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u64cd\u4f5c\u200b\u4e3b\u8981\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u4e8e\u200b\u65b9\u6cd5\u200b <code>applyBeanPostProcessorsBeforeInitialization</code>\u3001<code>applyBeanPostProcessorsAfterInitialization</code> \u200b\u7684\u200b\u4f7f\u7528\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u9700\u8981\u200b\u63d0\u200b\u4e00\u4e0b\u200b\uff0c<code>applyBeanPostProcessorsBeforeInitialization</code>\u3001<code>applyBeanPostProcessorsAfterInitialization</code> \u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5728\u200b\u63a5\u53e3\u7c7b\u200b <code>AutowireCapableBeanFactory</code> \u200b\u4e2d\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#4_1","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200b Bean","text":"Java<pre><code>public class UserDao {\n\n    private static Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n\n    static {\n        hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    }\n\n    public String queryUserName(String uId) {\n        return hashMap.get(uId);\n    }\n\n}\n</code></pre> Java<pre><code>public class UserService {\n\n    private String uId;\n    private String company;\n    private String location;\n    private UserDao userDao;\n\n    public String queryUserInfo() {\n        return userDao.queryUserName(uId) + \",\" + company + \",\" + location;\n    }\n\n    public String getuId() {\n        return uId;\n    }\n\n    public void setuId(String uId) {\n        this.uId = uId;\n    }\n\n    public String getCompany() {\n        return company;\n    }\n\n    public void setCompany(String company) {\n        this.company = company;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    public UserDao getUserDao() {\n        return userDao;\n    }\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#2-beanpostprocessor-beanfactorypostprocessor","title":"2. \u200b\u5b9e\u73b0\u200b BeanPostProcessor \u200b\u548c\u200b BeanFactoryPostProcessor","text":"Java<pre><code>public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\n        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(\"userService\");\n        PropertyValues propertyValues = beanDefinition.getPropertyValues();\n\n        propertyValues.addPropertyValue(new PropertyValue(\"company\", \"\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5b57\u8282\u200b\u8df3\u52a8\u200b\"));\n    }\n\n}\n</code></pre> Java<pre><code>public class MyBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        if (\"userService\".equals(beanName)) {\n            UserService userService = (UserService) bean;\n            userService.setLocation(\"\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5317\u4eac\u200b\");\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#3_1","title":"3. \u200b\u914d\u7f6e\u6587\u4ef6","text":"<p>\u200b\u57fa\u7840\u200b\u914d\u7f6e\u200b\uff0c\u200b\u65e0\u200bBeanFactoryPostProcessor\u3001BeanPostProcessor\uff0c\u200b\u5b9e\u73b0\u200b\u7c7b\u200b</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userDao\" class=\"test.bean.UserDao\"/&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"company\" value=\"\u200b\u817e\u8baf\u200b\"/&gt;\n        &lt;property name=\"location\" value=\"\u200b\u6df1\u5733\u200b\"/&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <p>\u200b\u589e\u5f3a\u200b\u914d\u7f6e\u200b\uff0c\u200b\u6709\u200bBeanFactoryPostProcessor\u3001BeanPostProcessor\uff0c\u200b\u5b9e\u73b0\u200b\u7c7b\u200b</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userDao\" class=\"test.bean.UserDao\"/&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"company\" value=\"\u200b\u817e\u8baf\u200b\"/&gt;\n        &lt;property name=\"location\" value=\"\u200b\u6df1\u5733\u200b\"/&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean class=\"test.common.MyBeanPostProcessor\"/&gt;\n    &lt;bean class=\"test.common.MyBeanFactoryPostProcessor\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#4_2","title":"4. \u200b\u4e0d\u7528\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587","text":"Java<pre><code>@Test\npublic void test_BeanFactoryPostProcessorAndBeanPostProcessor(){\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n\n    // 2. \u200b\u8bfb\u53d6\u200b\u914d\u7f6e\u6587\u4ef6\u200b&amp;\u200b\u6ce8\u518c\u200bBean\n    XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n    reader.loadBeanDefinitions(\"classpath:spring.xml\");\n\n    // 3. BeanDefinition \u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b &amp; Bean\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4fee\u6539\u200b BeanDefinition \u200b\u7684\u200b\u5c5e\u6027\u200b\u503c\u200b\n    MyBeanFactoryPostProcessor beanFactoryPostProcessor = new MyBeanFactoryPostProcessor();\n    beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);\n\n    // 4. Bean\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u540e\u200b\uff0c\u200b\u4fee\u6539\u200b Bean \u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\n    MyBeanPostProcessor beanPostProcessor = new MyBeanPostProcessor();\n    beanFactory.addBeanPostProcessor(beanPostProcessor);\n\n    // 5. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n    UserService userService = beanFactory.getBean(\"userService\", UserService.class);\n    String result = userService.queryUserInfo();\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n}\n</code></pre> <ul> <li><code>DefaultListableBeanFactory</code> \u200b\u521b\u5efa\u200b <code>beanFactory</code> \u200b\u5e76\u200b\u4f7f\u7528\u200b <code>XmlBeanDefinitionReader</code> \u200b\u52a0\u8f7d\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u719f\u6089\u200b\u7684\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u5bf9\u200b <code>MyBeanFactoryPostProcessor</code> \u200b\u548c\u200b <code>MyBeanPostProcessor</code> \u200b\u7684\u200b\u5904\u7406\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5728\u200bBeanDefinition \u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b &amp; Bean\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4fee\u6539\u200b BeanDefinition \u200b\u7684\u200b\u5c5e\u6027\u200b\u503c\u200b\uff0c\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5728\u200bBean\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u540e\u200b\uff0c\u200b\u4fee\u6539\u200b Bean \u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u3002</li> </ul> result<pre><code>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b,\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5b57\u8282\u200b\u8df3\u52a8\u200b,\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5317\u4eac\u200b\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#5_1","title":"5. \u200b\u4f7f\u7528\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587","text":"Java<pre><code>@Test\npublic void test_xml() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:springPostProcessor.xml\");\n\n    // 2. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n    UserService userService = applicationContext.getBean(\"userService\", UserService.class);\n    String result = userService.queryUserInfo();\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n}\n</code></pre> <ul> <li>\u200b\u53e6\u5916\u200b\u4f7f\u7528\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b <code>ClassPathXmlApplicationContext</code> \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u7c7b\u200b\uff0c\u200b\u518d\u200b\u64cd\u4f5c\u200b\u8d77\u6765\u200b\u5c31\u200b\u65b9\u4fbf\u200b\u591a\u200b\u4e86\u200b\uff0c\u200b\u8fd9\u624d\u200b\u662f\u200b\u9762\u5411\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u5728\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u4e00\u6b65\u200b\u628a\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4ea4\u7ed9\u200b <code>ClassPathXmlApplicationContext</code>\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u9700\u8981\u200b\u7ba1\u7406\u200b\u4e00\u4e9b\u200b\u81ea\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\u7684\u200b Spring \u200b\u63a5\u53e3\u200b\u7684\u200b\u7c7b\u200b\u3002</li> </ul> result<pre><code>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b,\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5b57\u8282\u200b\u8df3\u52a8\u200b,\u200b\u6539\u4e3a\u200b\uff1a\u200b\u5317\u4eac\u200b\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#5_2","title":"5. \u200b\u5168\u200b\u6d41\u7a0b\u200b\u68b3\u7406","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#1-classpathxmlapplicationcontext","title":"1. \u200b\u521d\u59cb\u5316\u200b ClassPathXmlApplicationContext","text":"<p>Java<pre><code>ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:springPostProcessor.xml\");\n</code></pre> \u200b\u5728\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u8c03\u7528\u200brefresh\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5237\u65b0\u200b\u4e0a\u4e0b\u6587\u200b\uff1a</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a<code>com.iflove.simplespring.context.support.ClassPathXmlApplicationContext#ClassPathXmlApplicationContext(java.lang.String[])</code></p> Java<pre><code>/**\n * \u200b\u4ece\u200bxml\u200b\u4e2d\u200b\u52a0\u8f7d\u200b BeanDefinition\uff0c\u200b\u5e76\u200b\u5237\u65b0\u200b\u4e0a\u4e0b\u6587\u200b\n *\n * @param configLocations \u200b\u914d\u7f6e\u200b\u5730\u5740\u200b\n */\npublic ClassPathXmlApplicationContext(String[] configLocations) {\n    this.configLocations = configLocations;\n    refresh();\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#2-refresh","title":"2. refresh","text":"<p>\u200b\u5237\u65b0\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u4e3b\u8981\u200b\u64cd\u4f5c\u200b\u6709\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b BeanFactory\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b BeanDefinition</li> <li>\u200b\u83b7\u53d6\u200b beanFactory</li> <li>\u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b BeanFactoryPostProcessor</li> <li>BeanPostProcessor \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b</li> </ol> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.AbstractApplicationContext#refresh</code></p> Java<pre><code>@Override\npublic void refresh() throws BeansException {\n    // 1. \u200b\u521b\u5efa\u200b BeanFactory\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b BeanDefinition\n    refreshBeanFactory();\n\n    // 2. \u200b\u83b7\u53d6\u200b beanFactory\n    ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n\n    // 3.  \u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)\n    invokeBeanFactoryPostProcessors(beanFactory);\n\n    // 4. BeanPostProcessor \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b\n    registerBeanPostProcessors(beanFactory);\n\n    // 5. \u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b\n    beanFactory.preInstantiateSingletons();\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#3-refreshbeanfactory","title":"3. refreshBeanFactory","text":"<p>\u200b\u521b\u5efa\u200b BeanFactory\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b BeanDefinition</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.AbstractRefreshableApplicationContext#refreshBeanFactory</code></p> Java<pre><code>@Override\nprotected void refreshBeanFactory() throws BeansException {\n    DefaultListableBeanFactory beanFactory = createBeanFactory();\n    loadBeanDefinitions(beanFactory);\n    this.beanFactory = beanFactory;\n}\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u62bd\u8c61\u7c7b\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>DefaultListableBeanFactory</code> \u200b\u7684\u200b\u83b7\u53d6\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b <code>loadBeanDefinitions</code> \u200b\u65b9\u6cd5\u200b\u62bd\u8c61\u200b\uff0c\u200b\u4ea4\u7ed9\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u5b9e\u73b0\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#4-loadbeandefinitions","title":"4. loadBeanDefinitions","text":"<p>\u200b\u52a0\u8f7d\u200b BeanDefinition\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b BeanDefinition \u200b\u5305\u62ec\u200b \u200b\u57fa\u672c\u200b Bean \u200b\u5b9a\u4e49\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u5305\u62ec\u200b BeanPostProcessor \u200b\u548c\u200b BeanFactoryPostProcessor \u200b\u7684\u200b\u5b9a\u4e49\u200b\u3002</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.AbstractXmlApplicationContext#loadBeanDefinitions</code></p> Java<pre><code> @Override\nprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory, this);\n    String[] configLocations = getConfigLocations();\n    if (Objects.nonNull(configLocations)) {\n        beanDefinitionReader.loadBeanDefinitions(configLocations);\n    }\n}\n</code></pre> <p>\u200b\u62bd\u8c61\u200b <code>getConfigLocations</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4ea4\u7ed9\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u5b9e\u73b0\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#5-getconfiglocations","title":"5. getConfigLocations","text":"<p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.ClassPathXmlApplicationContext#getConfigLocations</code></p> Java<pre><code>@Override\nprotected String[] getConfigLocations() {\n    return this.configLocations;\n}\n</code></pre> <p>\u200b\u83b7\u53d6\u200b\u5728\u200b <code>ClassPathXmlApplicationContext</code> \u200b\u521d\u59cb\u5316\u200b\u4f20\u5165\u200b\u7684\u200b configLocations \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#6-getbeanfactory","title":"6. getBeanFactory","text":"<p>\u200b\u83b7\u53d6\u200b BeanFactory</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.AbstractRefreshableApplicationContext#getBeanFactory</code></p> Java<pre><code>@Override\npublic DefaultListableBeanFactory getBeanFactory() {\n    return beanFactory;\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#7-invokebeanfactorypostprocessors","title":"7. invokeBeanFactoryPostProcessors","text":"<p>\u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)</p> <p><code>com.iflove.simplespring.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors</code></p> Java<pre><code>private void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n    Map&lt;String, BeanFactoryPostProcessor&gt; beanFactoryPostProcessorMap = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);\n    for (BeanFactoryPostProcessor processor : beanFactoryPostProcessorMap.values()) {\n        processor.postProcessBeanFactory(beanFactory);\n    }\n}\n</code></pre> <p>\u200b\u8c03\u7528\u200b BeanFactoryPostProcessor \u200b\u5b9a\u4e49\u200b\u7684\u200b postProcessBeanFactory \u200b\u65b9\u6cd5\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#8-registerbeanpostprocessors","title":"8. registerBeanPostProcessors","text":"<p>BeanPostProcessor \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.context.support.AbstractApplicationContext#registerBeanPostProcessors</code></p> Java<pre><code>private void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n    Map&lt;String, BeanPostProcessor&gt; beanPostProcessorMap = beanFactory.getBeansOfType(BeanPostProcessor.class);\n    for (BeanPostProcessor processor : beanPostProcessorMap.values()) {\n        beanFactory.addBeanPostProcessor(processor);\n    }\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#9-preinstantiatesingletons","title":"9. preInstantiateSingletons","text":"<p>\u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code></p> Java<pre><code>@Override\npublic void preInstantiateSingletons() throws BeansException {\n    beanDefinitionMap.keySet().forEach(this::getBean);\n}\n</code></pre> <p>\u200b\u8c03\u7528\u200b getBean \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u81ea\u52a8\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#10-getbean","title":"10. getBean","text":"<p>\u200b\u5728\u200b <code>AbstractBeanFactory</code> \u200b\u91cd\u8f7d\u200b\u7684\u200b <code>getBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u6700\u7ec8\u200b\u90fd\u200b\u4f1a\u200b\u8fdb\u5165\u200b <code>doGetBean</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u800c\u200b\u56e0\u4e3a\u200b\u662f\u200b\u7b2c\u4e00\u6b21\u200b\u5b9e\u4f8b\u200b\u5316\u200b\uff0c<code>getSingleton</code> \u200b\u65b9\u6cd5\u200b\u4e00\u5b9a\u200b\u662f\u200b\u65e0\u6cd5\u200b\u83b7\u53d6\u200b\u5230\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6545\u200b\u6700\u7ec8\u200b\u7ee7\u7eed\u200b\u8c03\u7528\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.beans.factory.support.AbstractBeanFactory#doGetBean</code></p> Java<pre><code>/**\n * \u200b\u83b7\u53d6\u200bbean\u200b\u5bf9\u8c61\u200b\n * @param name  bean\u200b\u540d\u79f0\u200b\n * @param args  \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n * @return      bean\u200b\u5bf9\u8c61\u200b\n * @param &lt;T&gt;   bean\u200b\u5bf9\u8c61\u200b\u7c7b\u578b\u200b\n */\nprotected &lt;T&gt; T doGetBean(final String name, final Object[] args) {\n    // \u200b\u83b7\u53d6\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\n    Object bean = getSingleton(name);\n    // \u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u8bf4\u660e\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\n    if (Objects.nonNull(bean)) {\n        return (T) bean;\n    }\n\n    // \u200b\u521d\u59cb\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n    BeanDefinition beanDefinition = getBeanDefinition(name);\n    return (T) createBean(name, beanDefinition, args);\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#11-createbean","title":"11. createBean","text":"<p>\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7c7b\u4e2d\u200b\u7684\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u505a\u200b\u4e86\u200b\u4ee5\u4e0b\u200b 4 \u200b\u4ef6\u200b\u4e8b\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b</li> <li>\u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b</li> <li>\u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u6dfb\u52a0\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b</li> </ol> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean</code></p> Java<pre><code>/**\n * \u200b\u521d\u59cb\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n * @param beanName          bean\u200b\u540d\u79f0\u200b\n * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n * @param args              \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n * @return bean\u200b\u5bf9\u8c61\u200b\n */\n@Override\nprotected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n    Object bean;\n    try {\n        // \u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n        bean = createBeanInstance(beanDefinition, beanName, args);\n        // \u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b\n        applyPropertyValues(beanDefinition, bean, beanName);\n        // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n        bean = initializeBean(beanName, bean, beanDefinition);\n    } catch (Exception e) {\n        throw new BeansException(\"Instantiation of bean failed\", e);\n    }\n    // \u200b\u6dfb\u52a0\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\n    addSingleton(beanName, bean);\n    return bean;\n}\n</code></pre> <p>\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b <code>initializeBean</code> \u200b\u65b9\u6cd5\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#12-initializebean","title":"12. initializeBean","text":"<p>\u200b\u5728\u200b <code>initializeBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u505a\u200b\u4e86\u200b\u4ee5\u4e0b\u200b3\u200b\u4ef6\u200b\u4e8b\u200b\uff1a</p> <ol> <li>\u200b\u6267\u884c\u200b BeanPostProcessor Before \u200b\u5904\u7406\u200b</li> <li>\u200b\u8c03\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u6267\u884c\u200b BeanPostProcessor After \u200b\u5904\u7406\u200b</li> </ol> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean</code></p> Java<pre><code>private Object initializeBean(String beanName, Object bean, BeanDefinition beanDefinition) {\n    // 1. \u200b\u6267\u884c\u200b BeanPostProcessor Before \u200b\u5904\u7406\u200b\n    Object wrappedBean = applyBeanPostProcessorsBeforeInitialization(bean, beanName);\n\n    // TODO: \u200b\u5f85\u200b\u5b8c\u6210\u200b\n    invokeInitMethods(beanName, wrappedBean, beanDefinition);\n\n    // 2. \u200b\u6267\u884c\u200b BeanPostProcessor After \u200b\u5904\u7406\u200b\n    wrappedBean = applyBeanPostProcessorsAfterInitialization(bean, beanName);\n    return wrappedBean;\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#13-beanpostprocessor","title":"13. \u200b\u6267\u884c\u200bBeanPostProcessor","text":"<p>\u200b\u5728\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b BeanPostProcessor \u200b\u5b9e\u73b0\u200b\u5728\u200b Bean\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u65f6\u200b \u200b\u4fee\u6539\u200b Bean \u200b\u7684\u200b\u76f8\u5173\u200b\u5c5e\u6027\u200b</p> <p>\u200b\u4ee3\u7801\u200b\u4f4d\u7f6e\u200b\uff1a <code>com.iflove.simplespring.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization</code></p> Java<pre><code>/**\n * \u200b\u6267\u884c\u200b BeanPostProcessors \u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u7684\u200b postProcessBeforeInitialization \u200b\u65b9\u6cd5\u200b\n *\n * @param existingBean\n * @param beanName\n * @return\n * @throws BeansException\n */\n@Override\npublic Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {\n    Object result = existingBean;\n    for (BeanPostProcessor processor : getBeanPostProcessors()) {\n        Object current = processor.postProcessBeforeInitialization(result, beanName);\n        if (Objects.isNull(current)) return result;\n        result = current;\n    }\n    return result;\n}\n\n/**\n * \u200b\u6267\u884c\u200b BeanPostProcessors \u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u7684\u200b postProcessorsAfterInitialization \u200b\u65b9\u6cd5\u200b\n *\n * @param existingBean\n * @param beanName\n * @return\n * @throws BeansException\n */\n@Override\npublic Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException {\n    Object result = existingBean;\n    for (BeanPostProcessor processor : getBeanPostProcessors()) {\n        Object current = processor.postProcessAfterInitialization(result, beanName);\n        if (Objects.isNull(current)) return result;\n        result = current;\n    }\n    return result;\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-06/#_2","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/sv0H1NAuO3s90HC6QpjP5g</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/","title":"\u5411\u200b\u865a\u62df\u673a\u200b\u6ce8\u518c\u200b\u94a9\u5b50\u200b\uff0c\u200b\u5b9e\u73b0\u200bBean\u200b\u5bf9\u8c61\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5","text":"<p> \u200b\u7ea6\u200b 2139 \u200b\u4e2a\u200b\u5b57\u200b  279 \u200b\u884c\u200b\u4ee3\u7801\u200b  3 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 11 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u7684\u200b\u7c7b\u200b\u521b\u5efa\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4ea4\u7ed9\u200b Spring \u200b\u5bb9\u5668\u200b\u7ba1\u7406\u200b\u4ee5\u540e\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5bf9\u8c61\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u8d4b\u4e88\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u4f7f\u7528\u200b\u80fd\u529b\u200b\u3002\u200b\u5c31\u200b\u50cf\u200b\u6211\u4eec\u200b\u5728\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u5df2\u7ecf\u200b\u7ed9\u200b\u7c7b\u200b\u5bf9\u8c61\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4fee\u6539\u200b\u6ce8\u518c\u200bBean\u200b\u5b9a\u4e49\u200b\u672a\u200b\u5b9e\u4f8b\u200b\u5316\u524d\u200b\u7684\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u4fee\u6539\u200b\u548c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u989d\u5916\u200b\u80fd\u529b\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5bf9\u200b\u73b0\u6709\u200b\u5de5\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u7c7b\u200b\u5bf9\u8c61\u200b\u505a\u200b\u76f8\u5e94\u200b\u7684\u200b\u6269\u5c55\u200b\u5904\u7406\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\u9664\u6b64\u4e4b\u5916\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5e0c\u671b\u200b\u53ef\u4ee5\u200b\u5728\u200b Bean \u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u6267\u884c\u200b\u4e00\u4e9b\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6bd4\u5982\u200b\u5e2e\u200b\u6211\u4eec\u200b\u505a\u200b\u4e00\u4e9b\u200b\u6570\u636e\u200b\u7684\u200b\u52a0\u8f7d\u200b\u6267\u884c\u200b\uff0c\u200b\u94fe\u63a5\u200b\u6ce8\u518c\u200b\u4e2d\u5fc3\u200b\u66b4\u6f0f\u200bRPC\u200b\u63a5\u53e3\u200b\u4ee5\u53ca\u200b\u5728\u200bWeb\u200b\u7a0b\u5e8f\u200b\u5173\u95ed\u200b\u65f6\u200b\u6267\u884c\u200b\u94fe\u63a5\u200b\u65ad\u5f00\u200b\uff0c\u200b\u5185\u5b58\u200b\u9500\u6bc1\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u3002\u200b\u5982\u679c\u8bf4\u200b\u6ca1\u6709\u200bSpring\u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6784\u9020\u51fd\u6570\u200b\u3001\u200b\u9759\u6001\u65b9\u6cd5\u200b\u4ee5\u53ca\u200b\u624b\u52a8\u200b\u8c03\u7528\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u6837\u200b\u7684\u200b\u5904\u7406\u200b\u65b9\u5f0f\u200b\u7ec8\u7a76\u200b\u4e0d\u5982\u200b\u628a\u200b\u8bf8\u5982\u6b64\u7c7b\u200b\u7684\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u4ea4\u7ed9\u200b Spring \u200b\u5bb9\u5668\u200b\u6765\u200b\u7ba1\u7406\u200b\u66f4\u52a0\u200b\u5408\u9002\u200b\u3002 \u200b\u56e0\u6b64\u200b\u4f60\u200b\u4f1a\u200b\u770b\u5230\u200b\u5230\u200b spring.xml \u200b\u4e2d\u6709\u200b\u5982\u4e0b\u200b\u64cd\u4f5c\u200b\uff1a</p> <p></p> <p>\u200b\u9700\u8981\u200b\u6ee1\u8db3\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b xml \u200b\u4e2d\u200b\u914d\u7f6e\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5904\u7406\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6211\u4eec\u200b\u5728\u200b\u4f7f\u7528\u200b Spring \u200b\u65f6\u200b\u7528\u5230\u200b\u7684\u200b <code>InitializingBean</code>, <code>DisposableBean</code> \u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\u3002-\u200b\u5176\u5b9e\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6709\u200b\u4e00\u79cd\u200b\u662f\u200b\u6ce8\u89e3\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5904\u7406\u200b\u521d\u59cb\u5316\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u76ee\u524d\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5b9e\u73b0\u200b\u5230\u200b\u6ce8\u89e3\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c\u200b\u540e\u7eed\u200b\u518d\u200b\u5b8c\u5584\u200b\u6b64\u7c7b\u200b\u529f\u80fd\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u53ef\u80fd\u200b\u9762\u5bf9\u200b\u50cf\u200b Spring \u200b\u8fd9\u6837\u200b\u5e9e\u5927\u200b\u7684\u200b\u6846\u67b6\u200b\uff0c\u200b\u5bf9\u5916\u200b\u66b4\u9732\u200b\u7684\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u4f7f\u7528\u200b\u6216\u8005\u200bxml\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5b8c\u6210\u200b\u7684\u200b\u4e00\u7cfb\u5217\u200b\u6269\u5c55\u6027\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u90fd\u200b\u8ba9\u200b Spring \u200b\u6846\u67b6\u200b\u770b\u4e0a\u53bb\u200b\u5f88\u200b\u795e\u79d8\u200b\u3002\u200b\u5176\u5b9e\u200b\u5bf9\u4e8e\u200b\u8fd9\u6837\u200b\u5728\u200b Bean \u200b\u5bb9\u5668\u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u989d\u5916\u200b\u6dfb\u52a0\u200b\u7684\u200b\u5904\u7406\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u65e0\u975e\u200b\u5c31\u662f\u200b\u9884\u5148\u200b\u6267\u884c\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5b9a\u4e49\u200b\u597d\u200b\u7684\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\u6216\u8005\u200b\u662f\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b\u7c7b\u4e2d\u200bxml\u200b\u4e2d\u200b\u914d\u7f6e\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6700\u7ec8\u200b\u4f60\u200b\u53ea\u8981\u200b\u6309\u7167\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b Spring \u200b\u5bb9\u5668\u200b\u5728\u200b\u5904\u7406\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u8c03\u7528\u200b\u800c\u5df2\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u5728\u200b spring.xml \u200b\u914d\u7f6e\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>init-method</code>\u3001<code>destroy-method</code> \u200b\u4e24\u4e2a\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u628a\u200b\u6ce8\u89e3\u200b\u914d\u7f6e\u200b\u4e00\u5e76\u200b\u5b9a\u4e49\u200b\u5230\u200b <code>BeanDefinition</code> \u200b\u7684\u200b\u5c5e\u6027\u200b\u5f53\u4e2d\u200b\u3002\u200b\u8fd9\u6837\u200b\u5728\u200b <code>initializeBean</code> \u200b\u521d\u59cb\u5316\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5de5\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u53cd\u5c04\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6765\u200b\u8c03\u7528\u200b\u914d\u7f6e\u200b\u5728\u200b Bean \u200b\u5b9a\u4e49\u200b\u5c5e\u6027\u200b\u5f53\u4e2d\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4fe1\u606f\u200b\u4e86\u200b\u3002\u200b\u53e6\u5916\u200b\u5982\u679c\u200b\u662f\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u90a3\u4e48\u200b\u76f4\u63a5\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b Bean \u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u5bf9\u5e94\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5373\u53ef\u200b\uff0c<code>((InitializingBean) bean).afterPropertiesSet()</code>\uff0c\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u8fbe\u5230\u200b\u7684\u200b\u6548\u679c\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\u3002</li> <li>\u200b\u9664\u4e86\u200b\u5728\u200b\u521d\u59cb\u5316\u200b\u505a\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5916\u200b\uff0c<code>destroy-method</code> \u200b\u548c\u200b <code>DisposableBean</code> \u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u5728\u200b Bean \u200b\u5bf9\u8c61\u200b\u521d\u59cb\u5316\u200b\u5b8c\u6210\u200b\u9636\u6bb5\u200b\uff0c\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u7684\u200b\u4fe1\u606f\u200b\u5230\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u7c7b\u4e2d\u200b\u7684\u200b <code>disposableBeans</code> \u200b\u5c5e\u6027\u200b\u91cc\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e3a\u4e86\u200b\u540e\u7eed\u200b\u7edf\u4e00\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002\u200b\u8fd9\u91cc\u200b\u8fd8\u6709\u200b\u4e00\u6bb5\u200b\u9002\u914d\u5668\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b\u548c\u200b\u63a5\u53e3\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\uff0c\u200b\u662f\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u3002\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u9002\u914d\u5668\u200b\u8fdb\u884c\u200b\u5305\u88c5\u200b\uff0c\u200b\u4e0b\u6587\u200b\u4ee3\u7801\u200b\u8bb2\u89e3\u200b\u4e2d\u200b\u53c2\u8003\u200b DisposableBeanAdapter \u200b\u7684\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b-\u200b\u5173\u4e8e\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u9700\u8981\u200b\u5728\u200b\u865a\u62df\u673a\u200b\u6267\u884c\u200b\u5173\u95ed\u200b\u4e4b\u524d\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u91cc\u200b\u9700\u8981\u200b\u7528\u5230\u200b\u4e00\u4e2a\u200b\u6ce8\u518c\u200b\u94a9\u5b50\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5982\u200b\uff1a<code>Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; System.out.println(\"close\uff01\")));</code> \u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u53e6\u5916\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u624b\u52a8\u200b\u8c03\u7528\u200b <code>ApplicationContext.close</code> \u200b\u65b9\u6cd5\u200b\u5173\u95ed\u200b\u5bb9\u5668\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-07\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 bean\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 UserDao.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 UserService.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>Spring \u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u548c\u200b\u5bf9\u200bBean\u200b\u5bf9\u8c61\u200b\u6269\u5c55\u200b\u673a\u5236\u200b\u7684\u200b\u7c7b\u200b\u5173\u7cfb\u200b</p> <p></p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6574\u4e2a\u200b\u7c7b\u56fe\u200b\u7ed3\u6784\u200b\u63cf\u8ff0\u200b\u51fa\u6765\u200b\u7684\u200b\u5c31\u662f\u200b\u672c\u6b21\u200b\u65b0\u589e\u200b <code>Bean</code> \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e00\u5171\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\uff0cxml\u200b\u914d\u7f6e\u200b\u548c\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u91cc\u200b\u65e2\u6709\u200b <code>InitializingBean</code>\u3001<code>DisposableBean</code> \u200b\u4e5f\u200b\u6709\u200b\u9700\u8981\u200b <code>XmlBeanDefinitionReader</code> \u200b\u52a0\u8f7d\u200b <code>spring.xml</code> \u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u5230\u200b <code>BeanDefinition</code> \u200b\u4e2d\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u63a5\u53e3\u200b <code>ConfigurableBeanFactory</code> \u200b\u5b9a\u4e49\u200b\u4e86\u200b <code>destroySingletons</code> \u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5e76\u200b\u7531\u200b <code>AbstractBeanFactory</code> \u200b\u7ee7\u627f\u200b\u7684\u200b\u7236\u7c7b\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u5b9e\u73b0\u200b <code>ConfigurableBeanFactory</code> \u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u7684\u200b <code>destroySingletons</code> \u200b\u65b9\u6cd5\u200b\u3002\u200b\u89e3\u91ca\u4e00\u4e0b\u200b\u4e0a\u8ff0\u200b\u7740\u200b\u8fd9\u6bb5\u8bdd\u200b\uff0c\u200b\u610f\u601d\u200b\u662f\u200b\uff0cdestroySingletons \u200b\u65b9\u6cd5\u200b\u6700\u7ec8\u200b\u662f\u200b\u7531\u200b DefaultSingletonBeanRegistry \u200b\u6765\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5e76\u200b\u6ca1\u6709\u200b\u76f4\u63a5\u200b\u5b9e\u73b0\u200b ConfigurableBeanFactory \u200b\u63a5\u53e3\u200b\uff0c\u200b\u800c\u662f\u200b\u901a\u8fc7\u200b\u7ee7\u627f\u200b\u94fe\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b8c\u6210\u200b\u5b9e\u73b0\u200b\u3002\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u53ef\u80fd\u200b\u5927\u591a\u6570\u200b\u7a0b\u5e8f\u5458\u200b\u662f\u200b\u6ca1\u6709\u200b\u7528\u8fc7\u200b\u7684\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u7528\u200b\u7684\u200b\u8c01\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u8c01\u200b\u5b8c\u6210\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u628a\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u7684\u200b\u64cd\u4f5c\u200b\u53c8\u200b\u4ea4\u7ed9\u200b\u7ee7\u627f\u200b\u7684\u200b\u7236\u7c7b\u200b\u5904\u7406\u200b\u3002\u200b\u6240\u4ee5\u200b\u8fd9\u5757\u200b\u8fd8\u662f\u200b\u86ee\u6709\u610f\u601d\u200b\u7684\u200b\uff0c\u200b\u662f\u200b\u4e00\u79cd\u200b\u4e0d\u9519\u200b\u7684\u200b\u9694\u79bb\u200b\u5206\u5c42\u200b\u670d\u52a1\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u65b9\u5f0f\u200b</li> <li>\u200b\u6700\u540e\u200b\u5c31\u662f\u200b\u5173\u4e8e\u200b\u5411\u200b\u865a\u62df\u673a\u200b\u6ce8\u518c\u200b\u94a9\u5b50\u200b\uff0c\u200b\u4fdd\u8bc1\u200b\u5728\u200b\u865a\u62df\u673a\u200b\u5173\u95ed\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b\u9500\u6bc1\u200b\u64cd\u4f5c\u200b\u3002<code>Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; System.out.println(\"close\uff01\")));</code></li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#2_1","title":"2. \u200b\u5b9a\u4e49\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u63a5\u53e3","text":"Java<pre><code>public interface InitializingBean {\n    /**\n     * Bean \u200b\u5904\u7406\u200b\u4e86\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u540e\u200b\u8c03\u7528\u200b\n     *\n     * @throws Exception\n     */\n    void afterPropertiesSet() throws Exception;\n}\n</code></pre> Java<pre><code>public interface DisposableBean {\n    void destroy() throws Exception;\n}\n</code></pre> <ul> <li><code>InitializingBean</code>\u3001<code>DisposableBean</code>\uff0c\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u5e38\u7528\u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e9b\u200b\u9700\u8981\u200b\u7ed3\u5408\u200b Spring \u200b\u5b9e\u73b0\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u7ecf\u5e38\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u6765\u200b\u505a\u200b\u4e00\u4e9b\u200b\u53c2\u6570\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6bd4\u5982\u200b\u63a5\u53e3\u200b\u66b4\u6f0f\u200b\u3001\u200b\u6570\u636e\u5e93\u200b\u6570\u636e\u200b\u8bfb\u53d6\u200b\u3001\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u7b49\u7b49\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#3-bean","title":"3. Bean\u200b\u5c5e\u6027\u200b\u5b9a\u4e49\u200b\u65b0\u589e\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1","text":"Java<pre><code>public class BeanDefinition {\n\n    private Class beanClass;\n\n    private PropertyValues propertyValues;\n\n    private String initMethodName;\n\n    private String destroyMethodName;\n\n    // ...get/set\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>BeanDefinition</code> \u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u5c5e\u6027\u200b\uff1a<code>initMethodName</code>\u3001<code>destroyMethodName</code>\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u5c5e\u6027\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5728\u200b <code>spring.xml</code> \u200b\u914d\u7f6e\u200b\u7684\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u914d\u7f6e\u200b <code>init-method=\"initDataMethod\" destroy-method=\"destroyDataMethod\"</code> \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6700\u7ec8\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u7684\u200b\u6548\u679c\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\u3002\u200b\u53ea\u4e0d\u8fc7\u200b\u4e00\u4e2a\u200b\u662f\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\u7684\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\uff0c\u200b\u53e6\u5916\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u8bfb\u53d6\u200b\u5230\u200b\u65b9\u6cd5\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b</li> <li>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u540c\u65f6\u200b\u9700\u8981\u200b\u5728\u200b <code>XmlBeanDefinitionReader</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u8bfb\u53d6\u200b\u903b\u8f91\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#4-bean","title":"4. \u200b\u6267\u884c\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n    /**\n     * \u200b\u521d\u59cb\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u9ed8\u8ba4\u200bcglib\n     */\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    /**\n     * \u200b\u521d\u59cb\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n     * @param beanName          bean\u200b\u540d\u79f0\u200b\n     * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n     * @param args              \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n     * @return bean\u200b\u5bf9\u8c61\u200b\n     */\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean;\n        try {\n            // \u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b\n            applyPropertyValues(beanDefinition, bean, beanName);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n\n        // ...\n\n        // \u200b\u6dfb\u52a0\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n\n    private Object initializeBean(String beanName, Object bean, BeanDefinition beanDefinition) {\n        // 1. \u200b\u6267\u884c\u200b BeanPostProcessor Before \u200b\u5904\u7406\u200b\n        Object wrappedBean = applyBeanPostProcessorsBeforeInitialization(bean, beanName);\n\n        // 2. \u200b\u6267\u884c\u200bBean\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\n        try {\n            invokeInitMethods(beanName, wrappedBean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Invocation of init method of bean[\" + beanName + \"] failed\", e);\n        }\n\n        // 2. \u200b\u6267\u884c\u200b BeanPostProcessor After \u200b\u5904\u7406\u200b\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(bean, beanName);\n        return wrappedBean;\n    }\n\n    /**\n     * \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\n     *\n     * @param beanName\n     * @param bean\n     * @param beanDefinition\n     */\n    private void invokeInitMethods(String beanName, Object bean, BeanDefinition beanDefinition) throws Exception {\n        // 1. \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u63a5\u53e3\u200b InitializingBean\n        if (bean instanceof InitializingBean) {\n            ((InitializingBean) bean).afterPropertiesSet();\n        }\n\n        // 2. \u200b\u6ce8\u89e3\u200b\u914d\u7f6e\u200b initMethod, \u200b\u540c\u65f6\u200b\u5224\u65ad\u200b\u907f\u514d\u200b\u4e8c\u6b21\u200b\u8c03\u7528\u200b\n        String initMethodName = beanDefinition.getInitMethodName();\n        if (StrUtil.isNotEmpty(initMethodName) &amp;&amp; !(bean instanceof InitializingBean)) {\n            Method initMethod = beanDefinition.getBeanClass().getMethod(initMethodName);\n            if (Objects.isNull(initMethod)) {\n                throw new BeansException(\"Could not find an init method named '\" + initMethodName + \"' on bean with name '\" + beanName + \"'\");\n            }\n            initMethod.invoke(bean);\n        }\n    }\n}   \n</code></pre> <ul> <li>\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u4e2d\u200b\u7684\u200b <code>createBean</code> \u200b\u662f\u200b\u7528\u6765\u200b\u521b\u5efa\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u5df2\u7ecf\u200b\u6269\u5c55\u200b\u4e86\u200b <code>BeanFactoryPostProcessor</code>\u3001<code>BeanPostProcessor</code> \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u7ee7\u7eed\u200b\u5b8c\u5584\u200b\u6267\u884c\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5904\u7406\u200b\u52a8\u4f5c\u200b\u3002</li> <li>\u200b\u5728\u200b\u65b9\u6cd5\u200b <code>invokeInitMethods</code> \u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u5206\u4e3a\u200b\u4e24\u5757\u200b\u6765\u200b\u6267\u884c\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>InitializingBean</code> \u200b\u63a5\u53e3\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5904\u7406\u200b <code>afterPropertiesSet</code> \u200b\u65b9\u6cd5\u200b\u3002\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5224\u65ad\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b <code>init-method</code> \u200b\u662f\u5426\u200b\u5b58\u5728\u200b\uff0c\u200b\u6267\u884c\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b <code>initMethod.invoke(bean)</code>\u3002\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\u52a0\u8f7d\u200b Bean \u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8ba9\u200b\u4f7f\u7528\u8005\u200b\u53ef\u4ee5\u200b\u989d\u5916\u200b\u65b0\u200b\u589e\u52a0\u200b\u81ea\u5df1\u200b\u60f3\u8981\u200b\u7684\u200b\u52a8\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#5","title":"5. \u200b\u5b9a\u4e49\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u9002\u914d\u5668\u200b(\u200b\u63a5\u53e3\u200b\u548c\u200b\u914d\u7f6e\u200b)","text":"Java<pre><code>public class DisposableBeanAdapter implements DisposableBean {\n\n    private final Object bean;\n    private final String beanName;\n    private String destroyMethodName;\n\n    public DisposableBeanAdapter(Object bean, String beanName, BeanDefinition beanDefinition) {\n        this.bean = bean;\n        this.beanName = beanName;\n        this.destroyMethodName = beanDefinition.getDestroyMethodName();\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        // 1. \u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b DisposableBean\n        if (bean instanceof DisposableBean) {\n            ((DisposableBean) bean).destroy();\n        }\n\n        // 2. \u200b\u6ce8\u89e3\u200b\u914d\u7f6e\u200b destroy-method\uff0c\u200b\u540c\u65f6\u200b\u5224\u65ad\u200b\u907f\u514d\u200b\u4e8c\u6b21\u200b\u8c03\u7528\u200b\n        if (StrUtil.isNotEmpty(destroyMethodName) &amp;&amp; !(bean instanceof DisposableBean &amp;&amp; \"destroy\".equals(this.destroyMethodName))) {\n            Method destroyMethod = bean.getClass().getMethod(destroyMethodName);\n            if (null == destroyMethod) {\n                throw new BeansException(\"Couldn't find a destroy method named '\" + destroyMethodName + \"' on bean with name '\" + beanName + \"'\");\n            }\n            destroyMethod.invoke(bean);\n        }\n    }\n}\n</code></pre> <ul> <li>\u200b\u53ef\u80fd\u200b\u4f60\u200b\u4f1a\u200b\u60f3\u200b\u8fd9\u91cc\u200b\u600e\u4e48\u200b\u6709\u200b\u4e00\u4e2a\u200b\u9002\u914d\u5668\u200b\u7684\u200b\u7c7b\u200b\u5462\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u6709\u200b\u4e24\u79cd\u200b\u751a\u81f3\u200b\u591a\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u76ee\u524d\u200b\u6709\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b <code>DisposableBean</code>\u3001\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b <code>destroy-method</code>\uff0c\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u3002\u200b\u800c\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u7684\u200b\u9500\u6bc1\u200b\u52a8\u4f5c\u200b\u662f\u200b\u7531\u200b <code>AbstractApplicationContext</code> \u200b\u5728\u200b\u6ce8\u518c\u200b\u865a\u62df\u673a\u200b\u94a9\u5b50\u200b\u540e\u200b\u770b\u200b\uff0c\u200b\u865a\u62df\u673a\u200b\u5173\u95ed\u200b\u524d\u200b\u6267\u884c\u200b\u7684\u200b\u64cd\u4f5c\u200b\u52a8\u4f5c\u200b\u3002</li> <li>\u200b\u90a3\u4e48\u200b\u5728\u200b\u9500\u6bc1\u200b\u6267\u884c\u200b\u65f6\u4e0d\u592a\u200b\u5e0c\u671b\u200b\u8fd8\u200b\u5f97\u200b\u5173\u6ce8\u200b\u90fd\u200b\u9500\u6bc1\u200b\u90a3\u4e9b\u200b\u7c7b\u578b\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u66f4\u200b\u5e0c\u671b\u200b\u662f\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7edf\u4e00\u200b\u7684\u200b\u63a5\u53e3\u200b\u8fdb\u884c\u200b\u9500\u6bc1\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u91cc\u200b\u5c31\u200b\u65b0\u589e\u200b\u4e86\u200b\u9002\u914d\u200b\u7c7b\u200b\uff0c\u200b\u505a\u200b\u7edf\u4e00\u200b\u5904\u7406\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#6-bean","title":"6. \u200b\u521b\u5efa\u200bBean\u200b\u65f6\u200b\u6ce8\u518c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u5bf9\u8c61","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n    /**\n     * \u200b\u521d\u59cb\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u9ed8\u8ba4\u200bcglib\n     */\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    /**\n     * \u200b\u521d\u59cb\u5316\u200bbean\u200b\u5bf9\u8c61\u200b\n     * @param beanName          bean\u200b\u540d\u79f0\u200b\n     * @param beanDefinition    bean\u200b\u5b9a\u4e49\u200b\n     * @param args              \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53c2\u6570\u200b\n     * @return bean\u200b\u5bf9\u8c61\u200b\n     */\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean;\n        try {\n            // \u200b\u521b\u5efa\u200bbean\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u6ce8\u5165\u200bbean\u200b\u5c5e\u6027\u200b\u4f9d\u8d56\u200b\n            applyPropertyValues(beanDefinition, bean, beanName);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n\n        // \u200b\u6ce8\u518c\u200b\u5b9e\u73b0\u200b\u4e86\u200b DisposableBean \u200b\u63a5\u53e3\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n\n        // \u200b\u6dfb\u52a0\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n    protected void registerDisposableBeanIfNecessary(String beanName, Object bean, BeanDefinition beanDefinition) {\n        if (bean instanceof DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) {\n            registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, beanDefinition));\n        }\n    }\n\n}    \n</code></pre> <ul> <li>\u200b\u5728\u200b\u521b\u5efa\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9700\u8981\u200b\u628a\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u4fdd\u5b58\u8d77\u6765\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u540e\u7eed\u200b\u6267\u884c\u200b\u9500\u6bc1\u200b\u52a8\u4f5c\u200b\u8fdb\u884c\u200b\u8c03\u7528\u200b\u3002</li> <li>\u200b\u90a3\u4e48\u200b\u8fd9\u4e2a\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5177\u4f53\u65b9\u6cd5\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f1a\u200b\u88ab\u200b\u6ce8\u518c\u200b\u5230\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u4e2d\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b <code>Map&lt;String, DisposableBean&gt; disposableBeans</code> \u200b\u5c5e\u6027\u200b\u4e2d\u200b\u53bb\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6700\u7ec8\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u7c7b\u200b <code>AbstractApplicationContext</code> \u200b\u7684\u200b <code>close</code> \u200b\u65b9\u6cd5\u200b\u901a\u8fc7\u200b <code>getBeanFactory().destroySingletons()</code> \u200b\u8c03\u7528\u200b\u3002</li> <li>\u200b\u5728\u200b\u6ce8\u518c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u4f1a\u200b\u6839\u636e\u200b\u662f\u200b\u63a5\u53e3\u7c7b\u578b\u200b\u548c\u200b\u914d\u7f6e\u200b\u7c7b\u578b\u200b\u7edf\u4e00\u200b\u4ea4\u7ed9\u200b <code>DisposableBeanAdapter</code> \u200b\u9500\u6bc1\u200b\u9002\u914d\u5668\u200b\u7c7b\u6765\u200b\u505a\u200b\u7edf\u4e00\u200b\u5904\u7406\u200b\u3002\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u67d0\u4e2a\u200b\u63a5\u53e3\u200b\u7684\u200b\u7c7b\u200b\u53ef\u4ee5\u200b\u88ab\u200b instanceof \u200b\u5224\u65ad\u200b\u6216\u8005\u200b\u5f3a\u8f6c\u200b\u540e\u200b\u8c03\u7528\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#7","title":"7. \u200b\u865a\u62df\u673a\u200b\u5173\u95ed\u200b\u94a9\u5b50\u200b\u6ce8\u518c\u200b\u8c03\u7528\u200b\u9500\u6bc1\u200b\u65b9\u6cd5","text":"Java<pre><code>public interface ConfigurableApplicationContext extends ApplicationContext {\n\n    /**\n     * \u200b\u5237\u65b0\u200b\u5bb9\u5668\u200b\n     *\n     * @throws BeansException\n     */\n    void refresh() throws BeansException;\n\n    void registerShutdownHook();\n\n    void close();\n}\n</code></pre> <ul> <li>\u200b\u9996\u5148\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b <code>ConfigurableApplicationContext</code> \u200b\u63a5\u53e3\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u6ce8\u518c\u200b\u865a\u62df\u673a\u200b\u94a9\u5b50\u200b\u7684\u200b\u65b9\u6cd5\u200b <code>registerShutdownHook</code> \u200b\u548c\u200b\u624b\u52a8\u200b\u6267\u884c\u200b\u5173\u95ed\u200b\u7684\u200b\u65b9\u6cd5\u200b <code>close</code>\u3002</li> </ul> Java<pre><code>public abstract class AbstractApplicationContext extends DefaultResourceLoader implements ConfigurableApplicationContext {\n\n    ...\n\n    @Override\n    public void registerShutdownHook() {\n        Runtime.getRuntime().addShutdownHook(new Thread(this::close));\n    }\n\n    @Override\n    public void close() {\n        getBeanFactory().destroySingletons();\n    }\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u4f53\u73b0\u200b\u4e86\u200b\u5173\u4e8e\u200b\u6ce8\u518c\u200b\u94a9\u5b50\u200b\u548c\u200b\u5173\u95ed\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4e0a\u6587\u200b\u63d0\u5230\u200b\u8fc7\u200b\u7684\u200b <code>Runtime.getRuntime().addShutdownHook</code>\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u9a8c\u8bc1\u200b\u3002\u200b\u5728\u200b\u4e00\u4e9b\u200b\u4e2d\u95f4\u4ef6\u200b\u548c\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u4e2d\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200b\u5f97\u5230\u200b\uff0c\u200b\u6bd4\u5982\u200b\u76d1\u6d4b\u200b\u670d\u52a1\u5668\u200b\u5b95\u673a\u200b\uff0c\u200b\u6267\u884c\u200b\u5907\u673a\u200b\u542f\u52a8\u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bBean","text":"Java<pre><code>public class UserDao {\n\n    private static Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n\n    public void initDataMethod(){\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1ainit-method\");\n        hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    }\n\n    public void destroyDataMethod(){\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1adestroy-method\");\n        hashMap.clear();\n    }\n\n    public String queryUserName(String uId) {\n        return hashMap.get(uId);\n    }\n\n}\n</code></pre> Java<pre><code>public class UserService implements InitializingBean, DisposableBean {\n\n    private String uId;\n    private String company;\n    private String location;\n    private UserDao userDao;\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1aUserService.destroy\");\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1aUserService.afterPropertiesSet\");\n    }\n\n    public String queryUserInfo() {\n        return userDao.queryUserName(uId) + \",\" + company + \",\" + location;\n    }\n\n    // ...getter setter\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#2_2","title":"2. \u200b\u914d\u7f6e\u6587\u4ef6","text":"XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userDao\" class=\"test.bean.UserDao\" init-method=\"initDataMethod\" destroy-method=\"destroyDataMethod\"/&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"company\" value=\"\u200b\u817e\u8baf\u200b\"/&gt;\n        &lt;property name=\"location\" value=\"\u200b\u6df1\u5733\u200b\"/&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#3_1","title":"3. \u200b\u6d4b\u8bd5\u7528\u4f8b","text":"Java<pre><code>public class ApiTest {\n\n    @Test\n    public void test_xml() {\n        // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n        applicationContext.registerShutdownHook();\n\n        // 2. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n        UserService userService = applicationContext.getBean(\"userService\", UserService.class);\n        String result = userService.queryUserInfo();\n        System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n    }\n\n    @Test\n    public void test_hook() {\n        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; System.out.println(\"close\uff01\")));\n    }\n\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a</p> result<pre><code>\u200b\u6267\u884c\u200b\uff1ainit-method\n\u200b\u6267\u884c\u200b\uff1aUserService.afterPropertiesSet\n\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b,\u200b\u817e\u8baf\u200b,\u200b\u6df1\u5733\u200b\nclose\uff01\n\u200b\u6267\u884c\u200b\uff1aUserService.destroy\n\u200b\u6267\u884c\u200b\uff1adestroy-method\n\nProcess finished with exit code 0\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-07/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>(https://mp.weixin.qq.com/s/eQIg3Fd2oUeRLdSrRSGVPw)</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/","title":"\u5b9a\u4e49\u200b\u6807\u8bb0\u200b\u7c7b\u578b\u200bAware\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u611f\u77e5\u200b\u5bb9\u5668\u200b\u5bf9\u8c61","text":"<p> \u200b\u7ea6\u200b 1359 \u200b\u4e2a\u200b\u5b57\u200b  232 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 7 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u76ee\u524d\u200b\u5df2\u200b\u5b9e\u73b0\u200b\u7684\u200b Spring \u200b\u6846\u67b6\u200b\uff0c\u200b\u5728\u200b Bean \u200b\u64cd\u4f5c\u200b\u4e0a\u80fd\u200b\u63d0\u4f9b\u200b\u51fa\u200b\u7684\u200b\u80fd\u529b\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1aBean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9a\u4e49\u200b\u548c\u200b\u6ce8\u518c\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5728\u200b\u64cd\u4f5c\u200b Bean \u200b\u5bf9\u8c61\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u6267\u884c\u200b\u7684\u200b\uff0c<code>BeanFactoryPostProcessor</code>\u3001<code>BeanPostProcessor</code>\u3001<code>InitializingBean</code>\u3001<code>DisposableBean</code>\uff0c\u200b\u4ee5\u53ca\u200b\u5728\u200b XML \u200b\u65b0\u589e\u200b\u7684\u200b\u4e00\u4e9b\u200b\u914d\u7f6e\u200b\u5904\u7406\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b Bean \u200b\u5bf9\u8c61\u200b\u6709\u200b\u66f4\u200b\u5f3a\u200b\u7684\u200b\u64cd\u4f5c\u6027\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u83b7\u5f97\u200b Spring \u200b\u6846\u67b6\u200b\u63d0\u4f9b\u200b\u7684\u200b <code>BeanFactory</code>\u3001<code>ApplicationContext</code>\u3001<code>BeanClassLoader</code>\u200b\u7b49\u200b\u8fd9\u4e9b\u200b\u80fd\u529b\u200b\u505a\u200b\u4e00\u4e9b\u200b\u6269\u5c55\u200b\u6846\u67b6\u200b\u7684\u200b\u4f7f\u7528\u200b\u65f6\u8be5\u200b\u600e\u4e48\u200b\u64cd\u4f5c\u200b\u5462\u200b\u3002\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u672c\u200b\u7ae0\u8282\u200b\u5e0c\u671b\u200b\u5728\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e00\u79cd\u200b\u80fd\u200b\u611f\u77e5\u200b\u5bb9\u5668\u200b\u64cd\u4f5c\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5982\u679c\u200b\u8c01\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8fd9\u6837\u200b\u7684\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u83b7\u53d6\u200b\u63a5\u53e3\u200b\u5165\u200b\u53c2\u4e2d\u200b\u7684\u200b\u5404\u7c7b\u200b\u80fd\u529b\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u5982\u679c\u8bf4\u200b\u6211\u200b\u5e0c\u671b\u200b\u62ff\u5230\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u4e00\u4e9b\u200b\u63d0\u4f9b\u200b\u7684\u200b\u8d44\u6e90\u200b\uff0c\u200b\u90a3\u4e48\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u4ee5\u200b\u4e00\u4e2a\u200b\u4ec0\u4e48\u200b\u65b9\u5f0f\u200b\u53bb\u200b\u83b7\u53d6\u200b\uff0c\u200b\u4e4b\u540e\u200b\u4f60\u200b\u5b9a\u4e49\u200b\u51fa\u6765\u200b\u7684\u200b\u83b7\u53d6\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5728\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u8be5\u200b\u600e\u4e48\u200b\u53bb\u200b\u627f\u63a5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8fd9\u4e24\u9879\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6269\u5c55\u200b\u51fa\u200b\u4f60\u200b\u9700\u8981\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5c5e\u4e8e\u200b Spring \u200b\u6846\u67b6\u200b\u672c\u8eab\u200b\u7684\u200b\u80fd\u529b\u200b\u4e86\u200b\u3002</p> <p>\u200b\u5728\u200b\u5173\u4e8e\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u9636\u6bb5\u200b\u6211\u4eec\u200b\u64cd\u4f5c\u200b\u8fc7\u200b\u4e00\u4e9b\u200b\u989d\u5916\u200b\u5b9a\u4e49\u200b\u3001\u200b\u5c5e\u6027\u200b\u3001\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5176\u5b9e\u200b\u6211\u4eec\u200b\u5982\u679c\u200b\u50cf\u200b\u83b7\u53d6\u200b Spring \u200b\u4e00\u4e9b\u200b\u5982\u200b <code>BeanFactory</code>\u3001<code>ApplicationContext</code> \u200b\u65f6\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6b64\u7c7b\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u5b9e\u73b0\u200b\u3002\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u6027\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u4e0d\u200b\u9700\u8981\u200b\u6709\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u53ea\u200b\u8d77\u5230\u200b\u6807\u8bb0\u200b\u4f5c\u7528\u200b\u5c31\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u800c\u200b\u5177\u4f53\u200b\u7684\u200b\u529f\u80fd\u200b\u7531\u200b\u7ee7\u627f\u200b\u6b64\u200b\u63a5\u53e3\u200b\u7684\u200b\u5176\u4ed6\u200b\u529f\u80fd\u6027\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u5177\u4f53\u65b9\u6cd5\u200b\uff0c\u200b\u6700\u7ec8\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>instanceof</code> \u200b\u8fdb\u884c\u200b\u5224\u65ad\u200b\u548c\u200b\u8c03\u7528\u200b\u4e86\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b Aware\uff0c\u200b\u5728\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b\u611f\u77e5\u200b\u6807\u8bb0\u200b\u6027\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5177\u4f53\u200b\u7684\u200b\u5b50\u7c7b\u200b\u5b9a\u4e49\u200b\u548c\u200b\u5b9e\u73b0\u200b\u80fd\u200b\u611f\u77e5\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u76f8\u5173\u200b\u5bf9\u8c61\u200b\u3002\u200b\u4e5f\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u6865\u6881\u200b\uff0c\u200b\u5411\u200b\u5177\u4f53\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u4e2d\u200b\u63d0\u4f9b\u200b\u5bb9\u5668\u200b\u670d\u52a1\u200b</li> <li>\u200b\u7ee7\u627f\u200b Aware \u200b\u7684\u200b\u63a5\u53e3\u200b\u5305\u62ec\u200b\uff1a<code>BeanFactoryAware</code>\u3001<code>BeanClassLoaderAware</code>\u3001<code>BeanNameAware</code>\u200b\u548c\u200b<code>ApplicationContextAware</code>\uff0c\u200b\u5f53\u7136\u200b\u5728\u200b Spring \u200b\u6e90\u7801\u200b\u4e2d\u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u5176\u4ed6\u200b\u5173\u4e8e\u200b\u6ce8\u89e3\u200b\u7684\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u76ee\u524d\u200b\u6211\u4eec\u200b\u8fd8\u662f\u200b\u7528\u200b\u4e0d\u5230\u200b\u3002</li> <li>\u200b\u5728\u200b\u5177\u4f53\u200b\u7684\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u4e00\u90e8\u5206\u200b<code>(BeanFactoryAware\u3001BeanClassLoaderAware\u3001BeanNameAware)</code>\u200b\u5728\u200b <code>factory</code> \u200b\u7684\u200b <code>support</code> \u200b\u6587\u4ef6\u5939\u200b\u4e0b\u200b\uff0c\u200b\u53e6\u5916\u200b <code>ApplicationContextAware</code> \u200b\u662f\u200b\u5728\u200b <code>context</code> \u200b\u7684\u200b <code>support</code> \u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u4e0d\u540c\u200b\u7684\u200b\u5185\u5bb9\u200b\u83b7\u53d6\u200b\u9700\u8981\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5305\u4e0b\u200b\u63d0\u4f9b\u200b\u3002\u200b\u6240\u4ee5\u200b\uff0c\u200b\u5728\u200b <code>AbstractApplicationContext</code> \u200b\u7684\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u4f1a\u200b\u7528\u5230\u200b\u5411\u200b <code>beanFactory</code> \u200b\u6dfb\u52a0\u200b <code>BeanPostProcessor</code> \u200b\u5185\u5bb9\u200b\u7684\u200b <code>ApplicationContextAwareProcessor</code> \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6700\u540e\u200b\u7531\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u521b\u5efa\u200b <code>createBean</code> \u200b\u65f6\u200b\u5904\u7406\u200b\u76f8\u5e94\u200b\u7684\u200b\u8c03\u7528\u200b\u64cd\u4f5c\u200b\u3002\u200b\u5173\u4e8e\u200b <code>applyBeanPostProcessorsBeforeInitialization</code> \u200b\u5df2\u7ecf\u200b\u5728\u200b\u524d\u9762\u200b\u7ae0\u8282\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u8fc7\u200b\uff0c\u200b\u5982\u679c\u200b\u5fd8\u8bb0\u200b\u53ef\u4ee5\u200b\u5f80\u524d\u200b\u7ffb\u7ffb\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Text Only<pre><code>simple-spring-08\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Aware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanClassLoaderAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactoryAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanNameAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApplicationContextAwareProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 bean\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 UserDao.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 UserService.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>Spring \u200b\u611f\u77e5\u200b\u63a5\u53e3\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6574\u4e2a\u200b\u7c7b\u200b\u5173\u7cfb\u200b\u5c31\u662f\u200b\u5173\u4e8e\u200b <code>Aware</code> \u200b\u611f\u77e5\u200b\u7684\u200b\u5b9a\u4e49\u200b\u548c\u200b\u5bf9\u200b\u5bb9\u5668\u200b\u611f\u77e5\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</li> <li><code>Aware</code> \u200b\u6709\u200b\u56db\u4e2a\u200b\u7ee7\u627f\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5176\u4ed6\u200b\u8fd9\u4e9b\u200b\u63a5\u53e3\u200b\u7684\u200b\u7ee7\u627f\u200b\u90fd\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7ee7\u627f\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\uff0c\u200b\u6709\u200b\u4e86\u200b\u6807\u8bb0\u200b\u7684\u200b\u5b58\u5728\u200b\u66f4\u200b\u65b9\u4fbf\u200b\u7c7b\u200b\u7684\u200b\u64cd\u4f5c\u200b\u548c\u200b\u5177\u4f53\u200b\u5224\u65ad\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u7531\u4e8e\u200b <code>ApplicationContext</code> \u200b\u5e76\u200b\u4e0d\u662f\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u4e2d\u200b <code>createBean</code> \u200b\u65b9\u6cd5\u200b\u4e0b\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u50cf\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u6ce8\u518c\u200b <code>addBeanPostProcessor</code> \uff0c\u200b\u518d\u200b\u7531\u200b  <code>createBean</code>  \u200b\u7edf\u4e00\u200b\u8c03\u7528\u200b <code>applyBeanPostProcessorsBeforeInitialization</code> \u200b\u65f6\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#2_1","title":"2. \u200b\u5b9a\u4e49\u200b\u6807\u8bb0\u200b\u63a5\u53e3","text":"Java<pre><code>public interface Aware {\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b Spring \u200b\u4e2d\u6709\u200b\u7279\u522b\u200b\u591a\u200b\u7c7b\u4f3c\u200b\u8fd9\u6837\u200b\u7684\u200b\u6807\u8bb0\u200b\u63a5\u53e3\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5b83\u4eec\u200b\u7684\u200b\u5b58\u5728\u200b\u5c31\u200b\u50cf\u662f\u200b\u4e00\u79cd\u200b\u6807\u7b7e\u200b\u4e00\u6837\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u65b9\u4fbf\u200b\u7edf\u4e00\u200b\u6458\u53d6\u200b\u51fa\u200b\u5c5e\u4e8e\u200b\u6b64\u7c7b\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u901a\u5e38\u200b\u4f1a\u200b\u6709\u200b instanceof \u200b\u4e00\u8d77\u200b\u5224\u65ad\u200b\u4f7f\u7528\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#3_1","title":"3. \u200b\u5bb9\u5668\u200b\u611f\u77e5\u200b\u7c7b","text":"<p>1. BeanFactoryAware</p> Java<pre><code>public interface BeanFactoryAware extends Aware {\n    void setBeanFactory(BeanFactory beanFactory) throws BeansException;\n}\n</code></pre> <ul> <li>Interface to be implemented by beans that wish to be aware of their owning {@link BeanFactory}.</li> <li>\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\uff0c\u200b\u65e2\u200b\u80fd\u200b\u611f\u77e5\u200b\u5230\u200b\u6240\u5c5e\u200b\u7684\u200b BeanFactory</li> </ul> <p>2. BeanClassLoaderAware</p> Java<pre><code>public interface BeanClassLoaderAware extends Aware {\n    void setBeanClassLoader(ClassLoader classLoader);\n}\n</code></pre> <ul> <li>Callback that allows a bean to be aware of the bean{@link ClassLoader class loader}; that is, the class loader used by the present bean factory to load bean classes.</li> <li>\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\uff0c\u200b\u65e2\u200b\u80fd\u200b\u611f\u77e5\u200b\u5230\u200b\u6240\u5c5e\u200b\u7684\u200b ClassLoader</li> </ul> <p>3. BeanNameAware</p> Java<pre><code>public interface BeanNameAware extends Aware {\n    void setBeanName(String beanName);\n}\n</code></pre> <ul> <li>Interface to be implemented by beans that want to be aware of their bean name in a bean factory.</li> <li>\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\uff0c\u200b\u65e2\u200b\u80fd\u200b\u611f\u77e5\u200b\u5230\u200b\u6240\u5c5e\u200b\u7684\u200b BeanName</li> </ul> <p>4. ApplicationContextAware</p> Java<pre><code>public interface ApplicationContextAware extends Aware {\n    void setApplicationContext(ApplicationContext applicationContext) throws BeansException;\n}\n</code></pre> <ul> <li>Interface to be implemented by any object that wishes to be notifiedof the {@link ApplicationContext} that it runs in.</li> <li>\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\uff0c\u200b\u65e2\u200b\u80fd\u200b\u611f\u77e5\u200b\u5230\u200b\u6240\u5c5e\u200b\u7684\u200b ApplicationContext</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#4-applicationcontextawareprocessor","title":"4. \u200b\u5305\u88c5\u200b\u5904\u7406\u5668\u200b(ApplicationContextAwareProcessor)","text":"Java<pre><code>public class ApplicationContextAwareProcessor implements BeanPostProcessor {\n\n    private final ApplicationContext applicationContext;\n\n    public ApplicationContextAwareProcessor(ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        if (bean instanceof ApplicationContextAware) {\n            ((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n}\n</code></pre> <ul> <li>\u200b\u7531\u4e8e\u200b <code>ApplicationContext</code> \u200b\u7684\u200b\u83b7\u53d6\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u5728\u200b\u521b\u5efa\u200b Bean \u200b\u65f6\u5019\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u62ff\u5230\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u5728\u200b <code>refresh</code> \u200b\u64cd\u4f5c\u200b\u65f6\u200b\uff0c\u200b\u628a\u200b <code>ApplicationContext</code> \u200b\u5199\u5165\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5305\u88c5\u200b\u7684\u200b <code>BeanPostProcessor</code> \u200b\u4e2d\u200b\u53bb\u200b\uff0c\u200b\u518d\u200b\u7531\u200b <code>AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization</code> \u200b\u65b9\u6cd5\u200b\u8c03\u7528\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#5-beanpostprocessor","title":"5. \u200b\u6ce8\u518c\u200b BeanPostProcessor","text":"Java<pre><code>public abstract class AbstractApplicationContext extends DefaultResourceLoader implements ConfigurableApplicationContext {\n\n    @Override\n    public void refresh() throws BeansException {\n        // 1. \u200b\u521b\u5efa\u200b BeanFactory\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b BeanDefinition\n        refreshBeanFactory();\n\n        // 2. \u200b\u83b7\u53d6\u200b beanFactory\n        ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n\n        // 3. \u200b\u6dfb\u52a0\u200b ApplicationContextAwareProcessor\uff0c\u200b\u8ba9\u200b\u7ee7\u627f\u200b\u81ea\u200b ApplicationContextAware \u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\u90fd\u200b\u80fd\u200b\u611f\u77e5\u200b\u6240\u5c5e\u200b\u7684\u200b ApplicationContext\n        beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n\n        // 4.  \u200b\u5728\u200b Bean \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6267\u884c\u200b BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)\n        invokeBeanFactoryPostProcessors(beanFactory);\n\n        // 5. BeanPostProcessor \u200b\u9700\u8981\u200b\u63d0\u524d\u200b\u4e8e\u200b\u5176\u4ed6\u200b Bean \u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b\n        registerBeanPostProcessors(beanFactory);\n\n        // 6. \u200b\u63d0\u524d\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u5355\u4f8b\u200bBean\u200b\u5bf9\u8c61\u200b\n        beanFactory.preInstantiateSingletons();\n    }\n}    \n</code></pre> <ul> <li><code>refresh()</code> \u200b\u65b9\u6cd5\u200b\u5c31\u662f\u200b\u6574\u4e2a\u200b Spring \u200b\u5bb9\u5668\u200b\u7684\u200b\u64cd\u4f5c\u8fc7\u7a0b\u200b\uff0c\u200b\u4e0e\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u5bf9\u6bd4\u200b\uff0c\u200b\u672c\u6b21\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u5173\u4e8e\u200b <code>addBeanPostProcessor</code> \u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u6dfb\u52a0\u200b <code>ApplicationContextAwareProcessor</code>\uff0c\u200b\u8ba9\u200b\u7ee7\u627f\u200b\u81ea\u200b <code>ApplicationContextAware</code> \u200b\u7684\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u90fd\u200b\u80fd\u200b\u611f\u77e5\u200b\u6240\u5c5e\u200b\u7684\u200b <code>ApplicationContext</code>\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#6","title":"6. \u200b\u611f\u77e5\u200b\u8c03\u7528\u200b\u64cd\u4f5c","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean = null;\n        try {\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u7ed9\u200b Bean \u200b\u586b\u5145\u200b\u5c5e\u6027\u200b\n            applyPropertyValues(beanName, bean, beanDefinition);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n\n        // \u200b\u6ce8\u518c\u200b\u5b9e\u73b0\u200b\u4e86\u200b DisposableBean \u200b\u63a5\u53e3\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n\n        addSingleton(beanName, bean);\n        return bean;\n    }\n\n    private Object initializeBean(String beanName, Object bean, BeanDefinition beanDefinition) {\n\n        // invokeAwareMethods\n        if (bean instanceof Aware) {\n            if (bean instanceof BeanFactoryAware) {\n                ((BeanFactoryAware) bean).setBeanFactory(this);\n            }\n            if (bean instanceof BeanClassLoaderAware){\n                ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());\n            }\n            if (bean instanceof BeanNameAware) {\n                ((BeanNameAware) bean).setBeanName(beanName);\n            }\n        }\n\n        // 1. \u200b\u6267\u884c\u200b BeanPostProcessor Before \u200b\u5904\u7406\u200b\n        Object wrappedBean = applyBeanPostProcessorsBeforeInitialization(bean, beanName);\n\n        // \u200b\u6267\u884c\u200b Bean \u200b\u5bf9\u8c61\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\n        try {\n            invokeInitMethods(beanName, wrappedBean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Invocation of init method of bean[\" + beanName + \"] failed\", e);\n        }\n\n        // 2. \u200b\u6267\u884c\u200b BeanPostProcessor After \u200b\u5904\u7406\u200b\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(bean, beanName);\n        return wrappedBean;\n    }\n\n\n\n    @Override\n    public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessBeforeInitialization(result, beanName);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n    @Override\n    public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException {\n        Object result = existingBean;\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            Object current = processor.postProcessAfterInitialization(result, beanName);\n            if (null == current) return result;\n            result = current;\n        }\n        return result;\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u53bb\u6389\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u7c7b\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u53ea\u200b\u4fdd\u7559\u200b\u5173\u4e8e\u200b\u672c\u6b21\u200b <code>Aware</code> \u200b\u611f\u77e5\u200b\u63a5\u53e3\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u9996\u5148\u200b\u5728\u200b <code>initializeBean</code> \u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5224\u65ad\u200b <code>bean instanceof Aware</code>\uff0c\u200b\u8c03\u7528\u200b\u4e86\u200b\u4e09\u4e2a\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\uff0c<code>BeanFactoryAware.setBeanFactory(this)</code>\u3001<code>BeanClassLoaderAware.setBeanClassLoader(getBeanClassLoader())</code>\u3001<code>BeanNameAware.setBeanName(beanName)</code>\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u80fd\u200b\u901a\u77e5\u200b\u5230\u200b\u5df2\u7ecf\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u6b64\u200b\u63a5\u53e3\u200b\u7684\u200b\u7c7b\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5411\u200b <code>BeanPostProcessor</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e86\u200b <code>ApplicationContextAwareProcessor</code>\uff0c\u200b\u6b64\u65f6\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u4e5f\u200b\u4f1a\u200b\u88ab\u200b\u8c03\u7528\u200b\u5230\u200b\u5177\u4f53\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b <code>ApplicationContex</code> \u200b\u5c5e\u6027\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bbean","text":"Java<pre><code>public class UserDao{\n\n    private static Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n\n    public void initDataMethod(){\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1ainit-method\");\n        hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n    }\n\n    public void destroyDataMethod(){\n        System.out.println(\"\u200b\u6267\u884c\u200b\uff1adestroy-method\");\n        hashMap.clear();\n    }\n\n    public String queryUserName(String uId) {\n        return hashMap.get(uId);\n    }\n\n}\n</code></pre> Java<pre><code>public class UserService implements BeanNameAware, BeanClassLoaderAware, ApplicationContextAware, BeanFactoryAware {\n\n    private ApplicationContext applicationContext;\n    private BeanFactory beanFactory;\n\n    private String uId;\n    private String company;\n    private String location;\n    private UserDao userDao;\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n    }\n\n    @Override\n    public void setBeanName(String name) {\n        System.out.println(\"Bean Name is\uff1a\" + name);\n    }\n\n    @Override\n    public void setBeanClassLoader(ClassLoader classLoader) {\n        System.out.println(\"ClassLoader\uff1a\" + classLoader);\n    }\n\n    public String queryUserInfo() {\n        return userDao.queryUserName(uId) + \",\" + company + \",\" + location;\n    }\n\n    // ...\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#2_2","title":"2. \u200b\u914d\u7f6e\u6587\u4ef6","text":"XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userDao\" class=\"test.bean.UserDao\" init-method=\"initDataMethod\" destroy-method=\"destroyDataMethod\"/&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"company\" value=\"\u200b\u817e\u8baf\u200b\"/&gt;\n        &lt;property name=\"location\" value=\"\u200b\u6df1\u5733\u200b\"/&gt;\n        &lt;property name=\"userDao\" ref=\"userDao\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#3_2","title":"3. \u200b\u5355\u5143\u6d4b\u8bd5","text":"Java<pre><code>public class ApiTest {\n\n    @Test\n    public void test_xml() {\n        // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n        applicationContext.registerShutdownHook();\n\n        // 2. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n        UserService userService = applicationContext.getBean(\"userService\", UserService.class);\n        String result = userService.queryUserInfo();\n        System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n\n        System.out.println(\"ApplicationContextAware\uff1a\"+userService.getApplicationContext());\n        System.out.println(\"BeanFactoryAware\uff1a\"+userService.getBeanFactory());\n    }\n\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a result<pre><code>\u200b\u6267\u884c\u200b\uff1ainit-method\nBean Name is\uff1auserService\nClassLoader\uff1asun.misc.Launcher$AppClassLoader@18b4aac2\n\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b,\u200b\u817e\u8baf\u200b,\u200b\u6df1\u5733\u200b\nApplicationContextAware\uff1acom.iflove.simplespring.context.support.ClassPathXmlApplicationContext@358c99f5\nBeanFactoryAware\uff1acom.iflove.simplespring.beans.factory.support.DefaultListableBeanFactory@3ee0fea4\n\u200b\u6267\u884c\u200b\uff1adestroy-method\n\nProcess finished with exit code 0\n</code></pre></p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-08/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>(https://mp.weixin.qq.com/s/KP_4IQ2MZ-Pzq80WrJpCOA)[https://mp.weixin.qq.com/s/KP_4IQ2MZ-Pzq80WrJpCOA]</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/","title":"\u5173\u4e8e\u200bBean\u200b\u5bf9\u8c61\u200b\u4f5c\u7528\u57df\u200b\u4ee5\u53ca\u200bFactoryBean\u200b\u7684\u200b\u5b9e\u73b0\u200b\u548c\u200b\u4f7f\u7528","text":"<p> \u200b\u7ea6\u200b 1932 \u200b\u4e2a\u200b\u5b57\u200b  421 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 12 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u4ea4\u7ed9\u200b Spring \u200b\u7ba1\u7406\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u5c31\u662f\u200b\u6211\u4eec\u200b\u7528\u7c7b\u200b\u521b\u5efa\u200b\u51fa\u6765\u200b\u7684\u200b Bean \u200b\u5417\u200b\uff1f\u200b\u521b\u5efa\u200b\u51fa\u6765\u200b\u7684\u200b Bean \u200b\u5c31\u200b\u6c38\u8fdc\u200b\u662f\u200b\u5355\u4f8b\u200b\u7684\u200b\u5417\u200b\uff0c\u200b\u6ca1\u6709\u200b\u53ef\u80fd\u200b\u662f\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\u5417\u200b\uff1f</p> <p>\u200b\u5728\u200b\u96c6\u5408\u200b Spring \u200b\u6846\u67b6\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u7684\u200b MyBatis \u200b\u6846\u67b6\u200b\u4e2d\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u6838\u5fc3\u4f5c\u7528\u200b\u662f\u200b\u53ef\u4ee5\u200b\u6ee1\u8db3\u7528\u6237\u200b\u4e0d\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b Dao \u200b\u63a5\u53e3\u7c7b\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b xml \u200b\u6216\u8005\u200b\u6ce8\u89e3\u200b\u914d\u7f6e\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b8c\u6210\u200b\u5bf9\u200b\u6570\u636e\u5e93\u200b\u6267\u884c\u200b CRUD \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u5b9e\u73b0\u200b\u8fd9\u6837\u200b\u7684\u200b ORM \u200b\u6846\u67b6\u200b\u4e2d\u200b\uff0c\u200b\u662f\u200b\u600e\u4e48\u200b\u628a\u200b\u4e00\u4e2a\u200b\u6570\u636e\u5e93\u200b\u64cd\u4f5c\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\u4ea4\u7ed9\u200b Spring \u200b\u7ba1\u7406\u200b\u7684\u200b\u5462\u200b\u3002</p> <p>\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u5728\u200b\u4f7f\u7528\u200b Spring\u3001MyBatis \u200b\u6846\u67b6\u200b\u7684\u200b\u65f6\u5019\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u77e5\u9053\u200b\uff0c\u200b\u5e76\u200b\u6ca1\u6709\u200b\u624b\u52a8\u200b\u7684\u200b\u53bb\u200b\u521b\u5efa\u200b\u4efb\u4f55\u200b\u64cd\u4f5c\u200b\u6570\u636e\u5e93\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6709\u200b\u7684\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u7adf\u7136\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u6ce8\u5165\u200b\u5230\u200b\u5176\u4ed6\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b Dao \u200b\u7684\u200b\u5c5e\u6027\u200b\u4e2d\u53bb\u200b\u4e86\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u4e00\u200b\u8fc7\u7a0b\u200b\u6700\u200b\u6838\u5fc3\u200b\u5f85\u200b\u89e3\u51b3\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b\u628a\u200b\u590d\u6742\u200b\u4e14\u200b\u4ee5\u200b\u4ee3\u7406\u200b\u65b9\u5f0f\u200b\u52a8\u6001\u53d8\u5316\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6ce8\u518c\u200b\u5230\u200b Spring \u200b\u5bb9\u5668\u200b\u4e2d\u200b\u3002\u200b\u800c\u200b\u4e3a\u4e86\u200b\u6ee1\u8db3\u200b\u8fd9\u6837\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6269\u5c55\u200b\u7ec4\u4ef6\u200b\u5f00\u53d1\u200b\u7684\u200b\u9700\u6c42\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u6211\u4eec\u200b\u5728\u200b\u73b0\u6709\u200b\u624b\u5199\u200b\u7684\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u8fd9\u4e00\u200b\u80fd\u529b\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u5173\u4e8e\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u80fd\u200b\u8ba9\u200b\u4f7f\u7528\u8005\u200b\u5b9a\u4e49\u200b\u590d\u6742\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u529f\u80fd\u200b\u70b9\u200b\u975e\u5e38\u200b\u4e0d\u9519\u200b\uff0c\u200b\u610f\u4e49\u200b\u4e5f\u200b\u975e\u5e38\u200b\u5927\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u505a\u200b\u4e86\u200b\u4e4b\u540e\u200b Spring \u200b\u7684\u200b\u751f\u6001\u200b\u79cd\u5b50\u200b\u5b75\u5316\u200b\u7bb1\u200b\u5c31\u6b64\u200b\u63d0\u4f9b\u200b\u4e86\u200b\uff0c\u200b\u8c01\u5bb6\u200b\u7684\u200b\u6846\u67b6\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u200b\u6807\u51c6\u200b\u4e0a\u200b\u5b8c\u6210\u200b\u81ea\u5df1\u200b\u670d\u52a1\u200b\u7684\u200b\u63a5\u5165\u200b\u3002</p> <p>\u200b\u4f46\u200b\u8fd9\u6837\u200b\u7684\u200b\u529f\u80fd\u200b\u903b\u8f91\u8bbe\u8ba1\u200b\u4e0a\u200b\u5e76\u200b\u4e0d\u200b\u590d\u6742\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6574\u4e2a\u200b Spring \u200b\u6846\u67b6\u200b\u5728\u200b\u5f00\u53d1\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5c31\u200b\u5df2\u7ecf\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5404\u9879\u200b\u6269\u5c55\u200b\u80fd\u529b\u200b\u7684\u200b\u63a5\u832c\u200b\uff0c\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u5408\u9002\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u63a5\u832c\u200b\u7684\u200b\u5904\u7406\u200b\u63a5\u53e3\u200b\u8c03\u7528\u200b\u548c\u200b\u76f8\u5e94\u200b\u7684\u200b\u529f\u80fd\u200b\u903b\u8f91\u200b\u5b9e\u73b0\u200b\u5373\u53ef\u200b\uff0c\u200b\u50cf\u200b\u8fd9\u91cc\u200b\u7684\u200b\u76ee\u6807\u200b\u5b9e\u73b0\u200b\u5c31\u662f\u200b\u5bf9\u5916\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u4e8c\u6b21\u200b\u4ece\u200b FactoryBean \u200b\u7684\u200b getObject \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\u7684\u200b\u529f\u80fd\u200b\u5373\u53ef\u200b\uff0c\u200b\u8fd9\u6837\u200b\u6240\u6709\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\u7684\u200b\u5bf9\u8c61\u200b\u7c7b\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6269\u5145\u200b\u81ea\u5df1\u200b\u7684\u200b\u5bf9\u8c61\u200b\u529f\u80fd\u200b\u4e86\u200b\u3002MyBatis \u200b\u5c31\u662f\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b MapperFactoryBean \u200b\u7c7b\u200b\uff0c\u200b\u5728\u200b getObject \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u63d0\u4f9b\u200b SqlSession \u200b\u5bf9\u200b\u6267\u884c\u200b CRUD \u200b\u65b9\u6cd5\u200b\u7684\u200b\u64cd\u4f5c\u200b \u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u6574\u4e2a\u200b\u7684\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e24\u200b\u90e8\u5206\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u89e3\u51b3\u200b\u5355\u4f8b\u200b\u8fd8\u662f\u200b\u539f\u578b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u53e6\u5916\u200b\u4e00\u4e2a\u200b\u5904\u7406\u200b <code>FactoryBean</code> \u200b\u7c7b\u578b\u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5173\u4e8e\u200b\u83b7\u53d6\u200b\u5177\u4f53\u200b\u8c03\u7528\u200b\u5bf9\u8c61\u200b\u7684\u200b <code>getObject</code> \u200b\u64cd\u4f5c\u200b\u3002</li> <li><code>SCOPE_SINGLETON</code>\u3001<code>SCOPE_PROTOTYPE</code>\uff0c\u200b\u5bf9\u8c61\u200b\u7c7b\u578b\u200b\u7684\u200b\u521b\u5efa\u200b\u83b7\u53d6\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e3b\u8981\u200b\u533a\u5206\u200b\u5728\u4e8e\u200b <code>AbstractAutowireCapableBeanFactory#createBean</code> \u200b\u521b\u5efa\u200b\u5b8c\u6210\u200b\u5bf9\u8c61\u200b\u540e\u200b\u662f\u5426\u200b\u653e\u5165\u200b\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u653e\u5165\u200b\u5219\u200b\u6bcf\u6b21\u200b\u83b7\u53d6\u200b\u90fd\u200b\u4f1a\u200b\u91cd\u65b0\u200b\u521b\u5efa\u200b\u3002</li> <li><code>createBean</code> \u200b\u6267\u884c\u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u3001\u200b\u5c5e\u6027\u200b\u586b\u5145\u200b\u3001\u200b\u4f9d\u8d56\u200b\u52a0\u8f7d\u200b\u3001\u200b\u524d\u7f6e\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u3001\u200b\u521d\u59cb\u5316\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u540e\u200b\uff0c\u200b\u5c31\u8981\u200b\u5f00\u59cb\u200b\u505a\u200b\u6267\u884c\u200b\u5224\u65ad\u200b\u6574\u4e2a\u200b\u5bf9\u8c61\u200b\u662f\u5426\u662f\u200b\u4e00\u4e2a\u200b <code>FactoryBean</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u8fd9\u6837\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u518d\u200b\u7ee7\u7eed\u6267\u884c\u200b\u83b7\u53d6\u200b <code>FactoryBean</code>  \u200b\u5177\u4f53\u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u7684\u200b <code>getObject</code> \u200b\u5bf9\u8c61\u200b\u4e86\u200b\u3002\u200b\u6574\u4e2a\u200b getBean \u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u90fd\u200b\u4f1a\u200b\u65b0\u589e\u200b\u4e00\u4e2a\u200b\u5355\u4f8b\u200b\u7c7b\u578b\u200b\u7684\u200b\u5224\u65ad\u200b<code>factory.isSingleton()</code>\uff0c\u200b\u7528\u4e8e\u200b\u51b3\u5b9a\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u5185\u5b58\u200b\u5b58\u653e\u200b\u5bf9\u8c61\u200b\u4fe1\u606f\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Bash<pre><code>simple-spring-09\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Aware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanClassLoaderAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactoryAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanNameAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FactoryBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 FactoryBeanRegistrySupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApplicationContextAwareProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 bean\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 IUserDao.java\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 ProxyBeanFactory.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 UserService.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>Spring \u200b\u5355\u4f8b\u200b\u3001\u200b\u539f\u578b\u200b\u4ee5\u53ca\u200b FactoryBean \u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6574\u4e2a\u200b\u7c7b\u200b\u5173\u7cfb\u200b\u56fe\u200b\u5c55\u793a\u200b\u7684\u200b\u5c31\u662f\u200b\u6dfb\u52a0\u200b Bean \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u662f\u200b\u5355\u4f8b\u200b\u8fd8\u662f\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\u4ee5\u53ca\u200b FactoryBean \u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u5176\u5b9e\u200b\u6574\u4e2a\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u5e76\u200b\u4e0d\u200b\u590d\u6742\u200b\uff0c\u200b\u53ea\u662f\u200b\u5728\u200b\u73b0\u6709\u200b\u7684\u200b <code>AbstractAutowireCapableBeanFactory</code> \u200b\u7c7b\u200b\u4ee5\u53ca\u200b\u7ee7\u627f\u200b\u7684\u200b\u62bd\u8c61\u7c7b\u200b <code>AbstractBeanFactory</code> \u200b\u4e2d\u200b\u8fdb\u884c\u200b\u6269\u5c55\u200b\u3002</li> <li>\u200b\u4e0d\u8fc7\u200b\u8fd9\u6b21\u200b\u6211\u4eec\u200b\u628a\u200b <code>AbstractBeanFactory</code> \u200b\u7ee7\u627f\u200b\u7684\u200b <code>DefaultSingletonBeanRegistry</code> \u200b\u7c7b\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u52a0\u200b\u4e86\u200b\u4e00\u5c42\u200b <code>FactoryBeanRegistrySupport</code>\uff0c\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5728\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u662f\u200b\u5904\u7406\u200b\u5173\u4e8e\u200b <code>FactoryBean</code> \u200b\u6ce8\u518c\u200b\u7684\u200b\u652f\u6491\u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#2-beanxml","title":"2. Bean\u200b\u7684\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\u5b9a\u4e49\u200b\u548c\u200bxml\u200b\u89e3\u6790","text":"Java<pre><code>public class BeanDefinition {\n    String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;\n\n    String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;\n\n    /**\n     * beanclass\n     */\n    private Class beanClass;\n\n    /**\n     * bean \u200b\u5c5e\u6027\u200b\u6ce8\u5165\u200b\u4fe1\u606f\u200b\n     */\n    private PropertyValues propertyValues;\n\n    /**\n     * \u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u540d\u200b\n     */\n    private String initMethodName;\n\n    /**\n     * \u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u540d\u200b\n     */\n    private String destroyMethodName;\n\n    /**\n     * \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u6a21\u5f0f\u200b\n     */\n    private String scope = SCOPE_SINGLETON;\n\n    /**\n     * \u200b\u5355\u4f8b\u200b\n     */\n    private boolean singleton = true;\n\n    /**\n     * \u200b\u539f\u578b\u200b\n     */\n    private boolean prototype = false;\n\n    public void setScope(String scope) {\n        scope = scope;\n        singleton = SCOPE_SINGLETON.equals(scope);\n        prototype = SCOPE_PROTOTYPE.equals(scope);\n    }   \n\n    public boolean isSingleton() {\n        return singleton;\n    }\n\n    public boolean isPrototype() {\n        return prototype;\n    }\n\n    // ...\n}    \n</code></pre> <ul> <li><code>singleton</code>\u3001<code>prototype</code>\uff0c\u200b\u662f\u200b\u672c\u6b21\u200b\u5728\u200b <code>BeanDefinition</code> \u200b\u7c7b\u4e2d\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u4e24\u4e2a\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\uff0c\u200b\u7528\u4e8e\u200b\u628a\u200b\u4ece\u200b spring.xml \u200b\u4e2d\u200b\u89e3\u6790\u200b\u5230\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\u586b\u5145\u200b\u5230\u200b\u5c5e\u6027\u200b\u4e2d\u200b\u3002</li> </ul> Java<pre><code>public class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n\n    protected void doLoadBeanDefinitions(InputStream inputStream) throws ClassNotFoundException {\n\n        for (int i = 0; i &lt; childNodes.getLength(); i++) {\n            // \u200b\u5224\u65ad\u200b\u5143\u7d20\u200b\n            if (!(childNodes.item(i) instanceof Element)) continue;\n            // \u200b\u5224\u65ad\u200b\u5bf9\u8c61\u200b\n            if (!\"bean\".equals(childNodes.item(i).getNodeName())) continue;\n\n            // \u200b\u89e3\u6790\u200b\u6807\u7b7e\u200b\n            Element bean = (Element) childNodes.item(i);\n            String id = bean.getAttribute(\"id\");\n            String name = bean.getAttribute(\"name\");\n            String className = bean.getAttribute(\"class\");\n            String initMethod = bean.getAttribute(\"init-method\");\n            String destroyMethodName = bean.getAttribute(\"destroy-method\");\n            String beanScope = bean.getAttribute(\"scope\");\n\n            // \u200b\u83b7\u53d6\u200b Class\uff0c\u200b\u65b9\u4fbf\u200b\u83b7\u53d6\u200b\u7c7b\u4e2d\u200b\u7684\u200b\u540d\u79f0\u200b\n            Class&lt;?&gt; clazz = Class.forName(className);\n            // \u200b\u4f18\u5148\u7ea7\u200b id &gt; name\n            String beanName = StrUtil.isNotEmpty(id) ? id : name;\n            if (StrUtil.isEmpty(beanName)) {\n                beanName = StrUtil.lowerFirst(clazz.getSimpleName());\n            }\n\n            // \u200b\u5b9a\u4e49\u200bBean\n            BeanDefinition beanDefinition = new BeanDefinition(clazz);\n            beanDefinition.setInitMethodName(initMethod);\n            beanDefinition.setDestroyMethodName(destroyMethodName);\n\n            if (StrUtil.isNotEmpty(beanScope)) {\n                beanDefinition.setScope(beanScope);\n            }\n\n            // ...\n\n            // \u200b\u6ce8\u518c\u200b BeanDefinition\n            getRegistry().registerBeanDefinition(beanName, beanDefinition);\n        }\n    }\n\n}\n</code></pre> <p>\u200b\u5728\u200b\u89e3\u6790\u200b XML \u200b\u5904\u7406\u200b\u7c7b\u200b <code>XmlBeanDefinitionReader</code> \u200b\u4e2d\u200b\uff0c\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u5173\u4e8e\u200b Bean \u200b\u5bf9\u8c61\u200b\u914d\u7f6e\u200b\u4e2d\u200b <code>scope</code> \u200b\u7684\u200b\u89e3\u6790\u200b\uff0c\u200b\u5e76\u200b\u628a\u200b\u8fd9\u4e2a\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\u586b\u5145\u200b\u5230\u200b Bean \u200b\u5b9a\u4e49\u200b\u4e2d\u200b\u3002<code>beanDefinition.setScope(beanScope)</code></p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#3_1","title":"3. \u200b\u521b\u5efa\u200b\u548c\u200b\u4fee\u6539\u200b\u5bf9\u8c61\u200b\u65f6\u5019\u200b\u5224\u65ad\u200b\u5355\u4f8b\u200b\u548c\u200b\u539f\u578b\u200b\u6a21\u5f0f","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean = null;\n        try {\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u7ed9\u200b Bean \u200b\u586b\u5145\u200b\u5c5e\u6027\u200b\n            applyPropertyValues(beanName, bean, beanDefinition);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed\", e);\n        }\n\n        // \u200b\u6ce8\u518c\u200b\u5b9e\u73b0\u200b\u4e86\u200b DisposableBean \u200b\u63a5\u53e3\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n\n        // \u200b\u5224\u65ad\u200b SCOPE_SINGLETON\u3001SCOPE_PROTOTYPE\n        if (beanDefinition.isSingleton()) {\n            addSingleton(beanName, bean);\n        }\n        return bean;\n    }\n\n    protected void registerDisposableBeanIfNecessary(String beanName, Object bean, BeanDefinition beanDefinition) {\n        // \u200b\u975e\u200b Singleton \u200b\u7c7b\u578b\u200b\u7684\u200b Bean \u200b\u4e0d\u200b\u6267\u884c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\n        if (!beanDefinition.isSingleton()) return;\n\n        if (bean instanceof DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) {\n            registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, beanDefinition));\n        }\n    }\n\n    // ... \u200b\u5176\u4ed6\u200b\u529f\u80fd\u200b\n}\n</code></pre> <ul> <li>\u200b\u5355\u4f8b\u200b\u6a21\u5f0f\u200b\u548c\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\u7684\u200b\u533a\u522b\u200b\u5c31\u200b\u5728\u4e8e\u200b\u662f\u5426\u200b\u5b58\u653e\u200b\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\u90a3\u4e48\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u5b58\u653e\u200b\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u83b7\u53d6\u200b\u90fd\u200b\u91cd\u65b0\u200b\u521b\u5efa\u5bf9\u8c61\u200b\uff0c\u200b\u53e6\u5916\u200b\u975e\u200b Singleton \u200b\u7c7b\u578b\u200b\u7684\u200b Bean \u200b\u4e0d\u200b\u9700\u8981\u200b\u6267\u884c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u6240\u4ee5\u200b\u8fd9\u91cc\u200b\u7684\u200b\u4ee3\u7801\u200b\u4f1a\u200b\u6709\u200b\u4e24\u5904\u200b\u4fee\u6539\u200b\uff0c\u200b\u4e00\u5904\u200b\u662f\u200b <code>createBean</code> \u200b\u4e2d\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>addSingleton(beanName, bean);</code>\uff0c\u200b\u53e6\u5916\u200b\u4e00\u5904\u200b\u662f\u200b <code>registerDisposableBeanIfNecessary</code> \u200b\u9500\u6bc1\u200b\u6ce8\u518c\u200b\u4e2d\u200b\u7684\u200b\u5224\u65ad\u200b <code>if (!beanDefinition.isSingleton()) return;</code>\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#4-factorybean","title":"4. \u200b\u5b9a\u4e49\u200b FactoryBean \u200b\u63a5\u53e3","text":"Java<pre><code>public interface FactoryBean&lt;T&gt; {\n\n    T getObject() throws Exception;\n\n    Class&lt;?&gt; getObjectType();\n\n    boolean isSingleton();\n\n}\n</code></pre> <ul> <li>FactoryBean \u200b\u4e2d\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b3\u200b\u4e2a\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\u3001\u200b\u5bf9\u8c61\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u662f\u5426\u662f\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u4f9d\u7136\u200b\u4f1a\u200b\u88ab\u200b\u653e\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#5-factorybean","title":"5. \u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b FactoryBean \u200b\u6ce8\u518c\u200b\u670d\u52a1","text":"Java<pre><code>public abstract class FactoryBeanRegistrySupport extends DefaultSingletonBeanRegistry {\n    /**\n     * Cache of singleton objects created by FactoryBeans: FactoryBean name --&gt; object\n     */\n    private final Map&lt;String, Object&gt; factoryBeanObjectCache = new ConcurrentHashMap&lt;&gt;();\n\n    /**\n     * \u200b\u4ece\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u83b7\u53d6\u200b FactoryBean \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     * @param beanName beanName\n     * @return \u200b\u7f13\u5b58\u200b\u4e2d\u200b\u7684\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     */\n    protected Object getCachedObjectForFactoryBean(String beanName) {\n        Object object = this.factoryBeanObjectCache.get(beanName);\n        return (object != NULL_OBJECT ? object : null);\n    }\n\n    /**\n     * \u200b\u83b7\u53d6\u200b FactoryBean \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     * @param factoryBean FactoryBean\n     * @param beanName BeanName\n     * @return FactoryBean \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     */\n    protected Object getObjectFromFactoryBean(FactoryBean factoryBean, String beanName) {\n        // \u200b\u5355\u4f8b\u200b\n        if (factoryBean.isSingleton()) {\n            Object object = this.factoryBeanObjectCache.get(beanName);\n            // \u200b\u7f13\u5b58\u200b\u672a\u200b\u547d\u4e2d\u200b\n            if (object == null) {\n                // FactoryBean getObject\n                object = doGetObjectFromFactoryBean(factoryBean, beanName);\n                // \u200b\u5b58\u5165\u200b\u7f13\u5b58\u200b\n                this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));\n            }\n            return (object != null ? object : NULL_OBJECT);\n        } else {\n            // \u200b\u539f\u578b\u200b\u5bf9\u8c61\u200b\u4e0d\u200b\u505a\u200b\u7f13\u5b58\u200b\n            return doGetObjectFromFactoryBean(factoryBean, beanName);\n        }\n    }\n\n    /**\n     * \u200b\u83b7\u53d6\u200b FactoryBean \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     * @param factoryBean FactoryBean\n     * @param beanName BeanName\n     * @return FactoryBean \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\n     */\n    private Object doGetObjectFromFactoryBean(final FactoryBean factoryBean, final String beanName) {\n        try {\n            return factoryBean.getObject();\n        } catch (Exception e) {\n            throw new BeansException(\"FactoryBean threw exception on object[\" + beanName + \"] creation\", e);\n        }\n    }\n}\n</code></pre> <ul> <li><code>FactoryBeanRegistrySupport</code> \u200b\u7c7b\u200b\u4e3b\u8981\u200b\u5904\u7406\u200b\u7684\u200b\u5c31\u662f\u200b\u5173\u4e8e\u200b <code>FactoryBean</code> \u200b\u6b64\u7c7b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6ce8\u518c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4e4b\u6240\u4ee5\u200b\u653e\u5230\u200b\u8fd9\u6837\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u7c7b\u91cc\u200b\uff0c\u200b\u5c31\u662f\u200b\u5e0c\u671b\u200b\u505a\u5230\u200b\u4e0d\u540c\u200b\u9886\u57df\u200b\u6a21\u5757\u200b\u4e0b\u200b\u53ea\u200b\u8d1f\u8d23\u200b\u5404\u81ea\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u907f\u514d\u200b\u56e0\u4e3a\u200b\u6269\u5c55\u200b\u5bfc\u81f4\u200b\u7c7b\u200b\u81a8\u80c0\u200b\u5230\u200b\u96be\u4ee5\u200b\u7ef4\u62a4\u200b\u3002</li> <li>\u200b\u540c\u6837\u200b\u8fd9\u91cc\u200b\u4e5f\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u7f13\u5b58\u200b\u64cd\u4f5c\u200b <code>factoryBeanObjectCache</code>\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u653e\u200b\u5355\u4f8b\u200b\u7c7b\u578b\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u521b\u5efa\u200b\u3002\u200b\u5728\u200b\u65e5\u5e38\u200b\u4f7f\u7528\u200b\u7528\u200b\uff0c\u200b\u57fa\u672c\u200b\u4e5f\u200b\u90fd\u200b\u662f\u200b\u521b\u5efa\u200b\u7684\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b</li> <li><code>doGetObjectFromFactoryBean</code> \u200b\u662f\u200b\u5177\u4f53\u200b\u7684\u200b\u83b7\u53d6\u200b <code>FactoryBean#getObject()</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u65e2\u6709\u200b\u7f13\u5b58\u200b\u7684\u200b\u5904\u7406\u200b\u4e5f\u200b\u6709\u200b\u5bf9\u8c61\u200b\u7684\u200b\u83b7\u53d6\u200b\uff0c\u200b\u6240\u4ee5\u200b\u989d\u5916\u200b\u63d0\u4f9b\u200b\u4e86\u200b <code>getObjectFromFactoryBean</code> \u200b\u8fdb\u884c\u200b\u903b\u8f91\u200b\u5305\u88c5\u200b\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u7684\u200b\u64cd\u4f5c\u200b\u65b9\u5f0f\u200b\u662f\u200b\u4e0d\u200b\u548c\u200b\u4f60\u200b\u65e5\u5e38\u200b\u505a\u200b\u7684\u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\u5f00\u53d1\u200b\u975e\u5e38\u200b\u76f8\u4f3c\u200b\u3002\u200b\u4ece\u200bRedis\u200b\u53d6\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u679c\u200b\u4e3a\u7a7a\u200b\u5c31\u200b\u4ece\u200b\u6570\u636e\u5e93\u200b\u83b7\u53d6\u200b\u5e76\u200b\u5199\u5165\u200bRedis</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#6-abstractbeanfactory","title":"6. \u200b\u6269\u5c55\u200b AbstractBeanFactory \u200b\u521b\u5efa\u5bf9\u8c61\u200b\u903b\u8f91","text":"Java<pre><code>public abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n\n    protected &lt;T&gt; T doGetBean(final String name, final Object[] args) {\n        Object sharedInstance = getSingleton(name);\n        if (sharedInstance != null) {\n            // \u200b\u5982\u679c\u200b\u662f\u200b FactoryBean\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u8c03\u7528\u200b FactoryBean#getObject\n            return (T) getObjectForBeanInstance(sharedInstance, name);\n        }\n\n        BeanDefinition beanDefinition = getBeanDefinition(name);\n        Object bean = createBean(name, beanDefinition, args);\n        return (T) getObjectForBeanInstance(bean, name);\n    }  \n\n    private Object getObjectForBeanInstance(Object beanInstance, String beanName) {\n        if (!(beanInstance instanceof FactoryBean)) {\n            return beanInstance;\n        }\n\n        Object object = getCachedObjectForFactoryBean(beanName);\n\n        if (object == null) {\n            FactoryBean&lt;?&gt; factoryBean = (FactoryBean&lt;?&gt;) beanInstance;\n            object = getObjectFromFactoryBean(factoryBean, beanName);\n        }\n\n        return object;\n    }\n\n    // ...\n}\n</code></pre> <ul> <li>\u200b\u9996\u5148\u200b\u8fd9\u91cc\u200b\u628a\u200b <code>AbstractBeanFactory</code> \u200b\u539f\u6765\u200b\u7ee7\u627f\u200b\u7684\u200b <code>DefaultSingletonBeanRegistry</code>\uff0c\u200b\u4fee\u6539\u200b\u4e3a\u200b\u7ee7\u627f\u200b <code>FactoryBeanRegistrySupport</code>\u3002\u200b\u56e0\u4e3a\u200b\u9700\u8981\u200b\u6269\u5c55\u200b\u51fa\u200b\u521b\u5efa\u200b <code>FactoryBean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u80fd\u529b\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u200b\u5c31\u200b\u60f3\u200b\u4e00\u4e2a\u200b\u94fe\u6761\u200b\u670d\u52a1\u200b\u4e0a\u200b\uff0c\u200b\u622a\u51fa\u200b\u4e00\u4e2a\u200b\u6bb5\u6765\u200b\u5904\u7406\u200b\u989d\u5916\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u5e76\u200b\u628a\u200b\u94fe\u6761\u200b\u518d\u200b\u94fe\u63a5\u200b\u4e0a\u200b\u3002</li> <li>\u200b\u6b64\u5904\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u529f\u80fd\u200b\u4e3b\u8981\u200b\u662f\u200b\u5728\u200b <code>doGetBean</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u8c03\u7528\u200b <code>(T) getObjectForBeanInstance(sharedInstance, name)</code> \u200b\u5bf9\u200b\u83b7\u53d6\u200b <code>FactoryBean</code> \u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u5728\u200b <code>getObjectForBeanInstance</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u505a\u200b\u5177\u4f53\u200b\u7684\u200b <code>instanceof</code> \u200b\u5224\u65ad\u200b\uff0c\u200b\u53e6\u5916\u200b\u8fd8\u4f1a\u200b\u4ece\u200b <code>FactoryBean</code> \u200b\u7684\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u8c03\u7528\u200b <code>FactoryBeanRegistrySupport#getObjectFromFactoryBean</code>\uff0c\u200b\u6267\u884c\u200b\u5177\u4f53\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#1-bean","title":"1. \u200b\u6d4b\u8bd5\u200bbean","text":"<p>Java<pre><code>public interface IUserDao {\n\n    String queryUserName(String uId);\n\n}\n</code></pre> * \u200b\u8fd9\u4e2a\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u5220\u6389\u200b UserDao\uff0c\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b IUserDao \u200b\u63a5\u53e3\u200b\uff0c\u200b\u4e4b\u200b\u6240\u200b\u8fd9\u6837\u200b\u505a\u200b\u662f\u200b\u4e3a\u4e86\u200b\u901a\u8fc7\u200b FactoryBean \u200b\u505a\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u5bf9\u8c61\u200b\u7684\u200b\u4ee3\u7406\u200b\u64cd\u4f5c\u200b\u3002</p> Java<pre><code>public class UserService {\n\n    private String uId;\n    private String company;\n    private String location;\n    private IUserDao userDao;\n\n    public String queryUserInfo() {\n        return userDao.queryUserName(uId) + \",\" + company + \",\" + location;\n    }\n\n    // ...get/set\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b UserService \u200b\u65b0\u200b\u4fee\u6539\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u539f\u6709\u200b UserDao \u200b\u5c5e\u6027\u200b\u4e3a\u200b IUserDao\uff0c\u200b\u540e\u9762\u200b\u6211\u4eec\u200b\u4f1a\u200b\u7ed9\u200b\u8fd9\u4e2a\u200b\u5c5e\u6027\u200b\u6ce8\u5165\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#2-factorybean","title":"2. \u200b\u5b9a\u4e49\u200b FactoryBean \u200b\u5bf9\u8c61","text":"Java<pre><code>public class ProxyBeanFactory implements FactoryBean&lt;IUserDao&gt; {\n\n    @Override\n    public IUserDao getObject() throws Exception {\n        InvocationHandler handler = (proxy, method, args) -&gt; {\n\n            // \u200b\u6dfb\u52a0\u200b\u6392\u9664\u200b\u65b9\u6cd5\u200b\n            if (\"toString\".equals(method.getName())) return this.toString();\n\n            Map&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();\n            hashMap.put(\"10001\", \"\u200b\u82cd\u955c\u200b\u6708\u200b\");\n\n            return \"\u200b\u4f60\u200b\u88ab\u200b\u4ee3\u7406\u200b\u4e86\u200b \" + method.getName() + \"\uff1a\" + hashMap.get(args[0].toString());\n        };\n        return (IUserDao) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{IUserDao.class}, handler);\n    }\n\n    @Override\n    public Class&lt;?&gt; getObjectType() {\n        return IUserDao.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b <code>FactoryBean</code> \u200b\u7684\u200b\u4ee3\u7406\u200b\u7c7b\u200b <code>ProxyBeanFactory</code> \u200b\u540d\u79f0\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u6a21\u62df\u200b\u4e86\u200b UserDao \u200b\u7684\u200b\u539f\u6709\u200b\u529f\u80fd\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b MyBatis \u200b\u6846\u67b6\u200b\u4e2d\u200b\u7684\u200b\u4ee3\u7406\u200b\u64cd\u4f5c\u200b\u3002</li> <li><code>getObject()</code> \u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b <code>InvocationHandler</code> \u200b\u7684\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5f53\u6709\u200b\u65b9\u6cd5\u200b\u8c03\u7528\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5219\u200b\u6267\u884c\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u7684\u200b\u529f\u80fd\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#3_2","title":"3. \u200b\u914d\u7f6e\u6587\u4ef6","text":"Java<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\" scope=\"prototype\"&gt;\n        &lt;property name=\"uId\" value=\"10001\"/&gt;\n        &lt;property name=\"company\" value=\"\u200b\u817e\u8baf\u200b\"/&gt;\n        &lt;property name=\"location\" value=\"\u200b\u6df1\u5733\u200b\"/&gt;\n        &lt;property name=\"userDao\" ref=\"proxyUserDao\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"proxyUserDao\" class=\"test.bean.ProxyBeanFactory\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#4_1","title":"4. \u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff08\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\uff09","text":"Java<pre><code>@Test\npublic void test_prototype() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n    applicationContext.registerShutdownHook();   \n\n    // 2. \u200b\u83b7\u53d6\u200bBean\u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\n    UserService userService01 = applicationContext.getBean(\"userService\", UserService.class);\n    UserService userService02 = applicationContext.getBean(\"userService\", UserService.class);\n\n    // 3. \u200b\u914d\u7f6e\u200b scope=\"prototype/singleton\"\n    System.out.println(userService01);\n    System.out.println(userService02);    \n\n    // 4. \u200b\u6253\u5370\u200b\u5341\u516d\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\n    System.out.println(userService01 + \" \u200b\u5341\u516d\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\uff1a\" + Integer.toHexString(userService01.hashCode()));\n    System.out.println(ClassLayout.parseInstance(userService01).toPrintable());\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b spring.xml \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u4e86\u200b scope=\"prototype\" \u200b\u8fd9\u6837\u200b\u5c31\u200b\u6bcf\u6b21\u200b\u83b7\u53d6\u200b\u5230\u200b\u7684\u200b\u5bf9\u8c61\u200b\u90fd\u200b\u5e94\u8be5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002</li> <li>\u200b\u8fd9\u91cc\u200b\u5224\u65ad\u200b\u5bf9\u8c61\u200b\u662f\u5426\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u4f1a\u200b\u770b\u5230\u200b\u6253\u5370\u200b\u7684\u200b\u7c7b\u200b\u5bf9\u8c61\u200b\u7684\u200b\u54c8\u5e0c\u200b\u503c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u628a\u200b\u5341\u516d\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\u6253\u5370\u200b\u51fa\u6765\u200b\u3002</li> </ul> result<pre><code>test.bean.UserService$$EnhancerByCGLIB$$44974b60@6b419da\ntest.bean.UserService$$EnhancerByCGLIB$$44974b60@3b2da18f\ntest.bean.UserService$$EnhancerByCGLIB$$44974b60@6b419da \u200b\u5341\u516d\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\uff1a6b419da\n# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\ntest.bean.UserService$$EnhancerByCGLIB$$44974b60 object internals:\n OFFSET  SIZE                      TYPE DESCRIPTION                                               VALUE\n      0     4                           (object header)                                           01 da 19 b4 (00000001 11011010 00011001 10110100) (-1273374207)\n      4     4                           (object header)                                           06 00 00 00 (00000110 00000000 00000000 00000000) (6)\n      8     4                           (object header)                                           80 de 19 00 (10000000 11011110 00011001 00000000) (1695360)\n     12     4          java.lang.String UserService.uId                                           (object)\n     16     4          java.lang.String UserService.company                                       (object)\n     20     4          java.lang.String UserService.location                                      (object)\n     24     4        test.bean.IUserDao UserService.userDao                                       (object)\n     28     1                   boolean UserService$$EnhancerByCGLIB$$44974b60.CGLIB$BOUND        true\n     29     3                           (alignment/padding gap)                                  \n     32     4   net.sf.cglib.proxy.NoOp UserService$$EnhancerByCGLIB$$44974b60.CGLIB$CALLBACK_0   (object)\n     36     4                           (loss due to the next object alignment)\nInstance size: 40 bytes\nSpace losses: 3 bytes internal + 4 bytes external = 7 bytes total\n</code></pre> <ul> <li>\u200b\u5bf9\u8c61\u200b\u540e\u9762\u200b\u7684\u200b\u8fd9\u200b\u4e00\u5c0f\u200b\u6bb5\u200b\u5b57\u7b26\u4e32\u200b\u5c31\u662f\u200b16\u200b\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\u503c\u200b\uff0c\u200b\u5728\u200b\u5bf9\u8c61\u200b\u5934\u200b\u54c8\u5e0c\u200b\u503c\u200b\u5b58\u653e\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e0a\u200b\u770b\u200b\uff0c\u200b\u4e5f\u200b\u6709\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6570\u503c\u200b\u3002\u200b\u53ea\u4e0d\u8fc7\u200b\u8fd9\u4e2a\u200b\u7ed3\u679c\u200b\u662f\u200b\u5012\u200b\u8fc7\u6765\u200b\u7684\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b 44974b60@6b419da\u300144974b60@3b2da18f\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u5bf9\u8c61\u200b\u7684\u200b\u7ed3\u5c3e\u200b16\u200b\u8fdb\u5236\u200b\u54c8\u5e0c\u200b\u503c\u200b\u5e76\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u7684\u200b\u539f\u578b\u200b\u6a21\u5f0f\u200b\u662f\u200b\u751f\u6548\u200b\u7684\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#6","title":"6. \u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff08\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\uff09","text":"Java<pre><code>@Test\npublic void test_factory_bean() {\n    // 1.\u200b\u521d\u59cb\u5316\u200b BeanFactory\n    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n    applicationContext.registerShutdownHook(); \n\n    // 2. \u200b\u8c03\u7528\u200b\u4ee3\u7406\u200b\u65b9\u6cd5\u200b\n    UserService userService = applicationContext.getBean(\"userService\", UserService.class);\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + userService.queryUserInfo());\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b</p> Bash<pre><code>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u4f60\u200b\u88ab\u200b\u4ee3\u7406\u200b\u4e86\u200b queryUserName\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b,\u200b\u817e\u8baf\u200b,\u200b\u6df1\u5733\u200b\n\nProcess finished with exit code 0\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-09/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/npVKYqHVTDgYWa2Jq8PB-A</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/","title":"\u57fa\u4e8e\u200b\u89c2\u5bdf\u8005\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5bb9\u5668\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668","text":"<p> \u200b\u7ea6\u200b 1703 \u200b\u4e2a\u200b\u5b57\u200b  346 \u200b\u884c\u200b\u4ee3\u7801\u200b  2 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 10 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5728\u200b Spring \u200b\u4e2d\u6709\u200b\u4e00\u4e2a\u200b <code>Event</code> \u200b\u4e8b\u4ef6\u200b\u529f\u80fd\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u53d1\u5e03\u200b\u4ee5\u53ca\u200b\u76d1\u542c\u200b\u4e8b\u4ef6\u200b\u6765\u200b\u5b8c\u6210\u200b\u4e00\u4e9b\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u52a8\u4f5c\u200b\u3002\u200b\u6bd4\u5982\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7528\u6237\u6ce8\u518c\u200b\u7684\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u5f53\u6709\u200b\u7528\u6237\u200b\u6267\u884c\u200b\u6ce8\u518c\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u200b\u4e2d\u200b\u7ed9\u200b\u7528\u6237\u200b\u53d1\u9001\u200b\u4e00\u4e9b\u200b\u4f18\u60e0\u5238\u200b\u548c\u200b\u77ed\u4fe1\u200b\u63d0\u9192\u200b\uff0c\u200b\u8fd9\u6837\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5c5e\u4e8e\u200b\u57fa\u672c\u529f\u80fd\u200b\u7684\u200b\u6ce8\u518c\u200b\u548c\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7b56\u7565\u200b\u670d\u52a1\u200b\u5206\u5f00\u200b\uff0c\u200b\u964d\u4f4e\u200b\u7cfb\u7edf\u200b\u7684\u200b\u8026\u5408\u200b\u3002\u200b\u4ee5\u540e\u200b\u5728\u200b\u6269\u5c55\u200b\u6ce8\u518c\u200b\u670d\u52a1\u200b\uff0c\u200b\u6bd4\u5982\u200b\u9700\u8981\u200b\u6dfb\u52a0\u200b\u98ce\u63a7\u200b\u7b56\u7565\u200b\u3001\u200b\u6dfb\u52a0\u200b\u5b9e\u540d\u200b\u8ba4\u8bc1\u200b\u3001\u200b\u5224\u65ad\u200b\u7528\u6237\u200b\u5c5e\u6027\u200b\u7b49\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u5230\u200b\u4f9d\u8d56\u200b\u6ce8\u518c\u200b\u6210\u529f\u200b\u540e\u200b\u6267\u884c\u200b\u7684\u200b\u52a8\u4f5c\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\u5728\u200b\u672c\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4ee5\u200b\u89c2\u5bdf\u8005\u200b\u6a21\u5f0f\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5b9e\u73b0\u200b <code>Spring Event</code> \u200b\u7684\u200b\u5bb9\u5668\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u529f\u80fd\u200b\uff0c\u200b\u6700\u7ec8\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5728\u200b\u73b0\u6709\u200b\u5b9e\u73b0\u200b\u7684\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u3001\u200b\u76d1\u542c\u200b\u548c\u200b\u53d1\u5e03\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u4fe1\u606f\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u5176\u5b9e\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u672c\u8eab\u200b\u5c31\u662f\u200b\u4e00\u79cd\u200b\u89c2\u5bdf\u8005\u200b\u6a21\u5f0f\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5b83\u200b\u6240\u8981\u200b\u89e3\u51b3\u200b\u7684\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u72b6\u6001\u200b\u6539\u53d8\u200b\u7ed9\u200b\u5176\u4ed6\u200b\u5bf9\u8c61\u200b\u901a\u77e5\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u800c\u4e14\u200b\u8981\u200b\u8003\u8651\u200b\u5230\u200b\u6613\u7528\u200b\u548c\u200b\u4f4e\u200b\u8026\u5408\u200b\uff0c\u200b\u4fdd\u8bc1\u200b\u9ad8\u5ea6\u200b\u7684\u200b\u534f\u4f5c\u200b\u3002</p> <p>\u200b\u5728\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u4e0a\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u51fa\u200b\u4e8b\u4ef6\u200b\u7c7b\u200b\u3001\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u200b\u3001\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e9b\u200b\u7c7b\u200b\u7684\u200b\u529f\u80fd\u200b\u9700\u8981\u200b\u7ed3\u5408\u200b\u5230\u200b Spring \u200b\u7684\u200b <code>AbstractApplicationContext#refresh()</code>\uff0c\u200b\u4ee5\u4fbf\u200b\u4e8e\u200b\u5904\u7406\u4e8b\u4ef6\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b </p> <ul> <li>\u200b\u5728\u200b\u6574\u4e2a\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4ecd\u7136\u200b\u9700\u8981\u200b\u5728\u200b\u9762\u5411\u7528\u6237\u200b\u7684\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b <code>AbstractApplicationContext</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u76f8\u5173\u200b\u4e8b\u4ef6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u521d\u59cb\u5316\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u8005\u200b\u3001\u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3001\u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5237\u65b0\u200b\u5b8c\u6210\u200b\u4e8b\u4ef6\u200b\u3002</li> <li>\u200b\u4f7f\u7528\u200b\u89c2\u5bdf\u8005\u200b\u6a21\u5f0f\u5b9a\u4e49\u200b\u4e8b\u4ef6\u200b\u7c7b\u200b\u3001\u200b\u76d1\u542c\u200b\u7c7b\u200b\u3001\u200b\u53d1\u5e03\u200b\u7c7b\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b\u4e00\u4e2a\u200b\u5e7f\u64ad\u200b\u5668\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u63a5\u6536\u200b\u5230\u200b\u4e8b\u4ef6\u200b\u63a8\u9001\u200b\u65f6\u200b\u8fdb\u884c\u200b\u5206\u6790\u200b\u5904\u7406\u200b\u7b26\u5408\u200b\u76d1\u542c\u200b\u4e8b\u4ef6\u200b\u63a5\u53d7\u8005\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u4f7f\u7528\u200b <code>isAssignableFrom</code> \u200b\u8fdb\u884c\u200b\u5224\u65ad\u200b\u3002</li> <li><code>isAssignableFrom</code> \u200b\u548c\u200b <code>instanceof</code> \u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4e0d\u8fc7\u200b <code>isAssignableFrom</code> \u200b\u662f\u200b\u7528\u6765\u200b\u5224\u65ad\u200b\u5b50\u7c7b\u200b\u548c\u200b\u7236\u7c7b\u200b\u7684\u200b\u5173\u7cfb\u200b\u7684\u200b\uff0c\u200b\u6216\u8005\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u548c\u200b\u63a5\u53e3\u200b\u7684\u200b\u5173\u7cfb\u200b\u7684\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u6240\u6709\u200b\u7684\u200b\u7c7b\u200b\u7684\u200b\u7ec8\u6781\u200b\u7236\u7c7b\u200b\u90fd\u200b\u662f\u200bObject\u3002\u200b\u5982\u679c\u200bA.isAssignableFrom(B)\u200b\u7ed3\u679c\u200b\u662f\u200btrue\uff0c\u200b\u8bc1\u660e\u200bB\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bA,\u200b\u4e5f\u200b\u5c31\u662f\u200bA\u200b\u53ef\u4ee5\u200b\u7531\u200bB\u200b\u8f6c\u6362\u200b\u800c\u200b\u6765\u200b\uff0c\u200b\u5373\u200b A \u200b\u662f\u200b B \u200b\u7684\u200b\u7236\u7c7b\u200b\u6216\u200b\u672c\u8eab\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Bash<pre><code>simple-spring-10\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Aware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanClassLoaderAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactoryAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanNameAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FactoryBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 FactoryBeanRegistrySupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventPublisher.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationListener.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 event\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextClosedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextRefreshedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApplicationContextAwareProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 event\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 ContextClosedEventListener.java\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 ContextRefreshedEventListener.java\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 CustomEvent.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 CustomEventListener.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>\u200b\u5bb9\u5668\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6574\u4e2a\u200b\u7c7b\u200b\u5173\u7cfb\u200b\u56fe\u4ee5\u200b\u56f4\u7ed5\u200b\u5b9e\u73b0\u200b <code>event</code> \u200b\u4e8b\u4ef6\u200b\u5b9a\u4e49\u200b\u3001\u200b\u53d1\u5e03\u200b\u3001\u200b\u76d1\u542c\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u548c\u200b\u628a\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u76f8\u5173\u200b\u5185\u5bb9\u200b\u4f7f\u7528\u200b <code>AbstractApplicationContext#refresh</code> \u200b\u8fdb\u884c\u200b\u6ce8\u518c\u200b\u548c\u200b\u5904\u7406\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u4ee5\u200b\u6269\u5c55\u200b <code>spring context</code> \u200b\u5305\u200b\u4e3a\u4e3b\u200b\uff0c\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e5f\u200b\u662f\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u5305\u200b\u4e0b\u200b\u8fdb\u884c\u200b\u6269\u5c55\u200b\u7684\u200b\uff0c\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u200b\u51fa\u6765\u200b\u76ee\u524d\u200b\u6240\u6709\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4ecd\u7136\u200b\u662f\u200b\u4ee5\u200b<code>IOC</code>\u200b\u4e3a\u4e3b\u200b\u3002</li> <li><code>ApplicationContext</code> \u200b\u5bb9\u5668\u200b\u7ee7\u627f\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u200b\u529f\u80fd\u200b\u63a5\u53e3\u200b <code>ApplicationEventPublisher</code>\uff0c\u200b\u5e76\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7c7b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u200b\u529f\u80fd\u200b\u3002</li> <li><code>ApplicationEventMulticaster</code> \u200b\u63a5\u53e3\u200b\u662f\u200b\u6ce8\u518c\u200b\u76d1\u542c\u5668\u200b\u548c\u200b\u53d1\u5e03\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5e7f\u64ad\u200b\u5668\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u6dfb\u52a0\u200b\u3001\u200b\u79fb\u9664\u200b\u548c\u200b\u53d1\u5e03\u200b\u4e8b\u4ef6\u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u6700\u540e\u200b\u662f\u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5173\u95ed\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u4ecd\u7136\u200b\u9700\u8981\u200b\u6269\u5c55\u200b\u5230\u200b <code>AbstractApplicationContext#close</code>\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u7531\u200b\u6ce8\u518c\u200b\u5230\u200b\u865a\u62df\u673a\u200b\u7684\u200b\u94a9\u5b50\u200b\u5b9e\u73b0\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#2_1","title":"2. \u200b\u5b9a\u4e49\u200b\u548c\u200b\u5b9e\u73b0\u200b\u4e8b\u4ef6","text":"Java<pre><code>public abstract class ApplicationEvent extends EventObject {\n\n    /**\n     * Constructs a prototypical Event.\n     *\n     * @param source The object on which the Event initially occurred.\n     * @throws IllegalArgumentException if source is null.\n     */\n    public ApplicationEvent(Object source) {\n        super(source);\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u4ee5\u200b\u7ee7\u627f\u200b <code>java.util.EventObject</code> \u200b\u5b9a\u4e49\u51fa\u200b\u5177\u5907\u200b\u4e8b\u4ef6\u200b\u529f\u80fd\u200b\u7684\u200b\u62bd\u8c61\u7c7b\u200b <code>ApplicationEvent</code>\uff0c\u200b\u540e\u7eed\u200b\u6240\u6709\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u7c7b\u200b\u90fd\u200b\u9700\u8981\u200b\u7ee7\u627f\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u3002</li> </ul> Java<pre><code>public class ApplicationContextEvent extends ApplicationEvent {\n\n    /**\n     * Constructs a prototypical Event.\n     *\n     * @param source The object on which the Event initially occurred.\n     * @throws IllegalArgumentException if source is null.\n     */\n    public ApplicationContextEvent(Object source) {\n        super(source);\n    }\n\n    /**\n     * Get the &lt;code&gt;ApplicationContext&lt;/code&gt; that the event was raised for.\n     */\n    public final ApplicationContext getApplicationContext() {\n        return (ApplicationContext) getSource();\n    }\n\n}\n</code></pre> Java<pre><code>public class ContextClosedEvent extends ApplicationContextEvent{\n\n    /**\n     * Constructs a prototypical Event.\n     *\n     * @param source The object on which the Event initially occurred.\n     * @throws IllegalArgumentException if source is null.\n     */\n    public ContextClosedEvent(Object source) {\n        super(source);\n    }\n\n}\n</code></pre> Java<pre><code>public class ContextRefreshedEvent extends ApplicationContextEvent{\n    /**\n     * Constructs a prototypical Event.\n     *\n     * @param source The object on which the Event initially occurred.\n     * @throws IllegalArgumentException if source is null.\n     */\n    public ContextRefreshedEvent(Object source) {\n        super(source);\n    }\n\n}\n</code></pre> <ul> <li><code>ApplicationContextEvent</code> \u200b\u662f\u200b\u5b9a\u4e49\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u62bd\u8c61\u7c7b\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u5305\u62ec\u200b\u5173\u95ed\u200b\u3001\u200b\u5237\u65b0\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u7528\u6237\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u90fd\u200b\u9700\u8981\u200b\u7ee7\u627f\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u3002</li> <li><code>ContextClosedEvent</code>\u3001<code>ContextRefreshedEvent</code>\uff0c\u200b\u5206\u522b\u200b\u662f\u200b Spring \u200b\u6846\u67b6\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e24\u4e2a\u200b\u4e8b\u4ef6\u200b\u7c7b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u76d1\u542c\u200b\u5237\u65b0\u200b\u548c\u200b\u5173\u95ed\u200b\u52a8\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#3_1","title":"3. \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668","text":"Java<pre><code>public interface ApplicationListener&lt;E extends ApplicationEvent&gt; extends EventListener {\n\n    /**\n     * Handle an application event.\n     * @param event the event to respond to\n     */\n    void onApplicationEvent(E event);\n}\n</code></pre> <ul> <li>\u200b\u7ee7\u627f\u200b <code>java.util.EventListener</code> \u200b\u5b9a\u4e49\u200b\u5177\u5907\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u200b\u529f\u80fd\u200b\u7684\u200b <code>ApplicationListener</code>\uff0c\u200b\u540c\u65f6\u200b\u5b9a\u4e49\u200b \u200b\u6cdb\u578b\u200b <code>&lt;E extends ApplicationEvent&gt;</code> \u200b\u4fdd\u8bc1\u200b\u76d1\u542c\u200b Spring \u200b\u4e8b\u4ef6\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#4","title":"4. \u200b\u4e8b\u4ef6\u200b\u5e7f\u64ad\u200b\u5668","text":"Java<pre><code>public interface ApplicationEventMulticaster {\n\n    /**\n     * Add a listener to be notified of all events.\n     * @param listener the listener to add\n     */\n    void addApplicationListener(ApplicationListener&lt;?&gt; listener);\n\n    /**\n     * Remove a listener from the notification list.\n     * @param listener the listener to remove\n     */\n    void removeApplicationListener(ApplicationListener&lt;?&gt; listener);\n\n    /**\n     * Multicast the given application event to appropriate listeners.\n     * @param event the event to multicast\n     */\n    void multicastEvent(ApplicationEvent event);\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u5e7f\u64ad\u200b\u5668\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u6dfb\u52a0\u200b\u76d1\u542c\u200b\u548c\u200b\u5220\u9664\u200b\u76d1\u542c\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4ee5\u53ca\u200b\u4e00\u4e2a\u200b\u5e7f\u64ad\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u65b9\u6cd5\u200b <code>multicastEvent</code> \u200b\u6700\u7ec8\u200b\u63a8\u9001\u200b\u65f6\u95f4\u200b\u6d88\u606f\u200b\u4e5f\u200b\u4f1a\u200b\u7ecf\u8fc7\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5904\u7406\u200b\u8c01\u200b\u8be5\u200b\u63a5\u6536\u200b\u4e8b\u4ef6\u200b\u3002</li> </ul> Java<pre><code>public abstract class AbstractApplicationEventMulticaster implements ApplicationEventMulticaster, BeanFactoryAware {\n    public final Set&lt;ApplicationListener&lt;ApplicationEvent&gt;&gt; applicationListeners = new LinkedHashSet&lt;&gt;();\n\n    private BeanFactory beanFactory;\n\n    @Override\n    public void addApplicationListener(ApplicationListener&lt;?&gt; listener) {\n        applicationListeners.add((ApplicationListener&lt;ApplicationEvent&gt;) listener);\n    }\n\n    @Override\n    public void removeApplicationListener(ApplicationListener&lt;?&gt; listener) {\n        applicationListeners.remove(listener);\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) {\n        this.beanFactory = beanFactory;\n    }\n\n    /**\n     * Return a Collection of ApplicationListeners matching the given\n     * event type. Non-matching listeners get excluded early.\n     * @param event the event to be propagated. Allows for excluding\n     * non-matching listeners early, based on cached matching information.\n     * @return a Collection of ApplicationListeners\n     * @see ApplicationListener\n     */\n    protected Collection&lt;ApplicationListener&gt; getApplicationListeners(ApplicationEvent event) {\n        LinkedList&lt;ApplicationListener&gt; allListeners = new LinkedList&lt;&gt;();\n        for (ApplicationListener&lt;ApplicationEvent&gt; listener : applicationListeners) {\n            if (supportsEvent(listener, event)) allListeners.add(listener);\n        }\n        return allListeners;\n    }\n\n    protected boolean supportsEvent(ApplicationListener&lt;ApplicationEvent&gt; applicationListener, ApplicationEvent event) {\n        Class&lt;? extends ApplicationListener&gt; listenerClass = applicationListener.getClass();\n\n        // \u200b\u6309\u7167\u200b CglibSubclassingInstantiationStrategy\u3001SimpleInstantiationStrategy \u200b\u4e0d\u540c\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7c7b\u578b\u200b\uff0c\u200b\u9700\u8981\u200b\u5224\u65ad\u200b\u540e\u200b\u83b7\u53d6\u200b\u76ee\u6807\u200b class\n        Class&lt;?&gt; targetClass = ClassUtils.isCglibProxyClass(listenerClass) ? listenerClass.getSuperclass() : listenerClass;\n        Type genericInterface = targetClass.getGenericInterfaces()[0];\n\n        Type actualTypeArgument = ((ParameterizedType) genericInterface).getActualTypeArguments()[0];\n        String className = actualTypeArgument.getTypeName();\n        Class&lt;?&gt; eventClassName;\n        try {\n            eventClassName = Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            throw new BeansException(\"wrong event class name: \" + className);\n        }\n        // \u200b\u5224\u5b9a\u200b\u6b64\u200b eventClassName \u200b\u5bf9\u8c61\u200b\u6240\u200b\u8868\u793a\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u63a5\u53e3\u200b\u4e0e\u200b\u6307\u5b9a\u200b\u7684\u200b event.getClass() \u200b\u53c2\u6570\u200b\u6240\u200b\u8868\u793a\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u63a5\u53e3\u200b\u662f\u5426\u200b\u76f8\u540c\u200b\uff0c\u200b\u6216\u200b\u662f\u5426\u662f\u200b\u5176\u8d85\u7c7b\u200b\u6216\u200b\u8d85\u200b\u63a5\u53e3\u200b\u3002\n        // isAssignableFrom\u200b\u662f\u200b\u7528\u6765\u200b\u5224\u65ad\u200b\u5b50\u7c7b\u200b\u548c\u200b\u7236\u7c7b\u200b\u7684\u200b\u5173\u7cfb\u200b\u7684\u200b\uff0c\u200b\u6216\u8005\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u548c\u200b\u63a5\u53e3\u200b\u7684\u200b\u5173\u7cfb\u200b\u7684\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u6240\u6709\u200b\u7684\u200b\u7c7b\u200b\u7684\u200b\u7ec8\u6781\u200b\u7236\u7c7b\u200b\u90fd\u200b\u662f\u200bObject\u3002\n        // \u200b\u5982\u679c\u200bA.isAssignableFrom(B)\u200b\u7ed3\u679c\u200b\u662f\u200btrue\uff0c\u200b\u8bc1\u660e\u200bB\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bA,\u200b\u4e5f\u200b\u5c31\u662f\u200bA\u200b\u53ef\u4ee5\u200b\u7531\u200bB\u200b\u8f6c\u6362\u200b\u800c\u200b\u6765\u200b\u3002\u200b\u5373\u200b A \u200b\u662f\u200b B \u200b\u7684\u200b\u7236\u7c7b\u200b\u6216\u200b\u672c\u8eab\u200b\n        return eventClassName.isAssignableFrom(event.getClass());\n    }\n}\n</code></pre> <ul> <li><code>AbstractApplicationEventMulticaster</code> \u200b\u662f\u200b\u5bf9\u200b\u4e8b\u4ef6\u200b\u5e7f\u64ad\u200b\u5668\u200b\u7684\u200b\u516c\u7528\u200b\u65b9\u6cd5\u200b\u63d0\u53d6\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u7c7b\u4e2d\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u4e00\u4e9b\u200b\u57fa\u672c\u529f\u80fd\u200b\uff0c\u200b\u907f\u514d\u200b\u6240\u6709\u200b\u76f4\u63a5\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\u653e\u200b\u8fd8\u200b\u9700\u8981\u200b\u5904\u7406\u200b\u7ec6\u8282\u200b\u3002</li> <li>\u200b\u9664\u4e86\u200b\u50cf\u200b <code>addApplicationListener</code>\u3001<code>removeApplicationListener</code>\uff0c\u200b\u8fd9\u6837\u200b\u7684\u200b\u901a\u7528\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u8fd9\u4e2a\u200b\u7c7b\u4e2d\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u200b <code>getApplicationListeners</code> \u200b\u548c\u200b <code>supportsEvent</code> \u200b\u7684\u200b\u5904\u7406\u200b\u3002</li> <li><code>getApplicationListeners</code> \u200b\u65b9\u6cd5\u200b\u4e3b\u8981\u200b\u662f\u200b\u6458\u53d6\u200b\u7b26\u5408\u200b\u5e7f\u64ad\u200b\u4e8b\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u76d1\u542c\u200b\u5904\u7406\u5668\u200b\uff0c\u200b\u5177\u4f53\u200b\u8fc7\u6ee4\u200b\u52a8\u4f5c\u200b\u5728\u200b <code>supportsEvent</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u5728\u200b <code>supportsEvent</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u5305\u62ec\u200b\u5bf9\u200b<code>Cglib</code>\u3001<code>Simple</code>\u200b\u4e0d\u540c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u9700\u8981\u200b\u83b7\u53d6\u200b\u76ee\u6807\u200bClass\uff0cCglib\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u9700\u8981\u200b\u83b7\u53d6\u200b\u7236\u7c7b\u200b\u7684\u200bClass\uff0c\u200b\u666e\u901a\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u4e0d\u200b\u9700\u8981\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200b\u63d0\u53d6\u200b\u63a5\u53e3\u200b\u548c\u200b\u5bf9\u5e94\u200b\u7684\u200b <code>ParameterizedType</code> \u200b\u548c\u200b <code>eventClassName</code>\uff0c\u200b\u65b9\u4fbf\u200b\u6700\u540e\u200b\u786e\u8ba4\u200b\u662f\u5426\u200b\u4e3a\u200b\u5b50\u7c7b\u200b\u548c\u200b\u7236\u7c7b\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u4ee5\u6b64\u200b\u8bc1\u660e\u200b\u6b64\u200b\u4e8b\u4ef6\u200b\u5f52\u200b\u8fd9\u4e2a\u200b\u7b26\u5408\u200b\u7684\u200b\u7c7b\u200b\u5904\u7406\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#5","title":"5. \u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u8005\u200b\u7684\u200b\u5b9a\u4e49\u200b\u548c\u200b\u5b9e\u73b0","text":"Java<pre><code>public interface ApplicationEventPublisher {\n\n    /**\n     * Notify all listeners registered with this application of an application\n     * event. Events may be framework events (such as RequestHandledEvent)\n     * or application-specific events.\n     * @param event the event to publish\n     */\n    void publishEvent(ApplicationEvent event);\n\n}\n</code></pre> <ul> <li><code>ApplicationEventPublisher</code> \u200b\u662f\u200b\u6574\u4e2a\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u53d1\u5e03\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u90fd\u200b\u9700\u8981\u200b\u4ece\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u53d1\u5e03\u200b\u51fa\u53bb\u200b\u3002</li> </ul> Java<pre><code>public abstract class AbstractApplicationContext extends DefaultResourceLoader implements ConfigurableApplicationContext {\n\n    public static final String APPLICATION_EVENT_MULTICASTER_BEAN_NAME = \"applicationEventMulticaster\";\n\n    private ApplicationEventMulticaster applicationEventMulticaster;\n\n    @Override\n    public void refresh() throws BeansException {\n\n        // 6. \u200b\u521d\u59cb\u5316\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u8005\u200b\n        initApplicationEventMulticaster();\n\n        // 7. \u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\n        registerListeners();\n\n        // 9. \u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5237\u65b0\u200b\u5b8c\u6210\u200b\u4e8b\u4ef6\u200b\n        finishRefresh();\n    }\n\n    private void initApplicationEventMulticaster() {\n        ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n        applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);\n        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, applicationEventMulticaster);\n    }\n\n    private void registerListeners() {\n        Collection&lt;ApplicationListener&gt; applicationListeners = getBeansOfType(ApplicationListener.class).values();\n        for (ApplicationListener listener : applicationListeners) {\n            applicationEventMulticaster.addApplicationListener(listener);\n        }\n    }\n\n    private void finishRefresh() {\n        publishEvent(new ContextRefreshedEvent(this));\n    }\n\n    @Override\n    public void publishEvent(ApplicationEvent event) {\n        applicationEventMulticaster.multicastEvent(event);\n    }\n\n    @Override\n    public void close() {\n        // \u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5173\u95ed\u200b\u4e8b\u4ef6\u200b\n        publishEvent(new ContextClosedEvent(this));\n\n        // \u200b\u6267\u884c\u200b\u9500\u6bc1\u200b\u5355\u4f8b\u200bbean\u200b\u7684\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b\n        getBeanFactory().destroySingletons();\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b\u62bd\u8c61\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b <code>AbstractApplicationContext#refresh</code> \u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u65b0\u589e\u200b\u4e86\u200b \u200b\u521d\u59cb\u5316\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u8005\u200b\u3001\u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3001\u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5237\u65b0\u200b\u5b8c\u6210\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u4e09\u4e2a\u200b\u65b9\u6cd5\u200b\u7528\u4e8e\u200b\u5904\u7406\u4e8b\u4ef6\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u521d\u59cb\u5316\u200b\u4e8b\u4ef6\u200b\u53d1\u5e03\u8005\u200b(<code>initApplicationEventMulticaster</code>)\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e00\u4e2a\u200b <code>SimpleApplicationEventMulticaster</code>\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u5e7f\u64ad\u200b\u5668\u200b\u3002</li> <li>\u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b(<code>registerListeners</code>)\uff0c\u200b\u901a\u8fc7\u200b <code>getBeansOfType</code> \u200b\u65b9\u6cd5\u200b\u83b7\u53d6\u200b\u5230\u200b\u6240\u6709\u200b\u4ece\u200b spring.xml \u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u5230\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u914d\u7f6e\u200b Bean \u200b\u5bf9\u8c61\u200b\u3002</li> <li>\u200b\u53d1\u5e03\u200b\u5bb9\u5668\u200b\u5237\u65b0\u200b\u5b8c\u6210\u200b\u4e8b\u4ef6\u200b(<code>finishRefresh</code>)\uff0c\u200b\u53d1\u5e03\u200b\u4e86\u200b\u7b2c\u4e00\u4e2a\u200b\u670d\u52a1\u5668\u200b\u542f\u52a8\u200b\u5b8c\u6210\u200b\u540e\u200b\u7684\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u4e8b\u4ef6\u200b\u901a\u8fc7\u200b <code>publishEvent</code> \u200b\u53d1\u5e03\u200b\u51fa\u53bb\u200b\uff0c\u200b\u5176\u5b9e\u200b\u4e5f\u200b\u5c31\u662f\u200b\u8c03\u7528\u200b\u4e86\u200b <code>applicationEventMulticaster.multicastEvent(event);</code> \u200b\u65b9\u6cd5\u200b\u3002</li> <li>\u200b\u6700\u540e\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>close</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u65b0\u200b\u589e\u52a0\u200b\u4e86\u200b\u53d1\u5e03\u200b\u4e00\u4e2a\u200b\u5bb9\u5668\u200b\u5173\u95ed\u200b\u4e8b\u4ef6\u200b\u3002<code>publishEvent(new ContextClosedEvent(this));</code></li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#4_1","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#1_2","title":"1. \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u76d1\u542c\u5668","text":"Java<pre><code>public class CustomEvent extends ApplicationContextEvent {\n\n    private Long id;\n    private String message;\n\n    /**\n     * Constructs a prototypical Event.\n     *\n     * @param source The object on which the Event initially occurred.\n     * @throws IllegalArgumentException if source is null.\n     */\n    public CustomEvent(Object source, Long id, String message) {\n        super(source);\n        this.id = id;\n        this.message = message;\n    }\n\n    // ...get/set\n}\n</code></pre> <ul> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u7c7b\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u81ea\u5df1\u200b\u7684\u200b\u60f3\u8981\u200b\u7684\u200b\u5165\u200b\u53c2\u200b\u4fe1\u606f\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u4e8b\u4ef6\u200b\u7c7b\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u88ab\u200b\u5b8c\u6210\u200b\u7684\u200b\u62ff\u5230\u200b\u76d1\u542c\u200b\u91cc\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4f60\u200b\u6dfb\u52a0\u200b\u7684\u200b\u5c5e\u6027\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u83b7\u5f97\u200b\u5230\u200b\u3002</li> </ul> Java<pre><code>public class CustomEventListener implements ApplicationListener&lt;CustomEvent&gt; {\n\n    @Override\n    public void onApplicationEvent(CustomEvent event) {\n        System.out.println(\"\u200b\u6536\u5230\u200b\uff1a\" + event.getSource() + \"\u200b\u6d88\u606f\u200b;\u200b\u65f6\u95f4\u200b\uff1a\" + new Date());\n        System.out.println(\"\u200b\u6d88\u606f\u200b\uff1a\" + event.getId() + \":\" + event.getMessage());\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u76d1\u542c\u200b <code>CustomEvent</code> \u200b\u4e8b\u4ef6\u200b\u7684\u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u81ea\u5df1\u200b\u60f3\u8981\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e00\u4e9b\u200b\u7528\u6237\u6ce8\u518c\u200b\u540e\u200b\u53d1\u9001\u200b\u4f18\u60e0\u5238\u200b\u548c\u200b\u77ed\u4fe1\u200b\u901a\u77e5\u200b\u7b49\u200b\u3002</li> <li>\u200b\u53e6\u5916\u200b\u662f\u200b\u5173\u4e8e\u200b <code>ContextRefreshedEventListener implements ApplicationListener&lt;ContextRefreshedEvent&gt;</code>\u3001<code>ContextClosedEventListener implements ApplicationListener&lt;ContextClosedEvent&gt;</code> \u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u5c31\u200b\u4e0d\u200b\u6f14\u793a\u200b\u4e86\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u4e0b\u200b\u6e90\u7801\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#2_2","title":"2. \u200b\u914d\u7f6e\u6587\u4ef6","text":"XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean class=\"test.event.ContextRefreshedEventListener\"/&gt;\n\n    &lt;bean class=\"test.event.CustomEventListener\"/&gt;\n\n    &lt;bean class=\"test.event.ContextClosedEventListener\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#3_2","title":"3. \u200b\u5355\u5143\u6d4b\u8bd5","text":"Java<pre><code>public class ApiTest {\n\n    @Test\n    public void test_event() {\n        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n        applicationContext.publishEvent(new CustomEvent(applicationContext, 1019129009086763L, \"\u200b\u6210\u529f\u200b\u4e86\u200b\uff01\"));\n\n        applicationContext.registerShutdownHook();\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b applicationContext \u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u53d1\u5e03\u200b\u4e8b\u4ef6\u200b\u63a5\u53e3\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u53d1\u5e03\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u4e8b\u4ef6\u200b CustomEvent\uff0c\u200b\u5e76\u200b\u900f\u4f20\u200b\u4e86\u200b\u76f8\u5e94\u200b\u7684\u200b\u53c2\u6570\u4fe1\u606f\u200b\u3002</li> </ul> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b</p> result<pre><code>\u200b\u5237\u65b0\u200b\u4e8b\u4ef6\u200b\uff1atest.event.ContextRefreshedEventListener$$EnhancerByCGLIB$$6fbf3f99\n\u200b\u6536\u5230\u200b\uff1acom.iflove.simplespring.context.support.ClassPathXmlApplicationContext@6833ce2c\u200b\u6d88\u606f\u200b;\u200b\u65f6\u95f4\u200b\uff1aMon Nov 25 20:23:05 CST 2024\n\u200b\u6d88\u606f\u200b\uff1a1019129009086763:\u200b\u6210\u529f\u200b\u4e86\u200b\uff01\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-10/#_2","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/wf5XiY4AjFETLQZxEwcCEQ</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/","title":"\u57fa\u4e8e\u200bJDK\u200b\u548c\u200bCglib\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\uff0c\u200b\u5b9e\u73b0\u200bAOP\u200b\u6838\u5fc3\u200b\u529f\u80fd","text":"<p> \u200b\u7ea6\u200b 1831 \u200b\u4e2a\u200b\u5b57\u200b  332 \u200b\u884c\u200b\u4ee3\u7801\u200b  3 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 10 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5230\u200b\u672c\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u5c06\u8981\u200b\u4ece\u200b IOC \u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8f6c\u5165\u200b\u5230\u200b\u5173\u4e8e\u200b AOP(Aspect Oriented Programming) \u200b\u5185\u5bb9\u200b\u7684\u200b\u5f00\u53d1\u200b\u3002\u200b\u5728\u200b\u8f6f\u4ef6\u200b\u884c\u4e1a\u200b\uff0cAOP \u200b\u610f\u200b\u4e3a\u200b\uff1a\u200b\u9762\u5411\u200b\u5207\u9762\u200b\u7f16\u7a0b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u9884\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65b9\u5f0f\u200b\u548c\u200b\u8fd0\u884c\u200b\u671f\u95f4\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u5b9e\u73b0\u200b\u7a0b\u5e8f\u200b\u529f\u80fd\u200b\u529f\u80fd\u200b\u7684\u200b\u7edf\u4e00\u200b\u7ef4\u62a4\u200b\u3002\u200b\u5176\u5b9e\u200b AOP \u200b\u4e5f\u200b\u662f\u200b OOP \u200b\u7684\u200b\u5ef6\u7eed\u200b\uff0c\u200b\u5728\u200b Spring \u200b\u6846\u67b6\u200b\u4e2d\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4f7f\u7528\u200b AOP \u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\u7684\u200b\u5404\u4e2a\u200b\u90e8\u5206\u200b\u8fdb\u884c\u200b\u9694\u79bb\u200b\uff0c\u200b\u4ece\u800c\u200b\u4f7f\u200b\u5404\u200b\u6a21\u5757\u200b\u95f4\u200b\u7684\u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\u8026\u5408\u5ea6\u200b\u964d\u4f4e\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u200b\u590d\u7528\u200b\u6027\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u80fd\u200b\u63d0\u9ad8\u200b\u5f00\u53d1\u200b\u6548\u7387\u200b\u3002</p> <p>\u200b\u5173\u4e8e\u200b AOP \u200b\u7684\u200b\u6838\u5fc3\u6280\u672f\u200b\u5b9e\u73b0\u200b\u4e3b\u8981\u200b\u662f\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7ed9\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u66ff\u6362\u200b\u6389\u200b\u8fd9\u4e2a\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u200b\u7c7b\u6765\u200b\u5904\u7406\u200b\u4f60\u200b\u9700\u8981\u200b\u7684\u200b\u903b\u8f91\u200b\u3002\u200b\u6bd4\u5982\u200b\uff1a Java<pre><code>@Test\npublic void test_proxy_class() {\n    IUserService userService = (IUserService) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{IUserService.class}, (proxy, method, args) -&gt; \"\u200b\u4f60\u200b\u88ab\u200b\u4ee3\u7406\u200b\u4e86\u200b\uff01\");\n    String result = userService.queryUserInfo();\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + result);\n}\n</code></pre> \u200b\u4ee3\u7406\u200b\u7c7b\u200b\u7684\u200b\u5b9e\u73b0\u200b\u57fa\u672c\u200b\u90fd\u200b\u5927\u5bb6\u200b\u90fd\u200b\u89c1\u200b\u8fc7\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6709\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u601d\u8def\u200b\u540e\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u4e0b\u200b\u600e\u4e48\u200b\u7ed9\u200b\u65b9\u6cd5\u200b\u505a\u200b\u4ee3\u7406\u200b\u5462\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u3002\u200b\u53e6\u5916\u200b\u600e\u4e48\u200b\u53bb\u200b\u4ee3\u7406\u200b\u6240\u6709\u200b\u7b26\u5408\u200b\u67d0\u4e9b\u200b\u89c4\u5219\u200b\u7684\u200b\u6240\u6709\u200b\u7c7b\u4e2d\u200b\u65b9\u6cd5\u200b\u5462\u200b\u3002\u200b\u5982\u679c\u200b\u53ef\u4ee5\u200b\u4ee3\u7406\u200b\u6389\u200b\u6240\u6709\u200b\u7c7b\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u505a\u200b\u4e00\u4e2a\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668\u200b\uff0c\u200b\u7ed9\u200b\u6240\u6709\u200b\u88ab\u200b\u4ee3\u7406\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6dfb\u52a0\u200b\u4e0a\u200b\u4e00\u4e9b\u200b\u81ea\u5b9a\u4e49\u200b\u5904\u7406\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\u3001\u200b\u8bb0\u5f55\u200b\u8017\u65f6\u200b\u3001\u200b\u76d1\u63a7\u200b\u5f02\u5e38\u200b\u7b49\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u5728\u200b\u628a\u200b AOP \u200b\u6574\u4e2a\u200b\u5207\u9762\u200b\u8bbe\u8ba1\u200b\u878d\u5408\u200b\u5230\u200b Spring \u200b\u524d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u89e3\u51b3\u200b\u4e24\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u5982\u4f55\u200b\u7ed9\u200b\u7b26\u5408\u200b\u89c4\u5219\u200b\u7684\u200b\u65b9\u6cd5\u200b\u505a\u200b\u4ee3\u7406\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u505a\u200b\u5b8c\u200b\u4ee3\u7406\u200b\u65b9\u6cd5\u200b\u7684\u200b\u6848\u4f8b\u200b\u540e\u200b\uff0c\u200b\u628a\u200b\u7c7b\u200b\u7684\u200b\u804c\u8d23\u200b\u62c6\u5206\u200b\u51fa\u6765\u200b\u3002\u200b\u800c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u529f\u80fd\u200b\u70b9\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u4ee5\u200b\u5207\u9762\u200b\u7684\u200b\u601d\u60f3\u200b\u8fdb\u884c\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5f00\u53d1\u200b\u3002\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b\u5f88\u200b\u6e05\u695a\u200b AOP \u200b\u662f\u200b\u5565\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5207\u9762\u200b\u7406\u89e3\u200b\u4e3a\u7528\u200b\u5200\u5207\u200b\u97ed\u83dc\u200b\uff0c\u200b\u4e00\u6839\u200b\u4e00\u6839\u200b\u5207\u200b\u603b\u662f\u200b\u6709\u70b9\u200b\u6162\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7528\u624b\u200b(\u200b\u4ee3\u7406\u200b)\u200b\u628a\u200b\u97ed\u83dc\u200b\u634f\u6210\u200b\u4e00\u628a\u200b\uff0c\u200b\u7528\u200b\u83dc\u5200\u200b\u6216\u8005\u200b\u65a7\u5934\u200b\u8fd9\u6837\u200b\u4e0d\u540c\u200b\u7684\u200b\u62e6\u622a\u200b\u64cd\u4f5c\u200b\u6765\u200b\u5904\u7406\u200b\u3002\u200b\u800c\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u5176\u5b9e\u200b\u4e5f\u200b\u662f\u200b\u4e00\u6837\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u97ed\u83dc\u200b\u53d8\u6210\u200b\u4e86\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u83dc\u5200\u200b\u53d8\u6210\u200b\u4e86\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u5c31\u200b\u50cf\u200b\u4f60\u200b\u5728\u200b\u4f7f\u7528\u200b <code>Spring</code> \u200b\u7684\u200b <code>AOP</code> \u200b\u4e00\u6837\u200b\uff0c\u200b\u53ea\u200b\u5904\u7406\u200b\u4e00\u4e9b\u200b\u9700\u8981\u200b\u88ab\u200b\u62e6\u622a\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5728\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u540e\u200b\uff0c\u200b\u6267\u884c\u200b\u4f60\u200b\u5bf9\u200b\u65b9\u6cd5\u200b\u7684\u200b\u6269\u5c55\u200b\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5c31\u200b\u9700\u8981\u200b\u5148\u200b\u6765\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u4ee3\u7406\u200b\u65b9\u6cd5\u200b\u7684\u200b <code>Proxy</code>\uff0c\u200b\u5176\u5b9e\u200b\u4ee3\u7406\u200b\u65b9\u6cd5\u200b\u4e3b\u8981\u200b\u662f\u200b\u4f7f\u7528\u200b\u5230\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668\u200b\u7c7b\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\u7684\u200b\u8c03\u7528\u200b <code>MethodInterceptor#invoke</code>\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>invoke</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u5165\u200b\u53c2\u200b <code>Method method</code> \u200b\u8fdb\u884c\u200b <code>method.invoke(targetObj, args)</code> \u200b\u8fd9\u5757\u200b\u662f\u200b\u6574\u4e2a\u200b\u4f7f\u7528\u200b\u65f6\u200b\u7684\u200b\u5dee\u5f02\u200b\u3002</li> <li>\u200b\u9664\u4e86\u200b\u4ee5\u4e0a\u200b\u7684\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5230\u200b <code>org.aspectj.weaver.tools.PointcutParser</code> \u200b\u5904\u7406\u200b\u62e6\u622a\u200b\u8868\u8fbe\u5f0f\u200b <code>\"execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))\"</code>\uff0c\u200b\u6709\u200b\u4e86\u200b\u65b9\u6cd5\u200b\u4ee3\u7406\u200b\u548c\u200b\u5904\u7406\u200b\u62e6\u622a\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b8c\u6210\u200b\u8bbe\u8ba1\u200b\u51fa\u200b\u4e00\u4e2a\u200b AOP \u200b\u7684\u200b\u96cf\u5f62\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#java-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49-50-51-52-53-54-55-56-57-58-59-60-61-62-63-64-65-66-67-68-69-70-71-72-73-74-75-76-77-78-79-80-81-82-83-84-85-86-87-88-89-90-91-92simple-spring-11-src-main-java-com-iflove-simplespring-aop-advisedsupportjava-classfilterjava-methodmatcherjava-pointcutjava-targetsourcejava-aspectj-aspectjexpressionpointcutjava-framework-aopproxyjava-cglib2aopproxyjava-jdkdynamicaopproxyjava-reflectivemethodinvocationjava-beans-beansexceptionjava-propertyvaluejava-propertyvaluesjava-factory-awarejava-beanclassloaderawarejava-beanfactoryjava-beanfactoryawarejava-beannameawarejava-configurablelistablebeanfactoryjava-disposablebeanjava-factorybeanjava-hierarchicalbeanfactoryjava-initializingbeanjava-listablebeanfactoryjava-config-autowirecapablebeanfactoryjava-beandefinitionjava-beanfactorypostprocessorjava-beanpostprocessorjava-beanreferencejava-configurablebeanfactoryjava-singletonbeanregistryjava-support-abstractautowirecapablebeanfactoryjava-abstractbeandefinitionreaderjava-abstractbeanfactoryjava-beandefinitionreaderjava-beandefinitionregistryjava-cglibsubclassinginstantiationstrategyjava-defaultlistablebeanfactoryjava-defaultsingletonbeanregistryjava-disposablebeanadapterjava-factorybeanregistrysupportjava-instantiationstrategyjava-simpleinstantiationstrategyjava-xml-xmlbeandefinitionreaderjava-context-applicationcontextjava-applicationcontextawarejava-applicationeventjava-applicationeventpublisherjava-applicationlistenerjava-configurableapplicationcontextjava-event-abstractapplicationeventmulticasterjava-applicationcontexteventjava-applicationeventmulticasterjava-contextclosedeventjava-contextrefreshedeventjava-simpleapplicationeventmulticasterjava-support-abstractapplicationcontextjava-abstractrefreshableapplicationcontextjava-abstractxmlapplicationcontextjava-applicationcontextawareprocessorjava-classpathxmlapplicationcontextjava-core-io-classpathresourcejava-defaultresourceloaderjava-filesystemresourcejava-resourcejava-resourceloaderjava-urlresourcejava-utils-classutilsjava-resources-test-java","title":"Java<pre><code>simple-spring-11\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 aop\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 AdvisedSupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ClassFilter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 MethodMatcher.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PointCut.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 TargetSource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 aspectj\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AspectJExpressionPointcut.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 framework\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Cglib2AopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 JdkDynamicAopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ReflectiveMethodInvocation.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Aware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanClassLoaderAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactoryAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanNameAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FactoryBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 FactoryBeanRegistrySupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventPublisher.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationListener.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 event\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextClosedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextRefreshedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApplicationContextAwareProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n</code></pre>","text":"<p>AOP \u200b\u5207\u70b9\u200b\u8868\u8fbe\u5f0f\u200b\u548c\u200b\u4f7f\u7528\u200b\u4ee5\u53ca\u200b\u57fa\u4e8e\u200b JDK \u200b\u548c\u200b CGLIB \u200b\u7684\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u6574\u4e2a\u200b\u7c7b\u200b\u5173\u7cfb\u200b\u56fe\u200b\u5c31\u662f\u200b <code>AOP</code> \u200b\u5b9e\u73b0\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\u7684\u200b\u5730\u65b9\u200b\uff0c\u200b\u4e0a\u9762\u200b\u90e8\u5206\u200b\u662f\u200b\u5173\u4e8e\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5339\u914d\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4e0b\u9762\u200b\u4ece\u200b <code>AopProxy</code> \u200b\u5f00\u59cb\u200b\u662f\u200b\u5173\u4e8e\u200b\u65b9\u6cd5\u200b\u7684\u200b\u4ee3\u7406\u200b\u64cd\u4f5c\u200b\u3002</li> <li><code>AspectJExpressionPointcut</code> \u200b\u7684\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u4e3b\u8981\u200b\u4f9d\u8d56\u4e8e\u200b <code>aspectj</code> \u200b\u7ec4\u4ef6\u200b\u5e76\u200b\u5904\u7406\u200b <code>Pointcut</code>\u3001<code>ClassFilter</code>,\u3001<code>MethodMatcher</code> \u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4e13\u95e8\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u7c7b\u200b\u548c\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5339\u914d\u200b\u8fc7\u6ee4\u200b\u64cd\u4f5c\u200b\u3002</li> <li><code>AopProxy</code> \u200b\u662f\u200b\u4ee3\u7406\u200b\u7684\u200b\u62bd\u8c61\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e3b\u8981\u200b\u662f\u200b\u57fa\u4e8e\u200b <code>JDK</code> \u200b\u7684\u200b\u4ee3\u7406\u200b\u548c\u200b <code>Cglib</code> \u200b\u4ee3\u7406\u200b\u3002\u200b\u5728\u200b\u524d\u9762\u200b\u7ae0\u8282\u200b\u5173\u4e8e\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b <code>CglibSubclassingInstantiationStrategy</code>\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u4f7f\u7528\u200b\u8fc7\u200b <code>Cglib</code> \u200b\u63d0\u4f9b\u200b\u7684\u200b\u529f\u80fd\u200b\u3002</li> <li>\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u7684\u200b\u7ed3\u8bba\u200b\uff1a<ul> <li>jdk \u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u8981\u6c42\u200b\u76ee\u6807\u200b\u5fc5\u987b\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\uff0c\u200b\u751f\u6210\u200b\u7684\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u76f8\u540c\u200b\u63a5\u53e3\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4ee3\u7406\u200b\u4e0e\u200b\u76ee\u6807\u200b\u4e4b\u95f4\u200b\u662f\u200b\u5e73\u7ea7\u200b\u5144\u5f1f\u200b\u5173\u7cfb\u200b</li> <li>cglib \u200b\u4e0d\u200b\u8981\u6c42\u200b\u76ee\u6807\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b83\u200b\u751f\u6210\u200b\u7684\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u662f\u200b\u76ee\u6807\u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4ee3\u7406\u200b\u4e0e\u200b\u76ee\u6807\u200b\u4e4b\u95f4\u200b\u662f\u200b\u5b50\u7236\u200b\u5173\u7cfb\u200b</li> </ul> </li> </ul> <p></p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#2_1","title":"2. \u200b\u5207\u70b9\u200b\u8868\u8fbe\u5f0f","text":"<p>\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b</p> Java<pre><code>public interface Pointcut {\n\n    /**\n     * Return the ClassFilter for this pointcut.\n     * @return the ClassFilter (never &lt;code&gt;null&lt;/code&gt;)\n     */\n    ClassFilter getClassFilter();\n\n    /**\n     * Return the MethodMatcher for this pointcut.\n     * @return the MethodMatcher (never &lt;code&gt;null&lt;/code&gt;)\n     */\n    MethodMatcher getMethodMatcher();\n\n}\n</code></pre> <ul> <li>\u200b\u5207\u5165\u70b9\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u7528\u4e8e\u200b\u83b7\u53d6\u200b <code>ClassFilter</code>\u3001<code>MethodMatcher</code> \u200b\u7684\u200b\u4e24\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u63a5\u53e3\u200b\u83b7\u53d6\u200b\u90fd\u200b\u662f\u200b\u5207\u70b9\u200b\u8868\u8fbe\u5f0f\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</li> </ul> Java<pre><code>public interface ClassFilter {\n\n    /**\n     * Should the pointcut apply to the given interface or target class?\n     * @param clazz the candidate target class\n     * @return whether the advice should apply to the given target class\n     */\n    boolean matches(Class&lt;?&gt; clazz);\n\n}\n</code></pre> <ul> <li>\u200b\u5b9a\u4e49\u200b\u7c7b\u200b\u5339\u914d\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5207\u70b9\u200b\u627e\u5230\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u63a5\u53e3\u200b\u548c\u200b\u76ee\u6807\u200b\u7c7b\u200b\u3002</li> </ul> Java<pre><code>public interface MethodMatcher {\n\n    /**\n     * Perform static checking whether the given method matches. If this\n     * @return whether or not this method matches statically\n     */\n    boolean matches(Method method, Class&lt;?&gt; targetClass);\n\n}\n</code></pre> <ul> <li>\u200b\u65b9\u6cd5\u200b\u5339\u914d\u200b\uff0c\u200b\u627e\u5230\u200b\u8868\u8fbe\u5f0f\u200b\u8303\u56f4\u200b\u5185\u200b\u5339\u914d\u200b\u4e0b\u200b\u7684\u200b\u76ee\u6807\u200b\u7c7b\u200b\u548c\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5728\u4e0a\u6587\u200b\u7684\u200b\u6848\u4f8b\u200b\u4e2d\u200b\u6709\u6240\u200b\u4f53\u73b0\u200b\uff1a<code>methodMatcher.matches(method, targetObj.getClass())</code></li> </ul> <p>\u200b\u5b9e\u73b0\u200b\u5207\u70b9\u200b\u8868\u8fbe\u5f0f\u200b\u7c7b\u200b</p> Java<pre><code>public class AspectJExpressionPointcut implements PointCut, ClassFilter, MethodMatcher {\n\n    private static final Set&lt;PointcutPrimitive&gt; SUPPORTED_PRIMITIVES = new HashSet&lt;&gt;();\n\n    static {\n        SUPPORTED_PRIMITIVES.add(PointcutPrimitive.EXECUTION);\n    }\n\n    private final PointcutExpression pointcutExpression;\n\n    public AspectJExpressionPointcut(String expression) {\n        PointcutParser pointcutParser = PointcutParser.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(SUPPORTED_PRIMITIVES, this.getClass().getClassLoader());\n        pointcutExpression = pointcutParser.parsePointcutExpression(expression);\n    }\n\n    @Override\n    public boolean matches(Class&lt;?&gt; clazz) {\n        return pointcutExpression.couldMatchJoinPointsInType(clazz);\n    }\n\n    @Override\n    public boolean matches(Method method, Class&lt;?&gt; targetClass) {\n        return pointcutExpression.matchesMethodExecution(method).alwaysMatches();\n    }\n\n    @Override\n    public ClassFilter getClassFilter() {\n        return this;\n    }\n\n    @Override\n    public MethodMatcher getMethodMatcher() {\n        return this;\n    }\n}\n</code></pre> <ul> <li>\u200b\u5207\u70b9\u200b\u8868\u8fbe\u5f0f\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>Pointcut</code>\u3001<code>ClassFilter</code>\u3001<code>MethodMatcher</code>\uff0c\u200b\u4e09\u4e2a\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u4e3b\u8981\u200b\u662f\u200b\u5bf9\u200b <code>aspectj</code> \u200b\u5305\u200b\u63d0\u4f9b\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\u6821\u9a8c\u200b\u65b9\u6cd5\u200b\u4f7f\u7528\u200b\u3002</li> <li>\u200b\u5339\u914d\u200b matches\uff1a<code>pointcutExpression.couldMatchJoinPointsInType(clazz)</code>\u3001<code>pointcutExpression.matchesMethodExecution(method).alwaysMatches()</code>\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u5355\u72ec\u200b\u6d4b\u8bd5\u200b\u9a8c\u8bc1\u200b\u3002</li> </ul> <p>\u200b\u5339\u914d\u200b\u9a8c\u8bc1\u200b</p> Java<pre><code>@Test\npublic void test_aop() throws NoSuchMethodException {\n    AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut(\"execution(* cn.bugstack.springframework.test.bean.UserService.*(..))\");\n    Class&lt;UserService&gt; clazz = UserService.class;\n    Method method = clazz.getDeclaredMethod(\"queryUserInfo\");   \n\n    System.out.println(pointcut.matches(clazz));\n    System.out.println(pointcut.matches(method, clazz));          \n\n    // true\u3001true\n}\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u5355\u72ec\u200b\u63d0\u4f9b\u200b\u51fa\u6765\u200b\u4e00\u4e2a\u200b\u5339\u914d\u200b\u65b9\u6cd5\u200b\u7684\u200b\u9a8c\u8bc1\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u770b\u200b\u4f60\u200b\u62e6\u622a\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4e0e\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5bf9\u8c61\u200b\u662f\u5426\u200b\u5339\u914d\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#3_1","title":"3. \u200b\u5305\u88c5\u200b\u5207\u9762\u200b\u901a\u77e5\u200b\u4fe1\u606f","text":"Java<pre><code>public class AdvisedSupport {\n\n    // \u200b\u88ab\u200b\u4ee3\u7406\u200b\u7684\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\n    private TargetSource targetSource;\n    // \u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668\u200b\n    private MethodInterceptor methodInterceptor;\n    // \u200b\u65b9\u6cd5\u200b\u5339\u914d\u200b\u5668\u200b(\u200b\u68c0\u67e5\u200b\u76ee\u6807\u200b\u65b9\u6cd5\u200b\u662f\u5426\u200b\u7b26\u5408\u200b\u901a\u77e5\u200b\u6761\u4ef6\u200b)\n    private MethodMatcher methodMatcher;\n\n    // ...get/set\n}\n</code></pre> <ul> <li><code>AdvisedSupport</code>\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u7528\u4e8e\u200b\u628a\u200b\u4ee3\u7406\u200b\u3001\u200b\u62e6\u622a\u200b\u3001\u200b\u5339\u914d\u200b\u7684\u200b\u5404\u9879\u200b\u5c5e\u6027\u200b\u5305\u88c5\u200b\u5230\u200b\u4e00\u4e2a\u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u5728\u200b <code>Proxy</code> \u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u8fdb\u884c\u200b\u4f7f\u7528\u200b\u3002\u200b\u8fd9\u200b\u548c\u200b\u4f60\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u5305\u88c5\u200b\u5165\u200b\u53c2\u662f\u200b\u4e00\u4e2a\u200b\u9053\u7406\u200b</li> <li><code>TargetSource</code>\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5728\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u7c7b\u4e2d\u200b\u63d0\u4f9b\u200b <code>Object</code> \u200b\u5165\u53c2\u200b\u5c5e\u6027\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u83b7\u53d6\u200b\u76ee\u6807\u200b\u7c7b\u200b <code>TargetClass</code> \u200b\u4fe1\u606f\u200b\u3002</li> <li><code>MethodInterceptor</code>\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5177\u4f53\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u7531\u200b\u7528\u6237\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b <code>MethodInterceptor#invoke</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u505a\u200b\u5177\u4f53\u200b\u7684\u200b\u5904\u7406\u200b\u3002\u200b\u50cf\u200b\u6211\u4eec\u200b\u672c\u6587\u200b\u7684\u200b\u6848\u4f8b\u200b\u4e2d\u662f\u200b\u505a\u200b\u65b9\u6cd5\u200b\u76d1\u63a7\u200b\u5904\u7406\u200b</li> <li><code>MethodMatcher</code>\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5339\u914d\u200b\u65b9\u6cd5\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u7531\u200b <code>AspectJExpressionPointcut</code> \u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#4-jdkcglib","title":"4. \u200b\u4ee3\u7406\u200b\u62bd\u8c61\u200b\u5b9e\u73b0\u200b(JDK&amp;Cglib)","text":"<p>\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b</p> Java<pre><code>public interface AopProxy {\n\n    Object getProxy();\n\n}\n</code></pre> <ul> <li>\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u6807\u51c6\u63a5\u53e3\u200b\uff0c\u200b\u7528\u4e8e\u200b\u83b7\u53d6\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u4ee3\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u6709\u200b JDK \u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b Cglib \u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5b9a\u4e49\u200b\u63a5\u53e3\u200b\u4f1a\u200b\u66f4\u52a0\u200b\u65b9\u4fbf\u7ba1\u7406\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u3002</li> </ul> <p>JDK</p> Java<pre><code>public class JdkDynamicAopProxy implements AopProxy, InvocationHandler {\n\n    private final AdvisedSupport advised;\n\n    public JdkDynamicAopProxy(AdvisedSupport advised) {\n        this.advised = advised;\n    }\n\n    @Override\n    public Object getProxy() {\n        return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), advised.getTargetSource().getTargetClass(), this);\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) {\n            MethodInterceptor methodInterceptor = advised.getMethodInterceptor();\n            return methodInterceptor.invoke(new ReflectiveMethodInvocation(advised.getTargetSource().getTarget(), method, args));\n        }\n        return method.invoke(advised.getTargetSource().getTarget(), args);\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u57fa\u4e8e\u200b <code>JDK</code> \u200b\u5b9e\u73b0\u200b\u7684\u200b\u4ee3\u7406\u200b\u7c7b\u200b\uff0c\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u63a5\u53e3\u200b <code>AopProxy</code>\u3001<code>InvocationHandler</code>\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u628a\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b <code>getProxy</code> \u200b\u548c\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b <code>invoke</code> \u200b\u5206\u5f00\u200b\u5904\u7406\u200b\u4e86\u200b\u3002</li> <li><code>getProxy</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u662f\u200b\u4ee3\u7406\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u5165\u53c2\u200b <code>ClassLoader</code>\u3001<code>AdvisedSupport</code>\u3001\u200b\u548c\u200b\u5f53\u524d\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b <code>this</code>\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u63d0\u4f9b\u200b\u4e86\u200b <code>invoke</code> \u200b\u65b9\u6cd5\u200b\u3002</li> <li><code>invoke</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u4e3b\u8981\u200b\u5904\u7406\u200b\u5339\u914d\u200b\u7684\u200b\u65b9\u6cd5\u200b\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u81ea\u5df1\u200b\u63d0\u4f9b\u200b\u7684\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u505a\u200b\u53cd\u5c04\u200b\u8c03\u7528\u200b <code>methodInterceptor.invoke</code> \u3002</li> <li>\u200b\u8fd9\u91cc\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b <code>ReflectiveMethodInvocation</code>\uff0c\u200b\u5176\u4ed6\u200b\u5b83\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5165\u53c2\u200b\u7684\u200b\u5305\u88c5\u200b\u4fe1\u606f\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5165\u200b\u53c2\u200b\u5bf9\u8c61\u200b\uff1a\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u3001\u200b\u65b9\u6cd5\u200b\u3001\u200b\u5165\u53c2\u200b\u3002</li> </ul> <p>Cglib</p> Java<pre><code>public class Cglib2AopProxy implements AopProxy {\n\n    private final AdvisedSupport advised;\n\n    public Cglib2AopProxy(AdvisedSupport advised) {\n        this.advised = advised;\n    }\n\n    @Override\n    public Object getProxy() {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(advised.getTargetSource().getTarget().getClass());\n        enhancer.setInterfaces(advised.getTargetSource().getTargetClass());\n        enhancer.setCallback(new DynamicAdvisedInterceptor(advised));\n        return enhancer.create();\n    }\n\n    private static class DynamicAdvisedInterceptor implements MethodInterceptor {\n\n        @Override\n        public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n            CglibMethodInvocation methodInvocation = new CglibMethodInvocation(advised.getTargetSource().getTarget(), method, objects, methodProxy);\n            if (advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) {\n                return advised.getMethodInterceptor().invoke(methodInvocation);\n            }\n            return methodInvocation.proceed();\n        }\n    }\n\n    private static class CglibMethodInvocation extends ReflectiveMethodInvocation {\n\n        @Override\n        public Object proceed() throws Throwable {\n            return this.methodProxy.invoke(this.target, this.arguments);\n        }\n\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u57fa\u4e8e\u200b <code>Cglib</code> \u200b\u4f7f\u7528\u200b <code>Enhancer</code> \u200b\u4ee3\u7406\u200b\u7684\u200b\u7c7b\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd0\u884c\u200b\u671f\u95f4\u200b\u4e3a\u200b\u63a5\u53e3\u200b\u4f7f\u7528\u200b\u5e95\u5c42\u200b <code>ASM</code> \u200b\u5b57\u8282\u200b\u7801\u200b\u589e\u5f3a\u200b\u6280\u672f\u200b\u5904\u7406\u200b\u5bf9\u8c61\u200b\u7684\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u751f\u6210\u200b\uff0c\u200b\u56e0\u6b64\u200b\u88ab\u200b\u4ee3\u7406\u200b\u7c7b\u200b\u4e0d\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u4efb\u4f55\u200b\u63a5\u53e3\u200b\u3002</li> <li>\u200b\u5173\u4e8e\u200b\u6269\u5c55\u200b\u8fdb\u53bb\u200b\u7684\u200b\u7528\u6237\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4e3b\u8981\u200b\u662f\u200b\u5728\u200b <code>Enhancer#setCallback</code> \u200b\u4e2d\u200b\u5904\u7406\u200b\uff0c\u200b\u7528\u6237\u200b\u81ea\u5df1\u200b\u7684\u200b\u65b0\u589e\u200b\u7684\u200b\u62e6\u622a\u200b\u5904\u7406\u200b\u3002\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b <code>DynamicAdvisedInterceptor#intercept</code> \u200b\u5339\u914d\u200b\u65b9\u6cd5\u200b\u540e\u200b\u505a\u200b\u4e86\u200b\u76f8\u5e94\u200b\u7684\u200b\u53cd\u5c04\u200b\u64cd\u4f5c\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#4","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#1_2","title":"1. \u200b\u5b9e\u73b0\u200b\u51c6\u5907","text":"Java<pre><code>public interface IUserService {\n\n    String queryUserInfo();\n\n    String register(String userName);\n}\n</code></pre> Java<pre><code>public class UserService implements IUserService {\n\n    public String queryUserInfo() {\n        try {\n            Thread.sleep(new Random(1).nextInt(100));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return \"\u200b\u82cd\u955c\u200b\u6708\u200b\uff0c100001\uff0c\u200b\u6df1\u5733\u200b\";\n    }\n\n    public String register(String userName) {\n        try {\n            Thread.sleep(new Random(1).nextInt(100));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return \"\u200b\u6ce8\u518c\u200b\u7528\u6237\u200b\uff1a\" + userName + \" success\uff01\";\n    }\n\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#2_2","title":"2. \u200b\u81ea\u5b9a\u4e49\u200b\u62e6\u622a\u200b\u65b9\u6cd5","text":"Java<pre><code>public class UserServiceInterceptor implements MethodInterceptor {\n\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        long start = System.currentTimeMillis();\n        try {\n            return invocation.proceed();\n        } finally {\n            System.out.println(\"\u200b\u76d1\u63a7\u200b - Begin By AOP\");\n            System.out.println(\"\u200b\u65b9\u6cd5\u200b\u540d\u79f0\u200b\uff1a\" + invocation.getMethod());\n            System.out.println(\"\u200b\u65b9\u6cd5\u200b\u8017\u65f6\u200b\uff1a\" + (System.currentTimeMillis() - start) + \"ms\");\n            System.out.println(\"\u200b\u76d1\u63a7\u200b - End\\r\\n\");\n        }\n    }\n\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#3_2","title":"3. \u200b\u5355\u5143\u6d4b\u8bd5","text":"Java<pre><code>@Test\npublic void test_dynamic() {\n    // \u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\n    IUserService userService = new UserService();     \n\n    // \u200b\u7ec4\u88c5\u200b\u4ee3\u7406\u200b\u4fe1\u606f\u200b\n    AdvisedSupport advisedSupport = new AdvisedSupport();\n    advisedSupport.setTargetSource(new TargetSource(userService));\n    advisedSupport.setMethodInterceptor(new UserServiceInterceptor());\n    advisedSupport.setMethodMatcher(new AspectJExpressionPointcut(\"execution(* test.bean.IUserService.*(..))\"));\n\n    // \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b(JdkDynamicAopProxy)\n    IUserService proxy_jdk = (IUserService) new JdkDynamicAopProxy(advisedSupport).getProxy();\n    // \u200b\u6d4b\u8bd5\u200b\u8c03\u7528\u200b\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + proxy_jdk.queryUserInfo());\n\n    // \u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b(Cglib2AopProxy)\n    IUserService proxy_cglib = (IUserService) new Cglib2AopProxy(advisedSupport).getProxy();\n    // \u200b\u6d4b\u8bd5\u200b\u8c03\u7528\u200b\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + proxy_cglib.register(\"\u200b\u82b1\u82b1\u200b\"));\n}\n</code></pre> <ul> <li>\u200b\u6574\u4e2a\u200b\u6848\u4f8b\u200b\u6d4b\u8bd5\u200b\u4e86\u200b AOP \u200b\u5728\u4e8e\u200b Spring \u200b\u7ed3\u5408\u200b\u524d\u200b\u7684\u200b\u6838\u5fc3\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5305\u62ec\u200b\u4ec0\u4e48\u200b\u662f\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u3001\u200b\u600e\u4e48\u200b\u7ec4\u88c5\u200b\u4ee3\u7406\u200b\u4fe1\u606f\u200b\u3001\u200b\u5982\u4f55\u200b\u8c03\u7528\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u3002</li> <li>AdvisedSupport\uff0c\u200b\u5305\u88c5\u200b\u4e86\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u3001\u200b\u7528\u6237\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u4ee5\u53ca\u200b\u65b9\u6cd5\u200b\u5339\u914d\u200b\u8868\u8fbe\u5f0f\u200b\u3002</li> <li>\u200b\u4e4b\u540e\u200b\u5c31\u662f\u200b\u5206\u522b\u200b\u8c03\u7528\u200b JdkDynamicAopProxy\u3001Cglib2AopProxy\uff0c\u200b\u4e24\u4e2a\u200b\u4e0d\u540c\u200b\u65b9\u5f0f\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4ee3\u7406\u200b\u7c7b\u200b\uff0c\u200b\u770b\u770b\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u6210\u529f\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b</li> </ul> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b</p> Bash<pre><code>\u200b\u76d1\u63a7\u200b - Begin By AOP\n\u200b\u65b9\u6cd5\u200b\u540d\u79f0\u200b\uff1apublic abstract java.lang.String test.bean.IUserService.queryUserInfo()\n\u200b\u65b9\u6cd5\u200b\u8017\u65f6\u200b\uff1a91ms\n\u200b\u76d1\u63a7\u200b - End\n\n\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b\uff0c100001\uff0c\u200b\u6df1\u5733\u200b\n\u200b\u76d1\u63a7\u200b - Begin By AOP\n\u200b\u65b9\u6cd5\u200b\u540d\u79f0\u200b\uff1apublic java.lang.String test.bean.UserService.register(java.lang.String)\n\u200b\u65b9\u6cd5\u200b\u8017\u65f6\u200b\uff1a95ms\n\u200b\u76d1\u63a7\u200b - End\n\n\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u6ce8\u518c\u200b\u7528\u6237\u200b\uff1a\u200b\u82b1\u82b1\u200b success\uff01\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-11/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>https://mp.weixin.qq.com/s/lDL14DMzaY_WzvmizDG-zw</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/","title":"\u628a\u200bAOP\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\uff0c\u200b\u878d\u5165\u200b\u5230\u200bBean\u200b\u7684\u200b\u751f\u547d\u5468\u671f","text":"<p> \u200b\u7ea6\u200b 1486 \u200b\u4e2a\u200b\u5b57\u200b  376 \u200b\u884c\u200b\u4ee3\u7801\u200b  3 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 10 \u200b\u5206\u949f\u200b</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#1","title":"1. \u200b\u76ee\u6807","text":"<p>\u200b\u5728\u200b\u4e0a\u200b\u4e00\u200b\u7ae0\u8282\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u57fa\u4e8e\u200b <code>Proxy.newProxyInstance</code> \u200b\u4ee3\u7406\u200b\u64cd\u4f5c\u200b\u4e2d\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\u5339\u914d\u200b\u548c\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u200b\uff0c\u200b\u5bf9\u200b\u5339\u914d\u200b\u7684\u200b\u5bf9\u8c61\u200b\u8fdb\u884c\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u5904\u7406\u200b\u64cd\u4f5c\u200b\u3002\u200b\u5e76\u200b\u628a\u200b\u8fd9\u6837\u200b\u7684\u200b\u6280\u672f\u200b\u6838\u5fc3\u5185\u5bb9\u200b\u62c6\u89e3\u200b\u5230\u200b <code>Spring</code> \u200b\u4e2d\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b <code>AOP</code> \u200b\u90e8\u5206\u200b\uff0c\u200b\u901a\u8fc7\u200b\u62c6\u5206\u200b\u540e\u200b\u57fa\u672c\u200b\u53ef\u4ee5\u200b\u660e\u786e\u200b\u5404\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u804c\u8d23\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f60\u200b\u7684\u200b\u4ee3\u7406\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u5c5e\u6027\u200b\u3001\u200b\u62e6\u622a\u5668\u200b\u5c5e\u6027\u200b\u3001\u200b\u65b9\u6cd5\u200b\u5339\u914d\u200b\u5c5e\u6027\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u4ee3\u7406\u200b\u64cd\u4f5c\u200b <code>JDK</code> \u200b\u548c\u200b <code>CGlib</code> \u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u518d\u6709\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>AOP</code> \u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u7684\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u9a8c\u8bc1\u200b\u5207\u9762\u200b\u529f\u80fd\u200b\u5bf9\u200b\u65b9\u6cd5\u200b\u8fdb\u884c\u200b\u62e6\u622a\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u9762\u5411\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u592a\u53ef\u80fd\u200b\u8ba9\u200b\u7528\u6237\u200b\u8fd9\u4e48\u200b\u590d\u6742\u200b\u4e14\u200b\u6ca1\u6709\u200b\u4e0e\u200b <code>Spring</code> \u200b\u7ed3\u5408\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5355\u72ec\u200b\u4f7f\u7528\u200b <code>AOP</code>\uff0c\u200b\u867d\u7136\u200b\u53ef\u4ee5\u200b\u6ee1\u8db3\u200b\u9700\u6c42\u200b\uff0c\u200b\u4f46\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u8fd8\u662f\u200b\u8fc7\u53bb\u200b\u5206\u6563\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b\u672c\u200b\u7ae0\u8282\u200b\u5b8c\u6210\u200b <code>AOP</code> \u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u4e0e\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u7684\u200b\u6574\u5408\u200b\uff0c\u200b\u6700\u7ec8\u200b\u80fd\u200b\u901a\u8fc7\u200b\u5728\u200b <code>Spring</code> \u200b\u914d\u7f6e\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b8c\u6210\u200b\u5207\u9762\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</p>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#2","title":"2. \u200b\u8bbe\u8ba1","text":"<p>\u200b\u5176\u5b9e\u200b\u5728\u200b\u6709\u200b\u4e86\u200bAOP\u200b\u7684\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u628a\u200b\u8fd9\u90e8\u5206\u200b\u529f\u80fd\u200b\u670d\u52a1\u200b\u878d\u5165\u200b\u5230\u200b Spring \u200b\u5176\u5b9e\u200b\u4e5f\u200b\u4e0d\u96be\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u8981\u200b\u89e3\u51b3\u200b\u51e0\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u600e\u4e48\u200b\u501f\u7740\u200b BeanPostProcessor \u200b\u628a\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u878d\u5165\u200b\u5230\u200b Bean \u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7ec4\u88c5\u200b\u5404\u9879\u200b\u5207\u70b9\u200b\u3001\u200b\u62e6\u622a\u200b\u3001\u200b\u524d\u7f6e\u200b\u7684\u200b\u529f\u80fd\u200b\u548c\u200b\u9002\u914d\u200b\u5bf9\u5e94\u200b\u7684\u200b\u4ee3\u7406\u200b\u5668\u200b\u3002\u200b\u6574\u4f53\u200b\u8bbe\u8ba1\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u56fe\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u4e3a\u4e86\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u80fd\u200b\u628a\u200bxml\u200b\u4e2d\u200b\u914d\u7f6e\u200b\u7684\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5207\u9762\u200b\u7684\u200b\u4e00\u4e9b\u200b\u7c7b\u200b\u5bf9\u8c61\u200b\u5b9e\u4f8b\u200b\u5316\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u7528\u5230\u200b <code>BeanPostProcessor</code> \u200b\u63d0\u4f9b\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u4e2d\u200b\u7684\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5206\u522b\u200b\u4f5c\u7528\u200b\u4e8e\u200b Bean \u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u521d\u59cb\u5316\u200b\u524d\u540e\u200b\u4fee\u6539\u200b Bean \u200b\u7684\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6269\u5c55\u200b\u4fe1\u606f\u200b\u3002\u200b\u4f46\u200b\u8fd9\u91cc\u200b\u9700\u8981\u200b\u96c6\u5408\u200b\u4e8e\u200b <code>BeanPostProcessor</code> \u200b\u5b9e\u73b0\u200b\u65b0\u200b\u7684\u200b\u63a5\u53e3\u200b\u548c\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u8fd9\u6837\u200b\u624d\u80fd\u200b\u5b9a\u5411\u200b\u83b7\u53d6\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7c7b\u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u4f46\u200b\u56e0\u4e3a\u200b\u521b\u5efa\u200b\u7684\u200b\u662f\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u4e0d\u662f\u200b\u4e4b\u524d\u200b\u6d41\u7a0b\u200b\u91cc\u200b\u7684\u200b\u666e\u901a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u524d\u200b\u7f6e\u4e8e\u200b\u5176\u4ed6\u200b\u5bf9\u8c61\u200b\u7684\u200b\u521b\u5efa\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5728\u200b\u5b9e\u9645\u200b\u5f00\u53d1\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory#createBean</code> \u200b\u4f18\u5148\u200b\u5b8c\u6210\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5224\u65ad\u200b\uff0c\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u4ee3\u7406\u200b\uff0c\u200b\u6709\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u3002\u200b\u5728\u200bSpring\u200b\u7684\u200b\u6e90\u7801\u200b\u4e2d\u4f1a\u200b\u6709\u200b <code>createBean</code> \u200b\u548c\u200b <code>doCreateBean</code> \u200b\u7684\u200b\u65b9\u6cd5\u200b\u62c6\u5206\u200b</li> <li>\u200b\u8fd9\u91cc\u200b\u8fd8\u200b\u5305\u62ec\u200b\u8981\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668\u200b\u7684\u200b\u5177\u4f53\u200b\u529f\u80fd\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e00\u4e9b\u200b <code>BeforeAdvice</code>\u3001<code>AfterAdvice</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8ba9\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u7b80\u5316\u200b\u7684\u200b\u4f7f\u7528\u200b\u5207\u9762\u200b\u529f\u80fd\u200b\u3002\u200b\u9664\u6b64\u4e4b\u5916\u200b\u8fd8\u200b\u5305\u62ec\u200b\u9700\u8981\u200b\u5305\u88c5\u200b\u5207\u9762\u200b\u8868\u8fbe\u5f0f\u200b\u4ee5\u53ca\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u7684\u200b\u6574\u5408\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u63d0\u4f9b\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u4ee3\u7406\u200b\u65b9\u5f0f\u200b\u7684\u200b\u4ee3\u7406\u200b\u5de5\u5382\u200b\uff0c\u200b\u6765\u200b\u5305\u88c5\u200b\u6211\u4eec\u200b\u7684\u200b\u5207\u9762\u200b\u670d\u52a1\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#3","title":"3. \u200b\u5b9e\u73b0","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#1_1","title":"1. \u200b\u5de5\u7a0b\u200b\u7ed3\u6784","text":"Bash<pre><code>simple-spring-12\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 iflove\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 simplespring\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 aop\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 AdvisedSupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 Advisor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeforeAdvice.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ClassFilter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 MethodBeforeAdvice.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 MethodMatcher.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PointCut.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PointcutAdvisor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 TargetSource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 aspectj\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 AspectJExpressionPointcut.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AspectJExpressionPointcutAdvisor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 framework\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Cglib2AopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 JdkDynamicAopProxy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ProxyFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ReflectiveMethodInvocation.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 adapter\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 MethodBeforeAdviceInterceptor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 autoproxy\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 DefaultAdvisorAutoProxyCreator.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 beans\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeansException.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValue.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 PropertyValues.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 factory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Aware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanClassLoaderAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanFactoryAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 BeanNameAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ConfigurableListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DisposableBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FactoryBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 HierarchicalBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 InitializingBean.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinition.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanFactoryPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanReference.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationAwareBeanPostProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractAutowireCapableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BeanDefinitionRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CglibSubclassingInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultListableBeanFactory.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DefaultSingletonBeanRegistry.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 DisposableBeanAdapter.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 FactoryBeanRegistrySupport.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 InstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleInstantiationStrategy.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 xml\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0         \u2514\u2500\u2500 XmlBeanDefinitionReader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 context\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextAware.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventPublisher.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationListener.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConfigurableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u251c\u2500\u2500 event\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 AbstractApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationContextEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextClosedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ContextRefreshedEvent.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 SimpleApplicationEventMulticaster.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractRefreshableApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 AbstractXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApplicationContextAwareProcessor.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 ClassPathXmlApplicationContext.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0 \u2514\u2500\u2500 io\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ClassPathResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 DefaultResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 FileSystemResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 Resource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u251c\u2500\u2500 ResourceLoader.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2502\u00a0\u00a0     \u2514\u2500\u2500 UrlResource.java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 utils\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 ClassUtils.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 ApiTest.java\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 bean\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 IUserService.java\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 UserService.java\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 UserServiceBeforeAdvice.java\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 UserServiceInterceptor.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 spring.xml\n</code></pre> <p>AOP \u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\u878d\u5165\u200b\u5230\u200bBean\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u4e2d\u7c7b\u200b\u5173\u7cfb\u200b</p> <p></p> <ul> <li>\u200b\u6574\u4e2a\u200b\u7c7b\u200b\u5173\u7cfb\u200b\u56fe\u4e2d\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u5728\u200b\u4ee5\u200b <code>BeanPostProcessor</code> \u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u7ee7\u627f\u200b\u7684\u200b <code>InstantiationAwareBeanPostProcessor</code> \u200b\u63a5\u53e3\u200b\u540e\u200b\uff0c\u200b\u505a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u81ea\u52a8\u200b\u4ee3\u7406\u200b\u521b\u5efa\u200b\u7684\u200b\u7c7b\u200b <code>DefaultAdvisorAutoProxyCreator</code>\uff0c\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u5c31\u662f\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u6574\u4e2a\u200b <code>AOP</code> \u200b\u4ee3\u7406\u200b\u878d\u5165\u200b\u5230\u200b <code>Bean</code> \u200b\u751f\u547d\u5468\u671f\u200b\u4e2d\u200b\u7684\u200b\u6838\u5fc3\u200b\u7c7b\u200b\u3002</li> <li><code>DefaultAdvisorAutoProxyCreator</code> \u200b\u4f1a\u200b\u4f9d\u8d56\u4e8e\u200b\u62e6\u622a\u5668\u200b\u3001\u200b\u4ee3\u7406\u200b\u5de5\u5382\u200b\u548c\u200bPointcut\u200b\u4e0e\u200bAdvisor\u200b\u7684\u200b\u5305\u88c5\u200b\u670d\u52a1\u200b <code>AspectJExpressionPointcutAdvisor</code>\uff0c\u200b\u7531\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u5207\u9762\u200b\u3001\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u548c\u200b\u8868\u8fbe\u5f0f\u200b\u3002</li> <li><code>Spring</code> \u200b\u7684\u200b <code>AOP</code> \u200b\u628a\u200b <code>Advice</code> \u200b\u7ec6\u5316\u200b\u4e86\u200b <code>BeforeAdvice</code>\u3001<code>AfterAdvice</code>\u3001<code>AfterReturningAdvice</code>\u3001<code>ThrowsAdvice</code>\uff0c\u200b\u76ee\u524d\u200b\u6211\u4eec\u200b\u505a\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u6848\u4f8b\u200b\u4e2d\u200b\u53ea\u7528\u200b\u5230\u200b\u4e86\u200b <code>BeforeAdvice</code>\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u53ef\u4ee5\u200b\u5bf9\u7167\u200b Spring \u200b\u7684\u200b\u6e90\u7801\u200b\u8fdb\u884c\u200b\u8865\u5145\u200b\u6d4b\u8bd5\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#2-advice","title":"2. \u200b\u5b9a\u4e49\u200bAdvice\u200b\u62e6\u622a\u5668","text":"Java<pre><code>public interface BeforeAdvice extends Advice {\n\n}\n</code></pre> Java<pre><code>public interface MethodBeforeAdvice extends BeforeAdvice {\n\n    /**\n     * Callback before a given method is invoked.\n     *\n     * @param method method being invoked\n     * @param args   arguments to the method\n     * @param target target of the method invocation. May be &lt;code&gt;null&lt;/code&gt;.\n     * @throws Throwable if this object wishes to abort the call.\n     *                   Any exception thrown will be returned to the caller if it's\n     *                   allowed by the method signature. Otherwise the exception\n     *                   will be wrapped as a runtime exception.\n     */\n    void before(Method method, Object[] args, Object target) throws Throwable;\n\n}\n</code></pre> <ul> <li>\u200b\u5728\u200b <code>Spring</code> \u200b\u6846\u67b6\u200b\u4e2d\u200b\uff0c<code>Advice</code> \u200b\u90fd\u200b\u662f\u200b\u901a\u8fc7\u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668\u200b <code>MethodInterceptor</code> \u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002\u200b\u73af\u7ed5\u200b <code>Advice</code> \u200b\u7c7b\u4f3c\u200b\u4e00\u4e2a\u200b\u62e6\u622a\u5668\u200b\u7684\u200b\u94fe\u8def\u200b\uff0c<code>Before Advice</code>\u3001<code>After advice</code>\u200b\u7b49\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u6682\u65f6\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u90a3\u4e48\u200b\u591a\u200b\u5c31\u200b\u53ea\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>MethodBeforeAdvice</code> \u200b\u7684\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#3-advisor","title":"3. \u200b\u5b9a\u4e49\u200bAdvisor\u200b\u8bbf\u95ee\u8005","text":"Java<pre><code>public interface Advisor {\n\n    /**\n     * Return the advice part of this aspect. An advice may be an\n     * interceptor, a before advice, a throws advice, etc.\n     * @return the advice that should apply if the pointcut matches\n     * @see org.aopalliance.intercept.MethodInterceptor\n     * @see BeforeAdvice\n     */\n    Advice getAdvice();\n\n}\n</code></pre> Java<pre><code>public interface PointcutAdvisor extends Advisor {\n\n    /**\n     * Get the Pointcut that drives this advisor.\n     */\n    Pointcut getPointcut();\n\n}\n</code></pre> <ul> <li><code>PointcutAdvisor</code> \u200b\u627f\u62c5\u200b\u4e86\u200b <code>Pointcut</code> \u200b\u548c\u200b <code>Advice</code> \u200b\u7684\u200b\u7ec4\u5408\u200b\uff0c<code>Pointcut</code> \u200b\u7528\u4e8e\u200b\u83b7\u53d6\u200b <code>JoinPoint</code>\uff0c\u200b\u800c\u200b <code>Advice</code> \u200b\u51b3\u5b9a\u200b\u4e8e\u200b <code>JoinPoint</code> \u200b\u6267\u884c\u200b\u4ec0\u4e48\u200b\u64cd\u4f5c\u200b\u3002</li> </ul> Java<pre><code>public class AspectJExpressionPointcutAdvisor implements PointcutAdvisor {\n\n    // \u200b\u5207\u9762\u200b\n    private AspectJExpressionPointcut pointcut;\n    // \u200b\u5177\u4f53\u200b\u7684\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\n    private Advice advice;\n    // \u200b\u8868\u8fbe\u5f0f\u200b\n    private String expression;\n\n    public void setExpression(String expression){\n        this.expression = expression;\n    }\n\n    @Override\n    public Pointcut getPointcut() {\n        if (null == pointcut) {\n            pointcut = new AspectJExpressionPointcut(expression);\n        }\n        return pointcut;\n    }\n\n    @Override\n    public Advice getAdvice() {\n        return advice;\n    }\n\n    public void setAdvice(Advice advice){\n        this.advice = advice;\n    }\n\n}\n</code></pre> <ul> <li><code>AspectJExpressionPointcutAdvisor</code> \u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>PointcutAdvisor</code> \u200b\u63a5\u53e3\u200b\uff0c\u200b\u628a\u200b\u5207\u9762\u200b <code>pointcut</code>\u3001\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b <code>advice</code> \u200b\u548c\u200b\u5177\u4f53\u200b\u7684\u200b\u62e6\u622a\u200b\u8868\u8fbe\u5f0f\u200b\u5305\u88c5\u200b\u5728\u200b\u4e00\u8d77\u200b\u3002\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>xml</code> \u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b <code>pointcutAdvisor</code> \u200b\u5207\u9762\u200b\u62e6\u622a\u5668\u200b\u4e86\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#4","title":"4. \u200b\u65b9\u6cd5\u200b\u62e6\u622a\u5668","text":"Java<pre><code>public class MethodBeforeAdviceInterceptor implements MethodInterceptor {\n\n    private MethodBeforeAdvice advice;\n\n    public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) {\n        this.advice = advice;\n    }\n\n    public MethodBeforeAdvice getAdvice() {\n        return advice;\n    }\n\n    public void setAdvice(MethodBeforeAdvice advice) {\n        this.advice = advice;\n    }\n\n    @Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n        this.advice.before(methodInvocation.getMethod(), methodInvocation.getArguments(), methodInvocation.getThis());\n        return methodInvocation.proceed();\n    }\n\n}\n</code></pre> <ul> <li><code>MethodBeforeAdviceInterceptor</code> \u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>MethodInterceptor</code> \u200b\u63a5\u53e3\u200b\uff0c\u200b\u5728\u200b <code>invoke</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u8c03\u7528\u200b <code>advice</code> \u200b\u4e2d\u200b\u7684\u200b <code>before</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f20\u5165\u200b\u5bf9\u5e94\u200b\u7684\u200b\u53c2\u6570\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u800c\u200b\u8fd9\u4e2a\u200b <code>advice.before</code> \u200b\u5219\u200b\u662f\u200b\u7528\u4e8e\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b <code>MethodBeforeAdvice</code> \u200b\u63a5\u53e3\u200b\u540e\u200b\u505a\u200b\u7684\u200b\u76f8\u5e94\u200b\u5904\u7406\u200b\u3002\u200b\u5176\u5b9e\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5177\u4f53\u200b\u7684\u200b <code>MethodInterceptor</code> \u200b\u5b9e\u73b0\u200b\u7c7b\u200b\uff0c\u200b\u5176\u5b9e\u200b\u548c\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u505a\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u73b0\u5728\u200b\u4ea4\u7ed9\u200b\u4e86\u200b <code>Spring</code> \u200b\u6765\u200b\u5904\u7406\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#5","title":"5. \u200b\u4ee3\u7406\u200b\u5de5\u5382","text":"Java<pre><code>public class ProxyFactory {\n\n    private AdvisedSupport advisedSupport;\n\n    public ProxyFactory(AdvisedSupport advisedSupport) {\n        this.advisedSupport = advisedSupport;\n    }\n\n    public Object getProxy() {\n        return createAopProxy().getProxy();\n    }\n\n    private AopProxy createAopProxy() {\n        if (advisedSupport.isProxyTargetClass()) {\n            return new Cglib2AopProxy(advisedSupport);\n        }\n\n        return new JdkDynamicAopProxy(advisedSupport);\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u5176\u5b9e\u200b\u8fd9\u4e2a\u200b\u4ee3\u7406\u200b\u5de5\u5382\u200b\u4e3b\u8981\u200b\u89e3\u51b3\u200b\u7684\u200b\u662f\u200b\u5173\u4e8e\u200b <code>JDK</code> \u200b\u548c\u200b <code>Cglib</code> \u200b\u4e24\u79cd\u200b\u4ee3\u7406\u200b\u7684\u200b\u9009\u62e9\u200b\u95ee\u9898\u200b\uff0c\u200b\u6709\u200b\u4e86\u200b\u4ee3\u7406\u200b\u5de5\u5382\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u4e0d\u540c\u200b\u7684\u200b\u521b\u5efa\u200b\u9700\u6c42\u200b\u8fdb\u884c\u200b\u63a7\u5236\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#6-bean","title":"6. \u200b\u878d\u5165\u200bBean\u200b\u751f\u547d\u5468\u671f\u200b\u7684\u200b\u81ea\u52a8\u200b\u4ee3\u7406\u200b\u521b\u5efa\u8005","text":"Java<pre><code>public class DefaultAdvisorAutoProxyCreator implements InstantiationAwareBeanPostProcessor, BeanFactoryAware {\n\n    private DefaultListableBeanFactory beanFactory;\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n    }\n\n    @Override\n    public Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException {\n\n        if (isInfrastructureClass(beanClass)) return null;\n\n        Collection&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();\n\n        for (AspectJExpressionPointcutAdvisor advisor : advisors) {\n            ClassFilter classFilter = advisor.getPointcut().getClassFilter();\n            if (!classFilter.matches(beanClass)) continue;\n\n            AdvisedSupport advisedSupport = new AdvisedSupport();\n\n            TargetSource targetSource = null;\n            try {\n                targetSource = new TargetSource(beanClass.getDeclaredConstructor().newInstance());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            advisedSupport.setTargetSource(targetSource);\n            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());\n            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());\n            advisedSupport.setProxyTargetClass(false);\n\n            return new ProxyFactory(advisedSupport).getProxy();\n\n        }\n\n        return null;\n    }\n\n}\n</code></pre> <ul> <li>\u200b\u8fd9\u4e2a\u200b <code>DefaultAdvisorAutoProxyCreator</code> \u200b\u7c7b\u200b\u7684\u200b\u4e3b\u8981\u200b\u6838\u5fc3\u200b\u5b9e\u73b0\u200b\u5728\u4e8e\u200b <code>postProcessBeforeInstantiation</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u4ece\u200b\u901a\u8fc7\u200b <code>beanFactory.getBeansOfType</code> \u200b\u83b7\u53d6\u200b <code>AspectJExpressionPointcutAdvisor</code> \u200b\u5f00\u59cb\u200b\u3002</li> <li>\u200b\u83b7\u53d6\u200b\u4e86\u200b <code>advisors</code> \u200b\u4ee5\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u904d\u5386\u200b\u76f8\u5e94\u200b\u7684\u200b <code>AspectJExpressionPointcutAdvisor</code> \u200b\u586b\u5145\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5c5e\u6027\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u76ee\u6807\u200b\u5bf9\u8c61\u200b\u3001\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u3001\u200b\u5339\u914d\u200b\u5668\u200b\uff0c\u200b\u4e4b\u540e\u200b\u8fd4\u56de\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u5373\u53ef\u200b\u3002</li> <li>\u200b\u90a3\u4e48\u200b\u73b0\u5728\u200b\u8c03\u7528\u200b\u65b9\u200b\u83b7\u53d6\u200b\u5230\u200b\u7684\u200b\u8fd9\u4e2a\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u5207\u9762\u200b\u6ce8\u5165\u200b\u7684\u200b\u5bf9\u8c61\u200b\u4e86\u200b\uff0c\u200b\u5f53\u200b\u8c03\u7528\u200b\u65b9\u6cd5\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u88ab\u200b\u6309\u200b\u9700\u200b\u62e6\u622a\u200b\uff0c\u200b\u5904\u7406\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#7-bean","title":"7. \u200b\u878d\u5165\u200b\u5230\u200bBean\u200b\u7684\u200b\u751f\u547d\u5468\u671f","text":"Java<pre><code>public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n\n    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();\n\n    @Override\n    protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {\n        Object bean = null;\n        try {\n            // \u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8fd4\u56de\u200b\u4ee3\u7406\u200b Bean \u200b\u5bf9\u8c61\u200b\n            bean = resolveBeforeInstantiation(beanName, beanDefinition);\n            if (null != bean) {\n                return bean;\n            }\n\n            bean = createBeanInstance(beanDefinition, beanName, args);\n            // \u200b\u7ed9\u200b bean \u200b\u586b\u5145\u200b\u5c5e\u6027\u200b\n            applyPropertyValues(beanName, bean, beanDefinition);\n            // \u200b\u6267\u884c\u200b Bean \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\u548c\u200b BeanPostProcessor \u200b\u7684\u200b\u524d\u7f6e\u200b\u548c\u200b\u540e\u7f6e\u200b\u5904\u7406\u200b\u65b9\u6cd5\u200b\n            bean = initializeBean(beanName, bean, beanDefinition);\n        } catch (Exception e) {\n            throw new BeansException(\"Instantiation of bean failed.\", e);\n        }\n\n        // \u200b\u6ce8\u518c\u200b\u5b9e\u73b0\u200b\u4e86\u200b DisposableBean \u200b\u63a5\u53e3\u200b\u7684\u200b Bean \u200b\u5bf9\u8c61\u200b\n        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);\n\n        // \u200b\u5224\u65ad\u200b SCOPE_SINGLETON\uff0cSCOPE_PROTOTYPE\n        if (beanDefinition.isSingleton()) {\n            registerSingleton(beanName, bean);\n        }\n        return bean;\n    }\n\n    protected Object resolveBeforeInstantiation(String beanName, BeanDefinition beanDefinition) {\n        Object bean = applyBeanPostProcessorBeforeInstantiation(beanDefinition.getBeanClass(), beanName);\n        if (null != bean) {\n            bean = applyBeanPostProcessorAfterInitialization(bean, beanName);\n        }\n        return bean;\n    }\n\n    // \u200b\u6ce8\u610f\u200b\uff0c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u4e3a\u200b\u65b0\u589e\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4e0e\u200b \u201capplyBeanPostProcessorBeforeInitialization\u201d \u200b\u662f\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\n    public Object applyBeanPostProcessorBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException {\n        for (BeanPostProcessor processor : getBeanPostProcessors()) {\n            if (processor instanceof InstantiationAwareBeanPostProcessor) {\n                Object result = ((InstantiationAwareBeanPostProcessor)processor).postProcessBeforeInstantiation(beanClass, beanName);\n                if (null != result) return result;\n            }\n        }\n        return null;\n    }\n}\n</code></pre> <ul> <li>\u200b\u56e0\u4e3a\u200b\u521b\u5efa\u200b\u7684\u200b\u662f\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u4e0d\u662f\u200b\u4e4b\u524d\u200b\u6d41\u7a0b\u200b\u91cc\u200b\u7684\u200b\u666e\u901a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u524d\u200b\u7f6e\u4e8e\u200b\u5176\u4ed6\u200b\u5bf9\u8c61\u200b\u7684\u200b\u521b\u5efa\u200b\uff0c\u200b\u5373\u200b\u9700\u8981\u200b\u5728\u200b <code>AbstractAutowireCapableBeanFactory#createBean</code> \u200b\u4f18\u5148\u200b\u5b8c\u6210\u200b <code>Bean</code> \u200b\u5bf9\u8c61\u200b\u7684\u200b\u5224\u65ad\u200b\uff0c\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u4ee3\u7406\u200b\uff0c\u200b\u6709\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b\u3002</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#4_1","title":"4. \u200b\u6d4b\u8bd5","text":"","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#1_2","title":"1. \u200b\u4e8b\u5148\u200b\u51c6\u5907","text":"Java<pre><code>public class UserService implements IUserService {\n\n    public String queryUserInfo() {\n        try {\n            Thread.sleep(new Random(1).nextInt(100));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return \"\u200b\u82cd\u955c\u200b\u6708\u200b\uff0c100001\uff0c\u200b\u6df1\u5733\u200b\";\n    }\n\n    public String register(String userName) {\n        try {\n            Thread.sleep(new Random(1).nextInt(100));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return \"\u200b\u6ce8\u518c\u200b\u7528\u6237\u200b\uff1a\" + userName + \" success\uff01\";\n    }\n\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#2_1","title":"2. \u200b\u81ea\u5b9a\u4e49\u200b\u62e6\u622a\u200b\u65b9\u6cd5","text":"Java<pre><code>public class UserServiceBeforeAdvice implements MethodBeforeAdvice {\n\n    @Override\n    public void before(Method method, Object[] args, Object target) throws Throwable {\n        System.out.println(\"\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\uff1a\" + method.getName());\n    }\n\n}\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#3_1","title":"3. \u200b\u914d\u7f6e\u6587\u4ef6","text":"Java<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n\n    &lt;bean id=\"userService\" class=\"test.bean.UserService\"/&gt;\n\n    &lt;bean class=\"com.iflove.simplespring.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"/&gt;\n\n    &lt;bean id=\"beforeAdvice\" class=\"test.bean.UserServiceBeforeAdvice\"/&gt;\n\n    &lt;bean id=\"methodInterceptor\" class=\"com.iflove.simplespring.aop.framework.adapter.MethodBeforeAdviceInterceptor\"&gt;\n        &lt;property name=\"advice\" ref=\"beforeAdvice\"/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"pointcutAdvisor\" class=\"com.iflove.simplespring.aop.aspectj.AspectJExpressionPointcutAdvisor\"&gt;\n        &lt;property name=\"expression\" value=\"execution(* test.bean.IUserService.*(..))\"/&gt;\n        &lt;property name=\"advice\" ref=\"methodInterceptor\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#4_2","title":"4. \u200b\u5355\u5143\u6d4b\u8bd5","text":"Java<pre><code>@Test\npublic void test_aop() {\n    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring.xml\");\n\n    IUserService userService = applicationContext.getBean(\"userService\", IUserService.class);\n    System.out.println(\"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\" + userService.queryUserInfo());\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b</p> <p></p> Bash<pre><code>\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\uff1aqueryUserInfo\n\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\uff1a\u200b\u82cd\u955c\u200b\u6708\u200b\uff0c100001\uff0c\u200b\u6df1\u5733\u200b\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u8ba9\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u751f\u6548\u200b\u4e86\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u624b\u52a8\u200b\u5904\u7406\u200b\u5207\u9762\u200b\u3001\u200b\u62e6\u622a\u200b\u65b9\u6cd5\u200b\u7b49\u200b\u5185\u5bb9\u200b\u3002\u200b\u622a\u56fe\u200b\u4e0a\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u7684\u200b IUserService \u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b</li> </ul>","tags":["spring"]},{"location":"blog/backend/spring/simple-spring/simple-spring-12/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>AOP Aspect Implementation</p>","tags":["spring"]},{"location":"blog/frontend/JavaScript/testJs/","title":"JavaScript Code Runner","text":"<p> \u200b\u7ea6\u200b 27 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6211\u200b\u7684\u200b JavaScript Code Runner\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u8fd0\u884c\u200bjs\u200b\u4ee3\u7801\u200b\u3002</p> <p>Input:</p>  console.log(\"Hello, World\");  <p>Run</p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/","title":"\u57fa\u672c\u200b\u8bed\u6cd5","text":"<p> \u200b\u7ea6\u200b 671 \u200b\u4e2a\u200b\u5b57\u200b  94 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 3 \u200b\u5206\u949f\u200b</p> <p>JavaScript\u200b\u7684\u200b\u8bed\u6cd5\u200b\u548c\u200bJava\u200b\u8bed\u8a00\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8bed\u53e5\u200b\u4ee5\u200b<code>;</code>\u200b\u7ed3\u675f\u200b\uff0c\u200b\u8bed\u53e5\u200b\u5757\u200b\u7528\u200b<code>{...}</code>\u3002\u200b\u4f46\u662f\u200b\uff0cJavaScript\u200b\u5e76\u200b\u4e0d\u200b\u5f3a\u5236\u200b\u8981\u6c42\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u8bed\u53e5\u200b\u7684\u200b\u7ed3\u5c3e\u200b\u52a0\u200b<code>;</code>\uff0c\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u8d1f\u8d23\u200b\u6267\u884c\u200bJavaScript\u200b\u4ee3\u7801\u200b\u7684\u200b\u5f15\u64ce\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u8bed\u53e5\u200b\u7684\u200b\u7ed3\u5c3e\u200b\u8865\u200b\u4e0a\u200b<code>;</code>\u3002</p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#1","title":"1. \u200b\u58f0\u660e","text":"JavaScript<pre><code>var x = 1;\nconst y = 1;\nlet z = 1;\n</code></pre> <ol> <li> <p>var \u200b\u58f0\u660e\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\uff0c\u200b\u53ef\u200b\u9009\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u503c\u200b\u3002</p> </li> <li> <p>const \u200b\u58f0\u660e\u200b\u4e00\u4e2a\u200b\u5757\u200b\u4f5c\u7528\u57df\u200b\u7684\u200b\u53ea\u8bfb\u200b\u5e38\u91cf\u200b\u3002</p> </li> <li> <p>let \u200b\u58f0\u660e\u200b\u4e00\u4e2a\u200b\u5757\u200b\u4f5c\u7528\u57df\u200b\u7684\u200b\u5c40\u90e8\u53d8\u91cf\u200b\uff0c\u200b\u53ef\u200b\u9009\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u503c\u200b\u3002</p> </li> </ol> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u5efa\u8bae\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u5c3d\u53ef\u80fd\u200b\u591a\u5730\u200b\u4f7f\u7528\u200b <code>let</code>\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b <code>var</code></p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#2","title":"2. \u200b\u5206\u652f","text":"","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#_2","title":"\u9519\u8bef\u5224\u65ad","text":"<p>\u200b\u4e0b\u9762\u200b\u8fd9\u4e9b\u200b\u503c\u200b\u5c06\u200b\u88ab\u200b\u8ba1\u7b97\u200b\u51fa\u200b false (also known as Falsy values): * false * undefined * null * 0 * NaN * \u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\uff08\"\"\uff09</p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#ifelse","title":"if...else","text":"JavaScript<pre><code>if (condition_1) {\n  statement_1;\n} else if (condition_2) {\n  statement_2;\n} else if (condition_n_1) {\n  statement_n;\n} else {\n  statement_last;\n}\n</code></pre>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#switch","title":"switch","text":"JavaScript<pre><code>switch (expression) {\n   case label_1:\n      statements_1\n      [break;]\n   case label_2:\n      statements_2\n      [break;]\n   ...\n   default:\n      statements_def\n      [break;]\n}\n</code></pre>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#3","title":"3. \u200b\u9519\u8bef","text":"","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#_3","title":"\u5f02\u5e38\u200b\u5904\u7406\u200b\u8bed\u53e5","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7528\u200b throw \u200b\u8bed\u53e5\u200b\u629b\u51fa\u200b\u4e00\u4e2a\u200b\u5f02\u5e38\u200b\u5e76\u4e14\u200b\u7528\u200b try...catch \u200b\u8bed\u53e5\u200b\u6355\u83b7\u200b\u5904\u7406\u200b\u5b83\u200b\u3002</p> <ul> <li>throw\u200b\u8bed\u53e5\u200b</li> <li>try...catch\u200b\u8bed\u53e5\u200b</li> </ul>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#_4","title":"\u5f02\u5e38\u200b\u7c7b\u578b","text":"<p>JavaScript \u200b\u53ef\u4ee5\u200b\u629b\u51fa\u200b\u4efb\u610f\u200b\u5bf9\u8c61\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u4e0d\u662f\u200b\u6240\u6709\u200b\u5bf9\u8c61\u200b\u80fd\u200b\u4ea7\u751f\u200b\u76f8\u540c\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u5c3d\u7ba1\u200b\u629b\u51fa\u200b\u6570\u503c\u200b\u6216\u8005\u200b\u5b57\u6bcd\u200b\u4e32\u200b\u4f5c\u4e3a\u200b\u9519\u8bef\u4fe1\u606f\u200b\u5341\u5206\u200b\u5e38\u89c1\u200b\uff0c\u200b\u4f46\u662f\u200b\u901a\u5e38\u200b\u7528\u200b\u4e0b\u5217\u200b\u5176\u4e2d\u200b\u4e00\u79cd\u200b\u5f02\u5e38\u200b\u7c7b\u578b\u200b\u6765\u200b\u521b\u5efa\u200b\u76ee\u6807\u200b\u66f4\u4e3a\u200b\u9ad8\u6548\u200b\uff1a</p> <ul> <li>ECMAScript exceptions</li> <li>DOMException and DOMError</li> </ul>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#throw","title":"throw","text":"<p>\u200b\u4f7f\u7528\u200bthrow\u200b\u8bed\u53e5\u200b\u629b\u51fa\u200b\u4e00\u4e2a\u200b\u5f02\u5e38\u200b\u3002\u200b\u5f53\u200b\u4f60\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\uff0c\u200b\u4f60\u200b\u89c4\u5b9a\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b\u503c\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\u8981\u200b\u88ab\u200b\u629b\u51fa\u200b\u3002</p> JavaScript<pre><code>throw expression;\n</code></pre>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#trycatchfinally","title":"try...catch...finally","text":"JavaScript<pre><code>openMyFile();\ntry {\n  writeMyFile(theData); //This may throw a error\n} catch (e) {\n  handleError(e); // If we got a error we handle it\n} finally {\n  closeMyFile(); // always close the resource\n}\n</code></pre>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#4","title":"4. \u200b\u5faa\u73af\u200b\u4e0e\u200b\u8fed\u4ee3","text":"","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#for","title":"for","text":"JavaScript<pre><code>for ([initialExpression]; [condition]; [incrementExpression])\n  statement\n</code></pre> <p>\u200b\u793a\u4f8b\u200b\uff1a JavaScript<pre><code>var step;\nfor (step = 0; step &lt; 5; step++) {\n  // Runs 5 times, with values of step 0 through 4.\n  console.log(\"Walking east one step\");\n}\n</code></pre></p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#dowhile","title":"do...while","text":"JavaScript<pre><code>do\n  statement\nwhile (condition);\n</code></pre> <p>\u200b\u793a\u4f8b\u200b\uff1a \u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b <code>do</code> \u200b\u5faa\u73af\u200b\u5c06\u200b\u81f3\u5c11\u200b\u91cd\u590d\u200b\u4e00\u6b21\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e00\u76f4\u200b\u91cd\u590d\u200b\u76f4\u5230\u200b <code>i</code> \u200b\u4e0d\u518d\u200b\u5c0f\u4e8e\u200b 5\u3002 JavaScript<pre><code>var i = 0;\ndo {\n  i += 1;\n  console.log(i);\n} while (i &lt; 5);\n</code></pre></p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#while","title":"while","text":"JavaScript<pre><code>while (condition)\n  statement\n</code></pre> <p>\u200b\u793a\u4f8b\u200b\uff1a JavaScript<pre><code>var n = 0;\nvar x = 0;\nwhile (n &lt; 3) {\n  n++;\n  x += n;\n}\n</code></pre></p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#label","title":"label","text":"<p>\u200b\u7c7b\u4f3c\u200b\u4e8e\u200bjava\uff0c\u200b\u4e00\u4e2a\u200b <code>label</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u8ba9\u4f60\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u5176\u4ed6\u200b\u4f4d\u7f6e\u200b\u5f15\u7528\u200b\u5b83\u200b\u7684\u200b\u6807\u8bc6\u7b26\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7528\u200b <code>label</code> \u200b\u6807\u8bc6\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b <code>break</code> \u200b\u6216\u8005\u200b <code>continue</code> \u200b\u6765\u200b\u6307\u51fa\u200b\u7a0b\u5e8f\u200b\u662f\u5426\u200b\u8be5\u200b\u505c\u6b62\u200b\u5faa\u73af\u200b\u8fd8\u662f\u200b\u7ee7\u7eed\u200b\u5faa\u73af\u200b\u3002</p> JavaScript<pre><code>var num = 0;\noutPoint: for (var i = 0; i &lt; 10; i++) {\n  for (var j = 0; j &lt; 10; j++) {\n    if (i == 5 &amp;&amp; j == 5) {\n      break outPoint; // \u200b\u5728\u200b i = 5\uff0cj = 5 \u200b\u65f6\u200b\uff0c\u200b\u8df3\u51fa\u200b\u6240\u6709\u200b\u5faa\u73af\u200b\uff0c\n      // \u200b\u8fd4\u56de\u200b\u5230\u200b\u6574\u4e2a\u200b outPoint \u200b\u4e0b\u65b9\u200b\uff0c\u200b\u7ee7\u7eed\u6267\u884c\u200b\n    }\n    num++;\n  }\n}\n\nalert(num); // \u200b\u8f93\u51fa\u200b 55\n</code></pre>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#forin","title":"for...in","text":"<p>for...in \u200b\u8bed\u53e5\u200b\u5faa\u73af\u200b\u4e00\u4e2a\u200b\u6307\u5b9a\u200b\u7684\u200b\u53d8\u91cf\u200b\u6765\u200b\u5faa\u73af\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u6240\u6709\u200b\u53ef\u200b\u679a\u4e3e\u200b\u7684\u200b\u5c5e\u6027\u200b\u3002JavaScript \u200b\u4f1a\u4e3a\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u5c5e\u6027\u200b\u6267\u884c\u200b\u6307\u5b9a\u200b\u7684\u200b\u8bed\u53e5\u200b\u3002</p> JavaScript<pre><code>for (variable in object) {\n  statements\n}\n</code></pre> <p>\u200b\u793a\u4f8b\u200b\uff1a \u200b\u4e0b\u9762\u200b\u7684\u200b\u51fd\u6570\u200b\u901a\u8fc7\u200b\u5b83\u200b\u7684\u200b\u53c2\u6570\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u548c\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u7684\u200b\u540d\u5b57\u200b\u3002\u200b\u7136\u540e\u200b\u5faa\u73af\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6240\u6709\u200b\u5c5e\u6027\u200b\u5e76\u4e14\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5217\u51fa\u200b\u5c5e\u6027\u200b\u540d\u200b\u548c\u200b\u8be5\u200b\u5c5e\u6027\u200b\u503c\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u3002 JavaScript<pre><code>function dump_props(obj, obj_name) {\n  var result = \"\";\n  for (var i in obj) {\n    result += obj_name + \".\" + i + \" = \" + obj[i] + \"&lt;br&gt;\";\n  }\n  result += \"&lt;hr&gt;\";\n  return result;\n}\n</code></pre> \u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u62e5\u6709\u200b <code>make</code> \u200b\u548c\u200b <code>model</code> \u200b\u5c5e\u6027\u200b\u7684\u200b <code>car</code> \u200b\u5bf9\u8c61\u200b\u6765\u8bf4\u200b\uff0c\u200b\u6267\u884c\u200b\u7ed3\u679c\u200b <code>result</code> \u200b\u662f\u200b\uff1a Text Only<pre><code>car.make = Ford\ncar.model = Mustang\n</code></pre></p>","tags":["javascript"]},{"location":"blog/frontend/JavaScript/QuickDive/BasicGrammar/#forof","title":"for...of","text":"<p>for...of \u200b\u8bed\u53e5\u200b\u5728\u200b\u53ef\u200b\u8fed\u4ee3\u200b\u5bf9\u8c61\u200b\uff08\u200b\u5305\u62ec\u200bArray\u3001Map\u3001Set\u3001arguments \u200b\u7b49\u7b49\u200b\uff09\u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff0c\u200b\u5bf9\u503c\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u72ec\u7279\u200b\u5c5e\u6027\u200b\u8c03\u7528\u200b\u4e00\u6b21\u200b\u8fed\u4ee3\u200b\u3002</p> JavaScript<pre><code>for (variable of object) {\n  statement\n}\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u5c55\u793a\u200b\u4e86\u200b for...of \u200b\u548c\u200b for...in \u200b\u4e24\u79cd\u200b\u5faa\u73af\u200b\u8bed\u53e5\u200b\u4e4b\u95f4\u200b\u7684\u200b\u533a\u522b\u200b\u3002 for...in \u200b\u5faa\u73af\u200b\u904d\u5386\u200b\u7684\u200b\u7ed3\u679c\u200b\u662f\u200b\u6570\u7ec4\u200b\u5143\u7d20\u200b\u7684\u200b\u4e0b\u6807\u200b\uff0c\u200b\u800c\u200b for...of \u200b\u904d\u5386\u200b\u7684\u200b\u7ed3\u679c\u200b\u662f\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\uff1a JavaScript<pre><code>let arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (let i in arr) {\n  console.log(i); // \u200b\u8f93\u51fa\u200b \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); // \u200b\u8f93\u51fa\u200b \"3\", \"5\", \"7\"\n}\n\n// \u200b\u6ce8\u610f\u200b for...of \u200b\u7684\u200b\u8f93\u51fa\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b \"hello\"\n</code></pre></p>","tags":["javascript"]},{"location":"blog/2024/11/11/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/","title":"\u535a\u5ba2\u200b\u6587\u7ae0\u200b\u6d4b\u8bd5","text":"<p> \u200b\u7ea6\u200b 0 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p> <p></p>","tags":["HelloWorld"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/","title":"Shell Tools and Scripting","text":"<p> \u200b\u7ea6\u200b 2038 \u200b\u4e2a\u200b\u5b57\u200b  149 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 9 \u200b\u5206\u949f\u200b</p> <p>Attachment</p> <p>course link: Shell Tools and Scripting</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#shell-scripting","title":"Shell Scripting","text":"","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#1-assign-variables","title":"1. Assign Variables","text":"<p>To assign variables in bash, use the syntax <code>foo=bar</code> and access the value of the variable with <code>$foo</code>. Note that <code>foo = bar</code> will not work since it is interpreted as calling the <code>foo</code> program with arguments <code>=</code> and <code>bar</code>. In general, in shell scripts the space character will perform argument splitting. This behavior can be confusing to use at first, so always check for that.</p> <p>Strings in bash can be defined with <code>'</code> and <code>\"</code> delimiters.</p> <p>Strings delimited with <code>'</code> are literal strings and will not substitute variable values.</p> <p>Strings delimited with <code>\"</code> will substitute variable values.</p> Bash<pre><code>foo=bar\necho \"$foo\"\n# prints bar\necho '$foo'\n# prints $foo\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#2-functions","title":"2. Functions","text":"<p>As with most programming languages, bash supports control flow techniques including <code>if</code>, <code>case</code>, <code>while</code> and <code>for</code>. Similarly, bash has functions that take arguments and can operate with them. </p> <p>Here is an example of a function that creates a directory and cds into it.</p> Bash<pre><code>mcd () {\n    mkdir -p \"$1\"\n    cd \"$1\"\n}\n</code></pre> <p>Here is how to test <code>mcd</code> function</p> Bash<pre><code>vim mcd.sh\n# paste the code into it...\nsource mcd.sh\nmcd test\n# And you will find that you are in the test directory, which is a \n# child dir in which you run the mcd program\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#3-function-arguments","title":"3. Function arguments","text":"<p>Unlike other scripting languages, bash uses a variety of special variables to refer to arguments, error codes, and other relevant variables. Below is a list of some of them. A more comprehensive list can be found here.</p> <ul> <li><code>$0</code> - Name of the script</li> <li><code>$1</code> to <code>$9</code> - Arguments to the script. <code>$1</code> is the first argument and so on.</li> <li><code>$@</code> - All the arguments</li> <li><code>$#</code> - Number of arguments</li> <li><code>$?</code> - Return code of the previous command</li> <li><code>$$</code> - Process identification number (PID) for the current script</li> <li><code>!!</code> - Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing <code>sudo !!</code></li> <li><code>$_</code> - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing <code>Esc</code> followed by <code>.</code> or <code>Alt+</code>.</li> </ul> <p>Commands will often return output using <code>STDOUT</code>, errors through <code>STDERR</code>, and a Return Code to report errors in a more script-friendly manner. </p> <p>The return code or exit status is the way scripts/commands have to communicate how execution went. </p> <ul> <li>A value of <code>0</code> usually means everything went OK</li> <li>anything different from <code>0</code> means an error occurred.</li> </ul> <p>Exit codes can be used to conditionally execute commands using <code>&amp;&amp;</code> (and operator) and <code>||</code> (or operator), both of which are short-circuiting operators. </p> <p>Commands can also be separated within the same line using a semicolon <code>;</code>. </p> <ul> <li>The <code>true</code> program will always have a <code>0</code> return code</li> <li>the <code>false</code> command will always have a <code>1</code> return code. </li> </ul> <p>Let\u2019s see some examples</p> Bash<pre><code>false || echo \"Oops, fail\"\n# Oops, fail\n\ntrue || echo \"Will not be printed\"\n#\n\ntrue &amp;&amp; echo \"Things went well\"\n# Things went well\n\nfalse &amp;&amp; echo \"Will not be printed\"\n#\n\ntrue ; echo \"This will always run\"\n# This will always run\n\nfalse ; echo \"This will always run\"\n# This will always run\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#4-substitution","title":"4. Substitution","text":"<p>Another common pattern is wanting to get the output of a command as a variable. </p> <p>This can be done with <code>command substitution</code>. Whenever you place <code>$( CMD )</code> it will execute <code>CMD</code>, get the output of the command and substitute it in place. </p> <p>For example, if you do <code>for file in $(ls)</code>, the shell will first call ls and then iterate over those values. </p> <p>A lesser known similar feature is <code>process substitution</code>, <code>&lt;( CMD )</code> will execute <code>CMD</code> and place the output in a temporary file and substitute the <code>&lt;()</code> with that file\u2019s name.</p> <p>This is useful when commands expect values to be passed by file instead of by <code>STDIN</code>. For example, <code>diff &lt;(ls foo) &lt;(ls bar)</code> will show differences between files in dirs <code>foo</code> and <code>bar</code>.</p> <p></p> <p>let\u2019s see an example that showcases some of these features. </p> <p>It will iterate through the arguments we provide, grep for the string foobar, and append it to the file as a comment if it\u2019s not found.</p> Bash<pre><code>#!/bin/bash\n\necho \"Starting program at $(date)\" # Date will be substituted\n\necho \"Running program $0 with $# arguments with pid $$\"\n\nfor file in \"$@\"; do\n    grep foobar \"$file\" &gt; /dev/null 2&gt; /dev/null\n    # When pattern is not found, grep has exit status 1\n    # We redirect STDOUT and STDERR to a null register since we do not care about them\n    if [[ $? -ne 0 ]]; then\n        echo \"File $file does not have any foobar, adding one\"\n        echo \"# foobar\" &gt;&gt; \"$file\"\n    fi\ndone\n</code></pre> <p>In the comparison we tested whether <code>$?</code> was not equal to <code>0</code>. Bash implements many comparisons of this sort - you can find a detailed list in the manpage for test. </p> <p>When performing comparisons in bash, try to use double brackets <code>[[ ]]</code> in favor of simple brackets <code>[ ]</code>. Chances of making mistakes are lower although it won\u2019t be portable to <code>sh</code>. A more detailed explanation can be found here.</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#5-globbing","title":"5. Globbing","text":"<p>When launching scripts, you will often want to provide arguments that are similar. Bash has ways of making this easier, expanding expressions by carrying out filename expansion. These techniques are often referred to as shell globbing.</p> <ul> <li>Wildcards<ul> <li><code>?</code> match one character.</li> <li><code>*</code> match any amount of characters. </li> <li>For instance, given files <code>foo, foo1, foo2, foo10 and bar</code>, the command <code>rm foo?</code> will delete foo1 and foo2 whereas <code>rm foo*</code> will delete all but bar.</li> </ul> </li> <li>Curly braces <code>{}</code> - Whenever you have a common substring in a series of commands, you can use curly braces for bash to expand this automatically. This comes in very handy when moving or converting files.</li> </ul> Bash<pre><code>convert image.{png,jpg}\n# Will expand to\nconvert image.png image.jpg\n\ncp /path/to/project/{foo,bar,baz}.sh /newpath\n# Will expand to\ncp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath\n\n# Globbing techniques can also be combined\nmv *{.py,.sh} folder\n# Will move all *.py and *.sh files\n\n\nmkdir foo bar\n# This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h\ntouch {foo,bar}/{a..h}\ntouch foo/x bar/y\n# Show differences between files in foo and bar\ndiff &lt;(ls foo) &lt;(ls bar)\n# Outputs\n# &lt; x\n# ---\n# &gt; y\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#6-shebang","title":"6. shebang","text":"<p>Note that scripts need not necessarily be written in bash to be called from the terminal. For instance, here\u2019s a simple Python script that outputs its arguments in reversed order:</p> Python<pre><code>#!/usr/local/bin/python\nimport sys\nfor arg in reversed(sys.argv[1:]):\n    print(arg)\n</code></pre> <p>The kernel knows to execute this script with a python interpreter instead of a shell command because we included a shebang line at the top of the script. </p> <p>It is good practice to write shebang lines using the <code>env</code> command that will resolve to wherever the command lives in the system, increasing the portability of your scripts.</p> <p>btw, if you really want to figure out where your program is, type this: <code>which python</code>, namely <code>which ***</code>, and add the output to the shebang line </p> <p>To resolve the location, <code>env</code> will make use of the <code>PATH</code> environment variable we introduced in the first lecture. For this example the shebang line would look like <code>#!/usr/bin/env python</code>.</p> <p>Some differences between shell functions and scripts that you should keep in mind are:</p> <ul> <li>Functions have to be in the same language as the shell, while scripts can be written in any language. This is why including a shebang for scripts is important.</li> <li>Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.</li> <li>Functions are executed in the current shell environment whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can\u2019t. Scripts will be passed by value environment variables that have been exported using export</li> <li>As with any programming language, functions are a powerful construct to achieve modularity, code reuse, and clarity of shell code. Often shell scripts will include their own function definitions.</li> </ul>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#shell-tools","title":"Shell Tools","text":"","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#1-finding-how-to-use-commands","title":"1. Finding how to use commands","text":"<ul> <li>the first-order approach is to call said command with the <code>-h</code> or <code>--help</code> flags. </li> <li>A more detailed approach is to use the <code>man</code> command. Short for manual, man provides a manual page (called manpage) for a command you specify.</li> <li>For interactive tools such as the ones based on ncurses, help for the commands can often be accessed within the program using the <code>:help</code> command or typing <code>?</code>.</li> </ul> <p>Sometimes manpages can provide overly detailed descriptions of the commands, making it hard to decipher what flags/syntax to use for common use cases. </p> <p>TLDR pages are a nifty complementary solution that focuses on giving example use cases of a command so you can quickly figure out which options to use. </p> <p>To use <code>tldr</code>, just type: <code>tldr ***</code> (just remind, you need to install it first)</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#2-finding-files","title":"2. Finding files","text":"<p><code>find</code> will recursively search for files matching some criteria. </p> <p>Some examples:</p> Bash<pre><code># Find all directories named src\nfind . -name src -type d\n# Find all python files that have a folder named test in their path\nfind . -path '*/test/*.py' -type f\n# Find all files modified in the last day\nfind . -mtime -1\n# Find all zip files with size in range 500k to 10M\nfind . -size +500k -size -10M -name '*.tar.gz'\n</code></pre> <p>Beyond listing files, find can also perform actions over files that match your query. This property can be incredibly helpful to simplify what could be fairly monotonous tasks.</p> Bash<pre><code># Delete all files with .tmp extension\nfind . -name '*.tmp' -exec rm {} \\;\n# Find all PNG files and convert them to JPG\nfind . -name '*.png' -exec convert {} {}.jpg \\;\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#3-finding-code","title":"3. Finding code","text":"<p><code>grep</code>, a generic tool for matching patterns from the input text. </p> <p>For now, know that <code>grep</code> has many flags that make it a very versatile tool. Some I frequently use are <code>-C</code> for getting Context around the matching line and <code>-v</code> for inverting the match, i.e. print all lines that do not match the pattern. </p> <p>For example, <code>grep -C 5</code> will print 5 lines before and after the match. When it comes to quickly searching through many files, you want to use <code>-R</code> since it will Recursively go into directories and look for files for the matching string.</p> <p>But <code>grep -R</code> can be improved in many ways, such as ignoring <code>.git</code> folders, using multi CPU support, &amp;c. </p> <p>Many grep alternatives have been developed, including ack, ag and rg. All of them are fantastic and pretty much provide the same functionality. For now I am sticking with ripgrep (rg), given how fast and intuitive it is. Some examples:</p> Bash<pre><code># Find all python files where I used the requests library\nrg -t py 'import requests'\n# Find all files (including hidden files) without a shebang line\nrg -u --files-without-match \"^#\\!\"\n# Find all matches of foo and print the following 5 lines\nrg foo -A 5\n# Print statistics of matches (# of matched lines and files )\nrg --stats PATTERN\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#4-finding-shell-commands","title":"4. Finding shell commands","text":"<p>The <code>history</code> command will let you access your shell history programmatically. </p> <p>It will print your shell history to the standard output. If we want to search there we can pipe that output to grep and search for patterns. <code>history | grep find</code> will print commands that contain the substring <code>\u201cfind\u201d</code>.</p> <p>In most shells, you can make use of <code>Ctrl+R</code> to perform backwards search through your history. After pressing <code>Ctrl+R</code>, you can type a substring you want to match for commands in your history. As you keep pressing it, you will cycle through the matches in your history. </p>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#5-directory-navigation","title":"5. Directory Navigation","text":"<p>uh...just look up the lecture notes</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#exercises","title":"Exercises","text":"<p>Warning</p> <p>I will write my own solution to the problem, If you want to solve those by yourself, please stop.</p> <p>Problem1</p> <p>Read <code>man ls</code> and write an <code>ls</code> command that lists files in the following manner</p> <ul> <li>Includes all files, including hidden files</li> <li>Sizes are listed in human readable format (e.g. 454M instead of 454279954)</li> <li>Files are ordered by recency</li> <li>Output is colorized</li> </ul> <p>A sample output would look like this</p> Bash<pre><code> -rw-r--r--   1 user group 1.1M Jan 14 09:53 baz\n drwxr-xr-x   5 user group  160 Jan 14 09:53 .\n -rw-r--r--   1 user group  514 Jan 14 06:42 bar\n -rw-r--r--   1 user group 106M Jan 13 12:12 foo\n drwx------+ 47 user group 1.5K Jan 12 18:08 ..\n</code></pre> <p></p> <p>Solution</p> Bash<pre><code>[root@iZbp12idmwavjjcx2k19kjZ course2]# ls -a -l -h -t --color=auto\ntotal 88K\n-rw-r--r--  1 root root  54K Dec  3 21:46 install_lts.sh\ndrwxr-xr-x  5 root root 4.0K Dec  3 21:46 .\n-rwxrwxrwx  1 root root   83 Dec  3 20:04 script.py\ndrwxr-xr-x 11 root root 4.0K Dec  3 20:02 bar\ndrwxr-xr-x 11 root root 4.0K Dec  3 20:02 foo\n-rwxrwxrwx  1 root root   50 Dec  3 19:21 mcd.sh\n-rwxrwxrwx  1 root root  485 Dec  3 19:21 f.sh\ndrwxr-xr-x  2 root root 4.0K Dec  3 19:17 test\ndrwxr-xr-x 14 root root 4.0K Dec  3 19:12 ..\n</code></pre> <ul> <li><code>-a</code> : includes all files</li> <li><code>-l</code> : use a long listing format</li> <li><code>-h</code> : print sizes like 1K 234M 2G etc.</li> <li><code>-t</code> : sort by recency</li> <li><code>--color=auto</code> : colorize output</li> </ul> <p>Problem2</p> <p>Write bash functions <code>marco</code> and <code>polo</code> that do the following. Whenever you execute <code>marco</code> the current working directory should be saved in some manner, then when you execute <code>polo</code>, no matter what directory you are in, <code>polo</code> should <code>cd</code> you back to the directory where you executed <code>marco</code>. For ease of debugging you can write the code in a file <code>marco.sh</code> and (re)load the definitions to your shell by executing <code>source marco.sh</code>.</p> <p></p> <p>Solution</p> Bash<pre><code>#!/bin/bash\nmarco() {\n        echo \"$(pwd)\" &gt; $HOME/marco_history.log\n        echo \"save pwd - $(pwd)\"\n}\npolo() {\n        cd \"$(cat \"$HOME/marco_history.log\")\"\n}\n</code></pre> <p>Problem3</p> <p>Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many runs it took for the script to fail.</p> Bash<pre><code> #!/usr/bin/env bash\n\n n=$(( RANDOM % 100 ))\n\n if [[ n -eq 42 ]]; then\n    echo \"Something went wrong\"\n    &gt;&amp;2 echo \"The error was using magic numbers\"\n    exit 1\n fi\n\n echo \"Everything went according to plan\"\n</code></pre> <p></p> <p>Solution</p> Bash<pre><code>#!/usr/bin/env bash\ncount=0\necho &gt; out.log\n\nwhile true\ndo\n        ./task3.sh &amp;&gt;&gt; out.log\n        if [[ $? -ne 0 ]]; then\n                cat out.log\n                echo \"failed after $count times\"\n                break\n        fi\n        ((count++))\ndone\n</code></pre> <p>Problem4</p> <p>As we covered in the lecture <code>find</code>\u2019s <code>-exec</code> can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like <code>tar</code> take inputs from arguments. To bridge this disconnect there\u2019s the xargs command which will execute a command using STDIN as arguments. For example <code>ls | xargs rm</code> will delete the files in the current directory.</p> <p>Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check <code>-d</code> flag for <code>xargs</code>).</p> <p></p> <p>Solution</p> <p>prerequisite</p> Bash<pre><code>mkdir html_root\ncd html_root\nmkdir html_{a..h}\ntouch html_{a..h}/{a..h}.html\n</code></pre> <p>code</p> Bash<pre><code>find . -type f -name '*.html' | xargs -d '\\n' tar -cvzf html.zip\n</code></pre> <ol> <li> <p><code>find . -type f -name \"*.html\"</code></p> <ul> <li><code>find</code> searches for files and directories.</li> <li><code>.</code> specifies the current directory as the starting point.</li> <li><code>-type f</code> filters the results to include only files (not directories or other types).</li> <li><code>-name \"*.html\"</code> matches files with the .html extension.</li> <li>Output: A list of <code>.html</code> file paths.</li> </ul> </li> <li> <p><code>|</code> (Pipe symbol)</p> <ul> <li>Passes the output of find (list of .html files) as input to the next command, xargs.</li> </ul> </li> <li> <p><code>xargs -d '\\n'</code></p> <ul> <li><code>xargs</code> converts the input (list of file paths) into arguments for the tar command.</li> <li><code>-d '\\n'</code> specifies that each line of input is treated as a separate file. This ensures paths with spaces or special characters are handled correctly.</li> </ul> </li> <li> <p><code>tar -cvzf html.zip</code></p> <ul> <li><code>tar</code> creates compressed archives.</li> <li><code>-c</code> : Creates a new archive.</li> <li><code>-v</code> : Displays a list of files being added to the archive (verbose mode).</li> <li><code>-z</code> : Compresses the archive using gzip.</li> <li><code>-f</code> html.zip: Names the output file <code>html.zip</code>.</li> </ul> </li> </ol> <p>Problem5</p> <p>(Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency?</p> <p></p> <p>Solution</p> Bash<pre><code>find . -type f -print0 | xargs -0 ls -lt | head -1\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/04/shell-tools-and-scripting/#summary","title":"Summary","text":"<p>uh... I find that I'm still quite uncomfortable with the grammar of bash script. The next step I think, before next lecture, maybe is to pursue a deeper and better understanding of bash script.</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/","title":"The Shell","text":"<p> \u200b\u7ea6\u200b 1290 \u200b\u4e2a\u200b\u5b57\u200b  103 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 6 \u200b\u5206\u949f\u200b</p> <p>\u200b\u524d\u8a00\u200b</p> <p>\u200b\u4e34\u8fd1\u200b\u671f\u672b\u200b\uff0c\u200b\u524d\u65b9\u200b\u6709\u200b\u4e00\u5927\u5806\u200b\u7684\u200b\u80cc\u8bf5\u200b+\u200b\u8003\u8bd5\u200b\u7b49\u200b\u7740\u200b\u6211\u200b\uff0c\u200b\u4f46\u200b\u6211\u200b\u597d\u50cf\u200b\u4e0d\u662f\u200b\u5f88\u200b\u614c\u200b(\u200b\u8fd9\u662f\u200b\u4ec0\u4e48\u200b\u539f\u56e0\u200b...), \u200b\u611f\u89c9\u200b\u6211\u200b\u662f\u200b\u90a3\u79cd\u200b\u4e0d\u6b7b\u200b\u5230\u200b\u4e34\u5934\u200b\u4e0d\u4f1a\u200b\u52a8\u200b\u7684\u200b\u4eba\u200b\uff0c\u200b\u95f2\u200b\u7684\u200b\u65e0\u804a\u200b\u51b3\u5b9a\u200b\u5237\u200b\u4e00\u4e0b\u200b\u8fd9\u95e8\u200b\u5e7f\u53d7\u200b\u597d\u8bc4\u200b\u7684\u200b\u516c\u5f00\u8bfe\u200b\uff0c\u200b\u5c31\u200b\u5f53\u505a\u200b\u5a31\u4e50\u200b\u653e\u677e\u200b\u7f62\u200b(\u200b\u8ba1\u5212\u200b\u4f7f\u7528\u200b\u82f1\u6587\u200b\u7b14\u8bb0\u200b\uff0c\u200b\u953b\u70bc\u200b\u4e00\u4e0b\u200b\u5199\u4f5c\u80fd\u529b\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u5927\u91cf\u200b\u9519\u8bef\u200b\u8bf7\u200b\u89c1\u8c05\u200b ----\u200b\u8bfe\u7a0b\u200b\u94fe\u63a5\u200b: 2020 Lectures \u00b7 Missing Semester </p> <p>\u200b\u672c\u200b\u7ae0\u8282\u200b\u94fe\u63a5\u200b: Missing Semester Overview</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#1-what-is-the-shell","title":"1. What is the shell","text":"<p>All kinds of shell share one common core: they allow you to run programs, give them input, and inspect their output in a semi-structured way</p> <p>As I use macos, my shell is terminal or namely zsh. (uh... btw, to be honest, I don't quiet know the differences between zsh and terminal and shell, hope I'm right..</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#2-using-the-shell","title":"2. Using the shell","text":"<p>When you launch your terminal, you will see a prompt that often looks a little like this:</p> Bash<pre><code>missing:~$ \n</code></pre> <p>Down below is what my shell looks like: Bash<pre><code>cangjingyue@chenjinyangdeMacBook-Air ~ % \n</code></pre></p> <p>This is the main textual interface to the shell. It tells you that you are on the machine <code>missing</code> and that your \u201ccurrent working directory\u201d, or where you currently are, is <code>~</code> (short for \u201chome\u201d). The <code>$</code> tells you that you are not the root user (more on that later). At this prompt you can type a command, which will then be interpreted by the shell. </p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#some-basic-command","title":"Some basic command","text":"<ol> <li>date</li> </ol> <p><code>date</code> prints the current date and time Bash<pre><code>missing:~$ date\nFri 10 Jan 2020 11:49:31 AM EST\nmissing:~$ \n</code></pre></p> <ol> <li>echo</li> </ol> <p><code>echo</code> simply prints out its arguments.</p> Bash<pre><code>missing:~$ echo hello\nhello\n</code></pre> <p>If you want to provide an argument that contains spaces or other special characters (e.g., a directory named <code>\u201cMy Photos\u201d</code>), you can either quote the argument with <code>'</code> or <code>\"</code> (<code>\"My Photos\"</code>), or escape just the relevant characters with <code>\\</code> (<code>My\\ Photos</code>).</p> <p>But... it seems that my macos doesn't need those quote or back slash, it  will also print out the correct arguments</p> <p>just like \u2b07\ufe0f Bash<pre><code>cangjingyue@chenjinyangdeMacBook-Air ~ % echo My Photos\nMy Photos\n</code></pre></p> <p>If the shell is asked to execute a command that doesn\u2019t match one of its programming keywords, it consults an environment variable called <code>$PATH</code> that lists which directories the shell should search for programs when it is given a command:</p> Bash<pre><code>missing:~$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nmissing:~$ which echo\n/bin/echo\nmissing:~$ /bin/echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#3-navigating-in-the-shell","title":"3. Navigating in the shell","text":"<p>1. pwd</p> <p><code>pwd</code> prints the absolute path of current working directory</p> Bash<pre><code>missing:~$ pwd\n/home/missing\n</code></pre> <p>2. cd</p> <p><code>cd</code> change your working directory to another</p> Bash<pre><code>missing:~$ cd /home\nmissing:/home$ pwd\n/home\nmissing:/home$ cd ..\nmissing:/$ pwd\n/\nmissing:/$ cd ./home\nmissing:/home$ pwd\n/home\nmissing:/home$ cd missing\nmissing:~$ pwd\n/home/missing\n</code></pre> <p>3. ls</p> <p>To see what lives in a given directory, we use the <code>ls</code> command:</p> Bash<pre><code>missing:~$ ls\nmissing:~$ cd ..\nmissing:/home$ ls\nmissing\nmissing:/home$ cd ..\nmissing:/$ ls\nbin\nboot\ndev\netc\nhome\n...\n</code></pre> <p>4. ls -l</p> <p><code>ls -l</code> use a long listing format:</p> Bash<pre><code>missing:~$ ls -l /home\ndrwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing\n</code></pre> <ul> <li>First, the <code>d</code> at the beginning of the line tells us that missing is a directory. </li> <li>Then follow three groups of three characters (rwx). These indicate what permissions the owner of the file (missing), the owning group (users), and everyone else respectively have on the relevant item. </li> <li>A <code>-</code> indicates that the given principal does not have the given permission. </li> <li>Above, only the owner is allowed to modify (w) the missing directory (i.e., add/remove files in it). </li> <li>To enter a directory, a user must have \u201csearch\u201d (represented by \u201cexecute\u201d: x) permissions on that directory (and its parents). </li> <li>To list its contents, a user must have read \u00ae permissions on that directory. For files, the permissions are as you would expect. </li> <li>Quick summary: <code>rwx</code> represents the permissions, <code>r</code> for read, <code>w</code> for modify, <code>x</code> for execute, <code>-</code> for don't have the given permission.</li> <li>Notice that nearly all the files in <code>/bin</code> have the <code>x</code> permission set for the last group, \u201ceveryone else\u201d, so that anyone can execute those programs.</li> </ul> <p>5. other else</p> <ul> <li><code>mv</code> (to rename/move a file)</li> <li><code>cp</code> (to copy a file)</li> <li><code>mkdir</code> (to make a new directory).</li> <li><code>man</code> ( It takes as an argument the name of a program, and shows you its manual page. Press <code>q</code> to exit.)</li> </ul> Bash<pre><code>missing:~$ man ls\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#4-connecting-programs","title":"4. Connecting programs","text":"<p><code>&lt; file</code> and <code>&gt; file</code>. These let you rewire the input and output streams of a program to a file respectively:</p> Bash<pre><code>missing:~$ echo hello &gt; hello.txt\nmissing:~$ cat hello.txt\nhello\nmissing:~$ cat &lt; hello.txt\nhello\nmissing:~$ cat &lt; hello.txt &gt; hello2.txt\nmissing:~$ cat hello2.txt\nhello\n</code></pre> <p><code>cat</code> is a program that concatenates files. When given file names as arguments, it prints the contents of each of the files in sequence to its output stream. But when cat is not given any arguments, it prints contents from its input stream to its output stream (like in the third example above).</p> <p>You can also use <code>&gt;&gt;</code> to append to a file</p> <p>The <code>|</code> operator lets you \u201cchain\u201d programs such that the output of one is the input of another:</p> Bash<pre><code>missing:~$ ls -l / | tail -n1\ndrwxr-xr-x 1 root  root  4096 Jun 20  2019 var\nmissing:~$ curl --head --silent google.com | grep --ignore-case content-length | cut --delimiter=' ' -f2\n219\n</code></pre> <p>The command <code>tail</code> means print the tail lines of a file, <code>-n</code> means the index of the line(starting from 1 in the end), <code>-n1</code> means to print the exactly last one line of the file.</p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#5-a-versatile-and-powerful-tool","title":"5. A versatile and powerful tool","text":"<p>On most Unix-like systems, one user is special: the \u201croot\u201d user.</p> <p>The root user is above (almost) all access restrictions, and can create, read, update, and delete any file in the system.</p> <p>using the <code>sudo</code> command. As its name implies, it lets you \u201cdo\u201d something \u201cas su\u201d (short for \u201csuper user\u201d, or \u201croot\u201d)</p> <p>One thing you need to be root in order to do is writing to the sysfs file system mounted under <code>/sys</code>. sysfs exposes a number of kernel parameters as files, so that you can easily reconfigure the kernel on the fly without specialized tools. Note that sysfs does not exist on Windows or macOS.</p> <p>For example, the brightness of your laptop\u2019s screen is exposed through a file called brightness under</p> Bash<pre><code>/sys/class/backlight\n</code></pre> <p>By writing a value into that file, we can change the screen brightness. Your first instinct might be to do something like:</p> Bash<pre><code>$ sudo find -L /sys/class/backlight -maxdepth 2 -name '*brightness*'\n/sys/class/backlight/thinkpad_screen/brightness\n$ cd /sys/class/backlight/thinkpad_screen\n$ sudo echo 3 &gt; brightness\nAn error occurred while redirecting file 'brightness'\nopen: Permission denied\n</code></pre> <p>Simply speaking, the error occurs because the shell (which is authenticated just as your user) tries to open the brightness file for writing, before setting that as sudo echo\u2019s output, but is prevented from doing so since the shell does not run as root. </p> Bash<pre><code>$ echo 3 | sudo tee brightness\n</code></pre> <p>Since the <code>tee</code> program is the one to open the <code>/sys</code> file for writing, and it is running as root, the permissions all work out. </p>","tags":["CS","Missing"]},{"location":"blog/2024/12/01/the-shell/#6-exercises","title":"6. exercises","text":"<p>Warning</p> <p>I will write my own solution to the problem, If you want to solve those by yourself, please stop.</p> <p>1. Create a new directory called <code>missing</code> under <code>/tmp</code>. </p> Bash<pre><code>cd /tmp\nmkdir missing\n</code></pre> <p>2. Use <code>touch</code> to create a new file called <code>semester</code> in <code>missing</code>.</p> Bash<pre><code>cd missing\ntouch semster\n</code></pre> <p>5. Write the following into that file, one line at a time: Bash<pre><code>#!/bin/sh\ncurl --head --silent https://missing.csail.mit.edu\n</code></pre></p> <p>The first line might be tricky to get working. It\u2019s helpful to know that <code>#</code> starts a comment in Bash, and <code>!</code> has a special meaning even within double-quoted (\") strings. Bash treats single-quoted strings (') differently: they will do the trick in this case. See the Bash Quoting (Bash Reference Manual) manual page for more information.</p> Bash<pre><code>echo '#!/bin/sh' &gt; semster\necho 'curl --head --silent https://missing.csail.mit.edu' &gt;&gt; semster\n</code></pre> <p>6. execute the file</p> <p>result:</p> Bash<pre><code>cangjingyue@chenjinyangdeMacBook-Air missing % ./semster\nzsh: permission denied: ./semester\n</code></pre> <p>doesn't work...</p> <p>using <code>ls -l</code> to check the permissions:</p> Bash<pre><code>cangjingyue@chenjinyangdeMacBook-Air missing % ls -l \ntotal 8\n-rw-r--r--  1 cangjingyue  wheel  61 Dec  1 10:44 semster\n</code></pre> <p>7. Use <code>chmod</code> to make it possible to run the command <code>./semester</code></p> <p>First, quick dive to <code>chmod</code></p> <p><code>chmod</code> : change file modes or Access Control Lists</p> <p>Usage: <code>chmod [\u200b\u9009\u9879\u200b]... \u200b\u6a21\u5f0f\u200b[,\u200b\u6a21\u5f0f\u200b]... \u200b\u6587\u4ef6\u200b...</code></p> <p><code>mode</code> define the permissions of the file or directory, usually 3 number. Each number represents the permissions of user, group and other respectively.</p> <p>Each write, read, and execute permissions have the following number value:</p> <ul> <li>r (read) = 4</li> <li>w (write) = 2</li> <li>x (execute) = 1</li> <li>no permissions = 0</li> </ul> <p>To find out the file\u2019s permissions in numeric mode simply calculate the totals for all users classes. For example, to give read, write and execute permission to the file\u2019s owner, read and execute permissions to the file\u2019s group and only read permissions to all other users you would do the following:</p> <ul> <li>Owner: rwx=4+2+1=7</li> <li>Group: r-x=4+0+1=5</li> <li>Others: r-x=4+0+0=4</li> </ul> <p>Using the above knowledge, the solution:</p> Bash<pre><code>chmod 777 semester\n./semster\n</code></pre> <p>result</p> Bash<pre><code>HTTP/2 200 \nserver: GitHub.com\ncontent-type: text/html; charset=utf-8\nlast-modified: Thu, 24 Oct 2024 16:34:06 GMT\naccess-control-allow-origin: *\netag: \"671a76fe-205d\"\nexpires: Sat, 30 Nov 2024 08:50:54 GMT\ncache-control: max-age=600\nx-proxy-cache: MISS\nx-github-request-id: FFD8:1DA486:102D65D:10CDF1E:674ACF96\naccept-ranges: bytes\nage: 0\ndate: Sun, 01 Dec 2024 03:08:59 GMT\nvia: 1.1 varnish\nx-served-by: cache-itm1220038-ITM\nx-cache: HIT\nx-cache-hits: 0\nx-timer: S1733022540.782095,VS0,VE181\nvary: Accept-Encoding\nx-fastly-request-id: f004543c54e1f7139ecb9f84682d652aa24b9a04\ncontent-length: 8285\n</code></pre> <p>8. Use <code>|</code> and <code>&gt;</code> to write the <code>\u201clast modified\u201d</code> date output by <code>semester</code> into a file called <code>last-modified.txt</code> in your home directory.</p> Bash<pre><code>./semster | grep last-modified &gt; ~/last-modified.txt\n</code></pre> <p>result</p> Bash<pre><code>cangjingyue@chenjinyangdeMacBook-Air missing % cat ~/last-modified.txt \nlast-modified: Thu, 24 Oct 2024 16:34:06 GMT\n</code></pre>","tags":["CS","Missing"]},{"location":"blog/2024/11/12/dijkstra%E7%AE%97%E6%B3%95/","title":"Dijkstra\u200b\u7b97\u6cd5","text":"<p> \u200b\u7ea6\u200b 94 \u200b\u4e2a\u200b\u5b57\u200b  64 \u200b\u884c\u200b\u4ee3\u7801\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p></p> <p>\u200b\u6280\u5de7\u200b\uff1a \u200b\u5982\u679c\u200b\u56fe\u4e3a\u200b\u65e0\u200b\u5411\u200b\u56fe\u200b\uff08\u200b\u6709\u5411\u56fe\u200b\u53cd\u8f6c\u200b\uff09\u200b\u4e14\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8d1f\u8fb9\u200b\uff0c\u200b\u8981\u6c42\u200b\u6c42\u200b\u5404\u4e2a\u200b\u70b9\u200b i \u200b\u5230\u200b\u540c\u4e00\u200b\u7ec8\u70b9\u200b n \u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200bDijkstra\u200b\u7684\u200b\u8d77\u70b9\u200b\u548c\u200b\u7ec8\u70b9\u200b \u200b\u5747\u200b\u4e3a\u200b n\uff0c\u200b\u6c42\u89e3\u200b\u5f97\u5230\u200b\u7684\u200b distance \u200b\u6570\u7ec4\u200b\u5373\u200b \u200b\u5404\u4e2a\u200b\u70b9\u200b i \u200b\u5230\u200b\u7ec8\u70b9\u200b n \u200b\u7684\u200b\u6700\u200b\u77ed\u8ddd\u79bb\u200b\u3002</p> <p>\u200b\u4ee5\u200b743. \u200b\u7f51\u7edc\u200b\u5ef6\u8fdf\u65f6\u95f4\u200b\u4e3a\u4f8b\u200b</p> <p>Dijkstra\u200b\u7b97\u6cd5\u200b\u6a21\u7248\u200b</p> <p>Java \u200b\u9898\u89e3\u200b\uff1a</p> Java<pre><code>class Solution {\n    public int networkDelayTime(int[][] times, int n, int s) {\n        ArrayList&lt;ArrayList&lt;int[]&gt;&gt; graph = new ArrayList&lt;&gt;();\n        // \u200b\u8282\u70b9\u200b\u4e0b\u6807\u200b\u4e3a\u200b 1 - n\n        for (int i = 0; i &lt;= n; i++) {\n            graph.add(new ArrayList&lt;&gt;());\n        }\n        for (int[] edge : times) {\n            graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\n        }\n        int[] distance = new int[n + 1];\n        Arrays.fill(distance, Integer.MAX_VALUE);\n        distance[s] = 0;\n        boolean[] visted = new boolean[n + 1];\n        PriorityQueue&lt;int[]&gt; heap = new PriorityQueue&lt;&gt;((a, b) -&gt; a[1] - b[1]);\n        heap.add(new int[]{s, 0});\n        while (!heap.isEmpty()) {\n            int u = heap.poll()[0];\n            if (visted[u]) {\n                continue;\n            }\n            visted[u] = true;\n            for (int[] edge : graph.get(u)) {\n                int v = edge[0];\n                int w = edge[1];\n                if (!visted[v] &amp;&amp; distance[u] + w &lt; distance[v]) {\n                    distance[v] = distance[u] + w;\n                    heap.add(new int[] {v, distance[u] + w});\n                }\n            }\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 1; i &lt;= n; i++) {\n            if (distance[i] == Integer.MAX_VALUE) {\n                return -1;\n            }\n            ans = Math.max(ans, distance[i]);\n        }\n        return ans;\n    }\n}\n</code></pre> <p>Python \u200b\u9898\u89e3\u200b\uff1a</p> Python<pre><code>class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, s: int) -&gt; int:\n        graph = [[] for _ in range(n + 1)]\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        distance = [inf for _ in range(n + 1)]\n        distance[s] = 0\n        visited = [False for _ in range(n + 1)]\n\n        heap = [(0, s)]\n        while heap:\n            _, u = heappop(heap)\n            if visited[u]:\n                continue\n            visited[u] = True\n            for v, w in graph[u]:\n                if not visited[v] and distance[u] + w &lt; distance[v]:\n                    distance[v] = distance[u] + w\n                    heappush(heap, (distance[v], v))\n        ans = max(distance[1:])\n        return ans if ans &lt; inf else -1\n</code></pre>","tags":["Algorithm"]},{"location":"blog/2024/11/12/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%A8%A1%E7%89%88/","title":"\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6a21\u7248","text":"<p> \u200b\u7ea6\u200b 21 \u200b\u4e2a\u200b\u5b57\u200b  36 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>\u200b\u7edf\u4e00\u200b\u6a21\u7248\u200b Java<pre><code>//\u200b\u5916\u5c42\u200b\u5faa\u73af\u200b\u6269\u5c55\u200b\u53f3\u200b\u8fb9\u754c\u200b\uff0c\u200b\u5185\u5c42\u200b\u5faa\u73af\u200b\u6269\u5c55\u200b\u5de6\u200b\u8fb9\u754c\u200b\nfor (int l = 0, r = 0 ; r &lt; n ; r++) {\n        //\u200b\u5f53\u524d\u200b\u8003\u8651\u200b\u7684\u200b\u5143\u7d20\u200b\n        while (l &lt;= r &amp;&amp; check()) {//\u200b\u533a\u95f4\u200b[left,right]\u200b\u4e0d\u200b\u7b26\u5408\u200b\u9898\u610f\u200b\n        //\u200b\u6269\u5c55\u200b\u5de6\u200b\u8fb9\u754c\u200b\n    }\n    //\u200b\u533a\u95f4\u200b[left,right]\u200b\u7b26\u5408\u200b\u9898\u610f\u200b\uff0c\u200b\u7edf\u8ba1\u200b\u76f8\u5173\u200b\u4fe1\u606f\u200b\n}\n</code></pre></p> <p> </p> <p>\u200b\u6a21\u7248\u200b\u9898\u200b\uff1a3. \u200b\u65e0\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u5b50\u4e32\u200b</p> <p>Java\u200b\u9898\u89e3\u200b Java<pre><code>class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        char[] ss = s.toCharArray();\n        Set&lt;Character&gt; set = new HashSet&lt;&gt;();\n        int res = 0;\n        for (int left = 0, right = 0; right &lt; s.length(); right++) {\n            char ch = ss[right];\n            while (set.contains(ch)) {\n                set.remove(ss[left]);\n                left++;\n            }\n            set.add(ss[right]);\n            res = Math.max(res, right - left + 1);\n        }\n        return res;\n    }\n}\n</code></pre></p> <p>python\u200b\u9898\u89e3\u200b Python<pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        x = set()\n        res, left = 0, 0\n        for right in range(len(s)):\n            while s[right] in x:\n                x.remove(s[left])\n                left += 1\n            x.add(s[right])\n            res = max(res, right - left + 1)\n        return res\n</code></pre></p>","tags":["Algorithm"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/","title":"Minio \u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 113 \u200b\u4e2a\u200b\u5b57\u200b  27 \u200b\u884c\u200b\u4ee3\u7801\u200b  5 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#_1","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55","text":"Bash<pre><code>#\u200b\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55\u200b\nmkdir -p /data/minio\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#yml","title":"\u521b\u5efa\u200byml\u200b\u6587\u4ef6","text":"Bash<pre><code>vim /data/minio/docker-compose.yml\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#_2","title":"\u586b\u5165\u200b\u914d\u7f6e","text":"Bash<pre><code>version: '3.9'\nservices:\n  minio:\n    image: \"quay.io/minio/minio:RELEASE.2022-08-02T23-59-16Z\"\n    container_name: minio\n    ports:\n      - \"9000:9000\" # api \u200b\u7aef\u53e3\u200b\n      - \"9001:9001\" # \u200b\u63a7\u5236\u53f0\u200b\u7aef\u53e3\u200b\n    environment:\n      TZ: Asia/Shanghai # \u200b\u65f6\u200b\u533a\u200b\u4e0a\u6d77\u200b\n      MINIO_ROOT_USER: admin # \u200b\u7ba1\u7406\u200b\u540e\u53f0\u200b\u7528\u6237\u540d\u200b\n      MINIO_ROOT_PASSWORD: 12345678 # \u200b\u7ba1\u7406\u200b\u540e\u53f0\u200b\u5bc6\u7801\u200b\uff0c\u200b\u6700\u5c0f\u200b8\u200b\u4e2a\u5b57\u7b26\u200b\n      MINIO_COMPRESS: \"off\" # \u200b\u5f00\u542f\u200b\u538b\u7f29\u200b on \u200b\u5f00\u542f\u200b off \u200b\u5173\u95ed\u200b\n      MINIO_COMPRESS_EXTENSIONS: \"\" # \u200b\u6269\u5c55\u540d\u200b .pdf,.doc \u200b\u4e3a\u7a7a\u200b \u200b\u6240\u6709\u200b\u7c7b\u578b\u200b\u5747\u200b\u538b\u7f29\u200b\n      MINIO_COMPRESS_MIME_TYPES: \"\" # mime \u200b\u7c7b\u578b\u200b application/pdf \u200b\u4e3a\u7a7a\u200b \u200b\u6240\u6709\u200b\u7c7b\u578b\u200b\u5747\u200b\u538b\u7f29\u200b\n    volumes:\n      - /data/minio/data:/data/ # \u200b\u6620\u5c04\u200b\u5f53\u524d\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200bdata\u200b\u76ee\u5f55\u200b\u81f3\u200b\u5bb9\u5668\u200b\u5185\u200b/data\u200b\u76ee\u5f55\u200b      \n      - /data/minio/config:/root/.minio/ # \u200b\u6620\u5c04\u200b\u914d\u7f6e\u200b\u76ee\u5f55\u200b\n    command: server --address ':9000' --console-address ':9001' /data  # \u200b\u6307\u5b9a\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u76ee\u5f55\u200b /data\n    privileged: true\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#_3","title":"\u542f\u52a8\u200b\u5bb9\u5668","text":"Bash<pre><code>cd /data/minio\ndocker-compose up -d\n#\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u5f3a\u5236\u200b\u91cd\u65b0\u200b\u6784\u5efa\u200b\ndocker-compose up --force-recreate -d\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#90009001","title":"\uff01\uff01\u200b\u5b89\u5168\u200b\u7ec4\u200b\u6dfb\u52a0\u200b\u7aef\u53e3\u200b 9000\uff0c9001 \uff01\uff01","text":"","tags":["docker"]},{"location":"blog/2024/11/12/minio-%E9%83%A8%E7%BD%B2/#_4","title":"\u914d\u7f6e\u200b\u6876","text":"<p>\u200b\u521b\u5efa\u200b\u6876\u200b  \u200b\u8bbe\u7f6e\u200b\u6876\u200b\u4e3a\u200b\u516c\u5f00\u200b </p> <p></p> <p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6743\u9650\u200b\u7528\u6237\u200b\uff0c\u200b\u83b7\u53d6\u200b\u5bc6\u94a5\u200b</p> <p></p> <p></p> <p>\u200b\u70b9\u51fb\u200bcreate\u200b\u6309\u94ae\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u968f\u673a\u200b\u751f\u6210\u200baccessKey secretKey\u3002 \u200b\u4f1a\u200b\u5c06\u200b\u8fd9\u200b\u4e24\u4e2a\u200bkey\u200b\u8fdb\u884c\u200b\u5c55\u793a\u200b\uff0c\u200b\u6b64\u65f6\u200b\u53ef\u4ee5\u200b\u590d\u5236\u7c98\u8d34\u200b\u5230\u200b\u4e00\u4e2a\u200b\u6587\u672c\u6587\u4ef6\u200b\u4e0a\u200b\uff0c\u200b\u540e\u7eed\u200b\u4f7f\u7528\u200b\u4ee3\u7801\u200b\u4e0a\u4f20\u200b\u6587\u4ef6\u200b\u65f6\u200b\u9700\u8981\u200b\u7528\u5230\u200b\u8fd9\u200b\u4e24\u4e2a\u200bkey</p>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/","title":"Mysql \u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 34 \u200b\u4e2a\u200b\u5b57\u200b  59 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#_1","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55","text":"Bash<pre><code>#\u200b\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55\u200b\nmkdir -p /data/mysql/data;\nmkdir -p /data/mysql/conf;\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#yml","title":"\u521b\u5efa\u200byml\u200b\u6587\u4ef6","text":"Bash<pre><code>vim /data/mysql/docker-compose.yml\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#_2","title":"\u586b\u5165\u200b\u914d\u7f6e","text":"Bash<pre><code>version: '3.8' # \u200b\u9009\u62e9\u200b\u5408\u9002\u200b\u7248\u672c\u200b\nservices:\n  mysql:\n    image: mysql:8.0.30 #mysql\u200b\u7248\u672c\u200b\n    container_name: mysql\n    volumes:\n      - /data/mysql/data:/var/lib/mysql\n      - /data/mysql/conf/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf\n    restart: always\n    ports:\n      - 3306:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456 #root\u200b\u7528\u6237\u200b\u5bc6\u7801\u200b\n      TZ: Asia/Shanghai\n    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#_3","title":"\u521b\u5efa\u200b\u914d\u7f6e\u6587\u4ef6","text":"Bash<pre><code>vim /data/mysql/conf/my.cnf\n</code></pre> Bash<pre><code>[mysqld]\ndefault-storage-engine=INNODB  # \u200b\u521b\u5efa\u200b\u65b0\u8868\u65f6\u200b\u5c06\u200b\u4f7f\u7528\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u5b58\u50a8\u200b\u5f15\u64ce\u200b\ncharacter-set-server=utf8mb4      # \u200b\u8bbe\u7f6e\u200bmysql\u200b\u670d\u52a1\u7aef\u200b\u9ed8\u8ba4\u200b\u5b57\u7b26\u96c6\u200b\npid-file        = /var/run/mysqld/mysqld.pid  # pid\u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u76ee\u5f55\u200b\nsocket          = /var/run/mysqld/mysqld.sock # \u200b\u7528\u4e8e\u200b\u672c\u5730\u8fde\u63a5\u200b\u7684\u200bsocket\u200b\u5957\u200b\u63a5\u5b57\u200b\ndatadir         = /var/lib/mysql              # \u200b\u6570\u636e\u6587\u4ef6\u200b\u5b58\u653e\u200b\u7684\u200b\u76ee\u5f55\u200b\nsymbolic-links=0\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION # \u200b\u5b9a\u4e49\u200bmysql\u200b\u5e94\u8be5\u200b\u652f\u6301\u200b\u7684\u200bsql\u200b\u8bed\u6cd5\u200b\uff0c\u200b\u6570\u636e\u200b\u6821\u9a8c\u200b\u7b49\u200b!\n\n# \u200b\u5141\u8bb8\u200b\u6700\u5927\u200b\u8fde\u63a5\u6570\u200b\nmax_connections=200\n\n\n# \u200b\u540c\u4e00\u200b\u5c40\u57df\u7f51\u200b\u5185\u200b\u6ce8\u610f\u200b\u8981\u200b\u552f\u4e00\u200b\nserver-id=3306\n# \u200b\u5f00\u542f\u200b\u4e8c\u8fdb\u5236\u200b\u65e5\u5fd7\u200b\u529f\u80fd\u200b &amp; \u200b\u65e5\u5fd7\u200b\u4f4d\u7f6e\u200b\u5b58\u653e\u200b\u4f4d\u7f6e\u200b`/var/lib/mysql`\n#log-bin=mysql-bin\nlog-bin=/var/lib/mysql/mysql-bin\n# binlog\u200b\u683c\u5f0f\u200b\n# 1. STATEMENT\uff1a\u200b\u57fa\u4e8e\u200bSQL\u200b\u8bed\u53e5\u200b\u7684\u200b\u6a21\u5f0f\u200b\uff0cbinlog \u200b\u6570\u636e\u91cf\u200b\u5c0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u67d0\u4e9b\u200b\u8bed\u53e5\u200b\u548c\u200b\u51fd\u6570\u200b\u5728\u200b\u590d\u5236\u200b\u8fc7\u7a0b\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u6570\u636e\u200b\u4e0d\u200b\u4e00\u81f4\u200b\u751a\u81f3\u200b\u51fa\u9519\u200b\uff1b\n# 2. MIXED\uff1a\u200b\u6df7\u5408\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6839\u636e\u200b\u8bed\u53e5\u200b\u6765\u200b\u9009\u7528\u200b\u662f\u200b STATEMENT \u200b\u8fd8\u662f\u200b ROW \u200b\u6a21\u5f0f\u200b\uff1b\n# 3. ROW\uff1a\u200b\u57fa\u4e8e\u200b\u884c\u200b\u7684\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u7684\u200b\u662f\u200b\u884c\u200b\u7684\u200b\u5b8c\u6574\u200b\u53d8\u5316\u200b\u3002\u200b\u5b89\u5168\u200b\uff0c\u200b\u4f46\u200b binlog \u200b\u4f1a\u200b\u6bd4\u200b\u5176\u4ed6\u200b\u4e24\u79cd\u200b\u6a21\u5f0f\u200b\u5927\u200b\u5f88\u591a\u200b\uff1b\nbinlog_format=ROW\n# FULL\uff1abinlog\u200b\u8bb0\u5f55\u200b\u6bcf\u200b\u4e00\u884c\u200b\u7684\u200b\u5b8c\u6574\u200b\u53d8\u66f4\u200b MINIMAL\uff1a\u200b\u53ea\u200b\u8bb0\u5f55\u200b\u5f71\u54cd\u200b\u540e\u200b\u7684\u200b\u884c\u200b\nbinlog_row_image=FULL\n# \u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u5927\u5c0f\u200b\nmax_binlog_size=100M\n# \u200b\u5b9a\u4e49\u200b\u6e05\u9664\u200b\u8fc7\u671f\u200b\u65e5\u5fd7\u200b\u7684\u200b\u65f6\u95f4\u200b(\u200b\u8fd9\u91cc\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b7\u200b\u5929\u200b)\nexpire_logs_days=7\n\n# ================= \u2191\u2191\u2191 mysql\u200b\u4e3b\u4ece\u200b\u540c\u6b65\u200b\u914d\u7f6e\u200bend \u2191\u2191\u2191 =================\n\n[mysql]\ndefault-character-set=utf8mb4\n\n[client]\ndefault-character-set=utf8mb4  # \u200b\u8bbe\u7f6e\u200bmysql\u200b\u5ba2\u6237\u7aef\u200b\u9ed8\u8ba4\u200b\u5b57\u7b26\u96c6\u200b\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#_4","title":"\u542f\u52a8\u200b\u5bb9\u5668","text":"<p>Bash<pre><code>cd /data/mysql\ndocker-compose up -d\n</code></pre> </p>","tags":["docker"]},{"location":"blog/2024/11/12/mysql-%E9%83%A8%E7%BD%B2/#3306","title":"!!! \u200b\u5b89\u5168\u200b\u7ec4\u200b\u6dfb\u52a0\u200b 3306 !!!","text":"","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/","title":"PostgreSQL \u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 28 \u200b\u4e2a\u200b\u5b57\u200b  26 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/#_1","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55","text":"Bash<pre><code>mkdir -p /data/postgresql/data\nmkdir -p /data/postgresql/log\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/#yml","title":"\u521b\u5efa\u200byml\u200b\u6587\u4ef6","text":"Bash<pre><code>vim /data/postgresql/docker-compose.yml\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/#_2","title":"\u586b\u5165\u200b\u914d\u7f6e","text":"Bash<pre><code>services:\n  postgres_db: # \u200b\u670d\u52a1\u200b\u540d\u79f0\u200b\n    image: postgres:15.7 # \u200b\u6307\u5b9a\u200b\u955c\u50cf\u200b\u53ca\u5176\u200b\u7248\u672c\u200b\n    container_name: docker_postgres # \u200b\u6307\u5b9a\u200b\u5bb9\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n    environment:\n      POSTGRES_PASSWORD: 123456\n    ports: # \u200b\u7aef\u53e3\u6620\u5c04\u200b\n      - \"5432:5432\"\n    volumes: # \u200b\u6570\u636e\u200b\u6301\u4e45\u200b\u5316\u200b\u7684\u200b\u914d\u7f6e\u200b\n      - /data/postgresql/data:/var/lib/postgresql/data\n      - /data/postgresql/log:/var/log/postgresql\n    logging:\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    networks:  # \u200b\u7f51\u7edc\u200b\u914d\u7f6e\u200b\n      - pub-network  # \u200b\u52a0\u5165\u200b\u5230\u200b pub-network \u200b\u7f51\u7edc\u200b\n\nnetworks:  # \u200b\u7f51\u7edc\u200b\n  pub-network:\n      driver: bridge\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/#_3","title":"\u542f\u52a8\u200b\u5bb9\u5668","text":"Bash<pre><code>cd /data/postgresql\ndocker-compose up -d\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/postgresql-%E9%83%A8%E7%BD%B2/#5432","title":"!!! \u200b\u5b89\u5168\u200b\u7ec4\u200b\u6dfb\u52a0\u200b 5432 !!!","text":"","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/","title":"Redis \u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 36 \u200b\u4e2a\u200b\u5b57\u200b  35 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#_1","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55","text":"Bash<pre><code>#\u200b\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55\u200b\nmkdir -p /data/redis\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#yml","title":"\u521b\u5efa\u200byml\u200b\u6587\u4ef6","text":"Bash<pre><code>vim /data/redis/docker-compose.yml\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#_2","title":"\u586b\u5165\u200b\u914d\u7f6e","text":"Bash<pre><code>version: '3.8'\nservices:\n  redis:\n    image: redis:7.0.11\n    container_name: redis\n    restart: always\n    ports:\n      - 6379:6379\n    volumes:\n      - /data/redis/redis.conf:/etc/redis/redis.conf\n      - /data/redis/data:/data\n      - /data/redis/logs:/logs\n    command: [\"redis-server\",\"/etc/redis/redis.conf\"]\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#_3","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u914d\u7f6e\u6587\u4ef6","text":"Bash<pre><code>vim /data/redis/redis.conf\n</code></pre> Bash<pre><code>protected-mode no\nport 6379\ntimeout 0\n#rdb\u200b\u914d\u7f6e\u200b\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\ndbfilename dump.rdb\ndir /data\nappendonly yes\nappendfsync everysec\n#\u200b\u8bbe\u7f6e\u200b\u4f60\u200b\u7684\u200bredis\u200b\u5bc6\u7801\u200b\nrequirepass 123456\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#_4","title":"\u542f\u52a8\u200b\u5bb9\u5668","text":"Bash<pre><code>cd /data/redis\ndocker-compose up -d\n#\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u5f3a\u5236\u200b\u91cd\u65b0\u200b\u6784\u5efa\u200b\ndocker-compose up --force-recreate -d\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/redis-%E9%83%A8%E7%BD%B2/#6379","title":"!!! \u200b\u5b89\u5168\u200b\u7ec4\u200b\u6dfb\u52a0\u200b 6379 !!!","text":"","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/","title":"RocketMQ \u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 236 \u200b\u4e2a\u200b\u5b57\u200b  225 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 4 \u200b\u5206\u949f\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#_1","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55","text":"Bash<pre><code>#\u200b\u521b\u5efa\u200b\u6302\u8f7d\u200b\u76ee\u5f55\u200b\nmkdir -p /data/rocketmq/namesrv;\nmkdir -p /data/rocketmq/broker/conf;\nmkdir -p /data/rocketmq/broker/lib;\nmkdir -p /data/rocketmq/console/data;\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#_2","title":"\u521b\u5efa\u200b\u6302\u8f7d\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6","text":"<p>Bash<pre><code>vi /data/rocketmq/broker/conf/broker.conf\n</code></pre> Bash<pre><code>#\u200b\u6240\u5c5e\u200b\u96c6\u7fa4\u200b\u540d\u5b57\u200b\nbrokerClusterName=DefaultCluster\n\n#broker\u200b\u540d\u5b57\u200b\uff0c\u200b\u6ce8\u610f\u200b\u6b64\u5904\u200b\u4e0d\u540c\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u586b\u5199\u200b\u7684\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u5982\u679c\u200b\u5728\u200bbroker-a.properties\u200b\u4f7f\u7528\u200b:broker-a,\n#\u200b\u5728\u200bbroker-b.properties\u200b\u4f7f\u7528\u200b:broker-b\nbrokerName=broker-a\n\n#0 \u200b\u8868\u793a\u200bMaster\uff0c&gt;0 \u200b\u8868\u793a\u200bSlave\nbrokerId=0\n\n#nameServer\u200b\u5730\u5740\u200b\uff0c\u200b\u5206\u200b\u53f7\u200b\u5206\u5272\u200b\n#namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876\nnamesrvAddr=rocketmq-namesrv:9876\n\n#\u200b\u542f\u52a8\u200bIP,\u200b\u5982\u679c\u200b docker \u200b\u62a5\u200b com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed\n# \u200b\u89e3\u51b3\u200b\u65b9\u5f0f\u200b1 \u200b\u52a0\u4e0a\u200b\u4e00\u53e5\u200bproducer.setVipChannelEnabled(false);\uff0c\u200b\u89e3\u51b3\u200b\u65b9\u5f0f\u200b2 brokerIP1 \u200b\u8bbe\u7f6e\u200b\u5bbf\u4e3b\u673a\u200bIP\uff0c\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200bdocker \u200b\u5185\u90e8\u200bIP\nbrokerIP1=120.26.2.151\n\n#\u200b\u5728\u200b\u53d1\u9001\u200b\u6d88\u606f\u200b\u65f6\u200b\uff0c\u200b\u81ea\u52a8\u200b\u521b\u5efa\u200b\u670d\u52a1\u5668\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7684\u200btopic\uff0c\u200b\u9ed8\u8ba4\u200b\u521b\u5efa\u200b\u7684\u200b\u961f\u5217\u200b\u6570\u200b\ndefaultTopicQueueNums=4\n\n#\u200b\u662f\u5426\u200b\u5141\u8bb8\u200b Broker \u200b\u81ea\u52a8\u200b\u521b\u5efa\u200bTopic\uff0c\u200b\u5efa\u8bae\u200b\u7ebf\u4e0b\u200b\u5f00\u542f\u200b\uff0c\u200b\u7ebf\u4e0a\u200b\u5173\u95ed\u200b \uff01\uff01\uff01\u200b\u8fd9\u91cc\u200b\u4ed4\u7ec6\u200b\u770b\u200b\u662f\u200bfalse\uff0cfalse\uff0cfalse\nautoCreateTopicEnable=true\n\n#\u200b\u662f\u5426\u200b\u5141\u8bb8\u200b Broker \u200b\u81ea\u52a8\u200b\u521b\u5efa\u200b\u8ba2\u9605\u200b\u7ec4\u200b\uff0c\u200b\u5efa\u8bae\u200b\u7ebf\u4e0b\u200b\u5f00\u542f\u200b\uff0c\u200b\u7ebf\u4e0a\u200b\u5173\u95ed\u200b\nautoCreateSubscriptionGroup=true\n\n#Broker \u200b\u5bf9\u5916\u200b\u670d\u52a1\u200b\u7684\u200b\u76d1\u542c\u200b\u7aef\u53e3\u200b\nlistenPort=10911\n\n#\u200b\u6b64\u53c2\u6570\u200b\u63a7\u5236\u200b\u662f\u5426\u200b\u5f00\u542f\u200b\u5bc6\u7801\u200b,\u200b\u4e0d\u200b\u5f00\u542f\u200b\u53ef\u200b\u8bbe\u7f6e\u200bfalse\naclEnable=true\n\n#\u200b\u5220\u9664\u200b\u6587\u4ef6\u200b\u65f6\u95f4\u200b\u70b9\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u51cc\u6668\u200b4\u200b\u70b9\u200b\ndeleteWhen=04\n\n#\u200b\u6587\u4ef6\u200b\u4fdd\u7559\u200b\u65f6\u95f4\u200b\uff0c\u200b\u9ed8\u8ba4\u200b48\u200b\u5c0f\u65f6\u200b\nfileReservedTime=120\n\n#commitLog\u200b\u6bcf\u4e2a\u200b\u6587\u4ef6\u200b\u7684\u200b\u5927\u5c0f\u200b\u9ed8\u8ba4\u200b1G\nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue\u200b\u6bcf\u4e2a\u200b\u6587\u4ef6\u200b\u9ed8\u8ba4\u200b\u5b58\u200b30W\u200b\u6761\u200b\uff0c\u200b\u6839\u636e\u200b\u4e1a\u52a1\u200b\u60c5\u51b5\u200b\u8c03\u6574\u200b\nmapedFileSizeConsumeQueue=300000\n\n#destroyMapedFileIntervalForcibly=120000\n#redeleteHangedFileInterval=120000\n#\u200b\u68c0\u6d4b\u200b\u7269\u7406\u200b\u6587\u4ef6\u200b\u78c1\u76d8\u7a7a\u95f4\u200b\ndiskMaxUsedSpaceRatio=88\n#\u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\n#storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store\n#commitLog \u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\n#storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog\n#\u200b\u6d88\u8d39\u200b\u961f\u5217\u200b\u5b58\u50a8\u200b\n#storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue\n#\u200b\u6d88\u606f\u200b\u7d22\u5f15\u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\n#storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index\n#checkpoint \u200b\u6587\u4ef6\u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\n#storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint\n#abort \u200b\u6587\u4ef6\u200b\u5b58\u50a8\u200b\u8def\u5f84\u200b\n#abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort\n#\u200b\u9650\u5236\u200b\u7684\u200b\u6d88\u606f\u200b\u5927\u5c0f\u200b\nmaxMessageSize=65536\n\n#flushCommitLogLeastPages=4\n#flushConsumeQueueLeastPages=2\n#flushCommitLogThoroughInterval=10000\n#flushConsumeQueueThoroughInterval=60000\n\n#Broker \u200b\u7684\u200b\u89d2\u8272\u200b\n#- ASYNC_MASTER \u200b\u5f02\u6b65\u200b\u590d\u5236\u200bMaster\n#- SYNC_MASTER \u200b\u540c\u6b65\u200b\u53cc\u5199\u200bMaster\n#- SLAVE\nbrokerRole=ASYNC_MASTER\n\n#\u200b\u5237\u76d8\u200b\u65b9\u5f0f\u200b\n#- ASYNC_FLUSH \u200b\u5f02\u6b65\u200b\u5237\u76d8\u200b\n#- SYNC_FLUSH \u200b\u540c\u6b65\u200b\u5237\u76d8\u200b\nflushDiskType=ASYNC_FLUSH\n\n#\u200b\u53d1\u6d88\u606f\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u6570\u91cf\u200b\n#sendMessageThreadPoolNums=128\n#\u200b\u62c9\u200b\u6d88\u606f\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u6570\u91cf\u200b\n#pullMessageThreadPoolNums=128\n</code></pre></p> <p><code>brokerIP1=47.99.73.85</code>\u200b\u586b\u200b\u4e0a\u200b\u81ea\u5df1\u200b\u670d\u52a1\u5668\u200b\u516c\u7f51\u200bip\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u9001\u200b\u6d88\u606f\u200b\u8981\u8054\u200b\u8fd9\u4e2a\u200b</p> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u8bbe\u7f6e\u200b\u5bc6\u7801\u200b\u7684\u200b\u9700\u6c42\u200b\uff0cbroker.conf\u200b\u5f00\u542f\u200bacl\u200b\u5bc6\u7801\u200b\u914d\u7f6e\u200b true</p>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#acl","title":"\u521b\u5efa\u200bacl\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5f00\u542f\u200b\u7528\u6237\u540d\u200b\u5bc6\u7801","text":"Bash<pre><code>vi /data/rocketmq/broker/conf/plain_acl.yml\n</code></pre> Bash<pre><code># Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nglobalWhiteRemoteAddresses:\n#  - 47.100.93.*\n#  - 156.254.120.*\n\naccounts:\n    # \u200b\u975e\u200b\u7ba1\u7406\u5458\u200b\n  - accessKey: RocketMQ\n    secretKey: Cjy050119\n    whiteRemoteAddress:\n    admin: false\n    defaultTopicPerm: DENY\n    defaultGroupPerm: SUB\n    topicPerms:\n      - topicA=DENY\n      - topicB=PUB|SUB\n      - topicC=SUB\n    groupPerms:\n      # the group should convert to retry topic\n      - groupA=DENY\n      - groupB=PUB|SUB\n      - groupC=SUB\n\n    # \u200b\u7ba1\u7406\u5458\u200b\n  - accessKey: admin123456\n    secretKey: Cjy123456\n    whiteRemoteAddress: \n    # if it is admin, it could access all resources\n    admin: true\n</code></pre> <p>\u200b\u5bc6\u7801\u200b\u4e0d\u80fd\u200b\u5c0f\u4e8e\u200b6\u200b\u4f4d\u6570\u200b \u200b\u540d\u79f0\u200b\u4e5f\u200b\u4e0d\u80fd\u200b\u5c0f\u4e8e\u200b6\u200b\u4f4d\u200b \u200b\u6743\u9650\u200b\u7684\u200b\u63cf\u8ff0\u200b\u53ef\u200b\u53c2\u8003\u200b\u94fe\u63a5\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#console","title":"\u8bbe\u7f6e\u200bconsole\u200b\u7684\u200b\u8d26\u53f7\u5bc6\u7801","text":"Bash<pre><code>vi  /data/rocketmq/console/data/users.properties\n</code></pre> Bash<pre><code># This file supports hot change, any change will be auto-reloaded without Console restarting.\n# Format: a user per line, username=password[,N] #N is optional, 0 (Normal User); 1 (Admin)\n\n# Define Admin\n# =============\u200b\u7528\u6237\u540d\u200b\u548c\u200b\u5bc6\u7801\u200b\u89c4\u5219\u200b\u300c\u200b\u7528\u6237\u540d\u200b=\u200b\u5bc6\u7801\u200b,\u200b\u6743\u9650\u200b\u300d\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b\u6743\u9650\u200b\u4e3a\u200b1\u200b\u8868\u793a\u200b\u7ba1\u7406\u5458\u200b&gt;\uff0c\u200b\u4e3a\u200b0\u200b\u8868\u793a\u200b\u666e\u901a\u7528\u6237\u200b=============\n# \u200b\u4f8b\u5982\u200b\uff1aadmin=admin123,1\nadmin=123456,1\n\n\n# Define Users\n# =============\u200b\u5c4f\u853d\u200b\u4e0b\u8fb9\u200b\u4e24\u4e2a\u200b\u8d26\u6237\u200b=============\n#user1=user1\n#user2=user2\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#yml","title":"\u521b\u5efa\u200byml\u200b\u6587\u4ef6","text":"<p>Bash<pre><code>vi /data/rocketmq/docker-compose.yml\n</code></pre> Bash<pre><code>version: '3.8'\nservices:\n  rocketmq-namesrv:\n    image: foxiswho/rocketmq:4.8.0\n    container_name: rocketmq-namesrv\n    restart: always\n    ports:\n      - 9876:9876\n    volumes:\n      - ./namesrv/logs:/home/rocketmq/logs\n      - ./namesrv/store:/home/rocketmq/store\n    environment:\n      JAVA_OPT_EXT: \"-Duser.home=/home/rocketmq -Xms128M -Xmx128M -Xmn128m\"\n    command: [\"sh\",\"mqnamesrv\"]\n    networks:\n      rocketmq_net:\n        aliases:\n          - rocketmq-namesrv\n\n\n  rocketmq-broker:\n    image: foxiswho/rocketmq:4.8.0\n    container_name: rocketmq-broker\n    restart: always\n    ports:\n      - 10909:10909\n      - 10911:10911\n    volumes:\n      - ./broker/logs:/home/rocketmq/logs\n      - ./broker/store:/home/rocketmq/store\n      - ./broker/conf/plain_acl.yml:/home/rocketmq/rocketmq-4.8.0/conf/plain_acl.yml\n      - ./broker/conf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n      JAVA_OPT_EXT: \"-Duser.home=/home/rocketmq -Xms128m -Xmx128m -Xmn128m\"\n    command: [\"sh\",\"mqbroker\",\"-c\",\"/etc/rocketmq/broker.conf\"]\n    depends_on:\n      - rocketmq-namesrv\n    networks:\n      rocketmq_net:\n        aliases:\n          - rocketmq-broker\n\n\n  rocketmq-console:\n    image: iamverygood/rocketmq-console:4.7.1\n    container_name: rocketmq-console\n    restart: always\n    ports:\n      - 8180:8080\n    volumes:\n      - ./console/data:/tmp/rocketmq-console/data\n    environment:\n      JAVA_OPTS: \"-Drocketmq.namesrv.addr=rocketmq-namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false -Drocketmq.config.loginRequired=true -Drocketmq.config.aclEnabled=true -Drocketmq.config.accessKey=admin123456 -Drocketmq.config.secretKey=Cjy123456\"\n    depends_on:\n      - rocketmq-namesrv\n    networks:\n      rocketmq_net:\n        aliases:\n          - rocketmq-console\n\nnetworks:\n  rocketmq_net:\n    name: rocketmq_net\n    driver: bridge\n</code></pre></p> <p>\u200b\u5982\u679c\u200bacl\u200b\u5bc6\u7801\u200b\u6539\u4e86\u200b\uff0c\u200b\u8bb0\u5f97\u200b\u628a\u200byml\u200b\u7684\u200bconsole\u200b\u5e10\u53f7\u5bc6\u7801\u200b\u4e5f\u200b\u4e00\u540c\u200b\u66f4\u6539\u200b <code>-Drocketmq.config.accessKey=admin123456</code> <code>-Drocketmq.config.secretKey=Cjy123456</code> \u200b\u6388\u4e88\u200b\u76ee\u5f55\u200b\u6743\u9650\u200b</p> Bash<pre><code>#\u200b\u76ee\u5f55\u200b\u6743\u9650\u200b\uff1a\nchmod -R 777 /data/rocketmq/namesrv/;\nchmod -R 777 /data/rocketmq/broker/;\nchmod -R 777 /data/rocketmq/console/;\n</code></pre>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#9876109118180","title":"\uff01\uff01\u200b\u5b89\u5168\u200b\u7ec4\u200b\u6dfb\u52a0\u200b\u7aef\u53e3\u200b 9876\uff0c10911\uff0c8180 \uff01\uff01","text":"Bash<pre><code>cd /data/rocketmq\ndocker-compose up -d\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7b2c\u4e00\u6b21\u200b\u4f1a\u200b\u542f\u52a8\u200b\u4e0d\u200b\u6210\u529f\u200b\uff0c\u200b\u56e0\u4e3a\u200bbroker\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u5806\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6ca1\u6709\u200b\u6743\u9650\u200b\u3002\u200b\u518d\u200b\u6267\u884c\u200b\u4e00\u904d\u200b\u6743\u9650\u200b\u547d\u4ee4\u200b Bash<pre><code>#\u200b\u76ee\u5f55\u200b\u6743\u9650\u200b\uff1a\nchmod -R 777 /data/rocketmq/namesrv/;\nchmod -R 777 /data/rocketmq/broker/;\nchmod -R 777 /data/rocketmq/console/;\n</code></pre> \u200b\u628a\u200b\u542f\u52a8\u200b\u7684\u200bmq\u200b\u76f8\u5173\u200b\u955c\u50cf\u200bstop\u200b\u540e\u200b\uff0crm \u200b\u518d\u200b\u91cd\u65b0\u542f\u52a8\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e86\u200b</p>","tags":["docker"]},{"location":"blog/2024/11/12/rocketmq-%E9%83%A8%E7%BD%B2/#_3","title":"\u542f\u52a8\u200b\u63a7\u5236\u53f0","text":"<p>\u200b\u542f\u52a8\u200b\u540e\u200b\u53ef\u4ee5\u200b\u767b\u5f55\u200b\u63a7\u5236\u53f0\u200b <code>http://ip:8180/</code> \u200b\u8f93\u5165\u200b\u8d26\u53f7\u5bc6\u7801\u200b <code>admin</code> <code>123456</code></p>","tags":["docker"]},{"location":"blog/2024/11/12/docker/","title":"Docker","text":"<p> \u200b\u7ea6\u200b 219 \u200b\u4e2a\u200b\u5b57\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p></p>","tags":["docker"]},{"location":"blog/2024/11/12/docker/#docker_1","title":"docker \u200b\u5e38\u7528\u547d\u4ee4","text":"<ol> <li>\u200b\u62c9\u53d6\u200bdocker\u200b\u955c\u50cf\u200b <code>docker pull image_name</code></li> <li>\u200b\u67e5\u770b\u200b\u5bbf\u4e3b\u673a\u200b\u4e0a\u200b\u7684\u200b\u955c\u50cf\u200b\uff0cDocker\u200b\u955c\u50cf\u200b\u4fdd\u5b58\u200b\u5728\u200b/var/lib/docker\u200b\u76ee\u5f55\u200b\u4e0b\u200b: <code>docker images</code></li> <li>\u200b\u5220\u9664\u200b\u955c\u50cf\u200b <code>docker rmi docker.io/tomcat:7.0.77-jre7 \u200b\u6216\u8005\u200b docker rmi b39c68b7af30</code></li> <li>\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u6709\u200b\u54ea\u4e9b\u200b\u5bb9\u5668\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b <code>docker ps</code></li> <li>\u200b\u67e5\u770b\u200b\u6240\u6709\u200b\u5bb9\u5668\u200b <code>docker ps -a</code></li> <li>\u200b\u542f\u52a8\u200b\u3001\u200b\u505c\u6b62\u200b\u3001\u200b\u91cd\u542f\u200b\u5bb9\u5668\u200b\u547d\u4ee4\u200b\uff1a <code>docker start container_name/container_id</code> <code>docker stop container_name/container_id</code> <code>docker restart container_name/container_id</code></li> <li>\u200b\u540e\u53f0\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200b\u5bb9\u5668\u200b\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u60f3\u200b\u8fdb\u5165\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u5bb9\u5668\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200battach\u200b\u547d\u4ee4\u200b\uff1a <code>docker attach container_name/container_id</code></li> <li>\u200b\u5220\u9664\u200b\u5bb9\u5668\u200b\u7684\u200b\u547d\u4ee4\u200b\uff1a <code>docker rm container_name/container_id</code></li> <li>\u200b\u5220\u9664\u200b\u6240\u6709\u200b\u505c\u6b62\u200b\u7684\u200b\u5bb9\u5668\u200b\uff1a <code>docker rm $(docker ps -a -q)</code></li> <li>\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u7cfb\u7edf\u200bDocker\u200b\u4fe1\u606f\u200b <code>docker info</code></li> <li>\u200b\u4ece\u200bDocker hub\u200b\u4e0a\u200b\u4e0b\u8f7d\u200b\u67d0\u4e2a\u200b\u955c\u50cf\u200b: <code>docker pull centos:latest docker pull centos:latest</code></li> <li>\u200b\u67e5\u627e\u200bDocker Hub\u200b\u4e0a\u200b\u7684\u200bnginx\u200b\u955c\u50cf\u200b <code>docker search nginx</code></li> <li>\u200b\u6267\u884c\u200b<code>docker pull centos</code>\u200b\u4f1a\u200b\u5c06\u200bCentos\u200b\u8fd9\u4e2a\u200b\u4ed3\u5e93\u200b\u4e0b\u9762\u200b\u7684\u200b\u6240\u6709\u200b\u955c\u50cf\u200b\u4e0b\u8f7d\u200b\u5230\u200b\u672c\u5730\u200brepository\u3002</li> </ol>","tags":["docker"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","title":"linux\u200b\u73af\u5883\u200b\u90e8\u7f72","text":"<p> \u200b\u7ea6\u200b 79 \u200b\u4e2a\u200b\u5b57\u200b  43 \u200b\u884c\u200b\u4ee3\u7801\u200b  1 \u200b\u5f20\u200b\u56fe\u7247\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>","tags":["linux"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#ssh","title":"SSH\u200b\u8fde\u63a5","text":"<p>\u200b\u6211\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200bmacos\uff0c\u200b\u9009\u62e9\u200b\u8f6f\u4ef6\u200b Termius \u200b\u8fdb\u884c\u200bSSH\u200b\u8fdc\u7a0b\u200b\u8fde\u63a5\u200b  </p>","tags":["linux"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#linux_1","title":"linux \u200b\u7cfb\u7edf\u200b\u73af\u5883","text":"Bash<pre><code>[root@iZbp12idmwavjjcx2k19kjZ ~]# cat /etc/os-release \nNAME=\"Alibaba Cloud Linux\"\nVERSION=\"3 (OpenAnolis Edition)\"\nID=\"alinux\"\nID_LIKE=\"rhel fedora centos anolis\"\nVERSION_ID=\"3\"\nVARIANT=\"OpenAnolis Edition\"\nVARIANT_ID=\"openanolis\"\nALINUX_MINOR_ID=\"2104\"\nALINUX_UPDATE_ID=\"10\"\nPLATFORM_ID=\"platform:al8\"\nPRETTY_NAME=\"Alibaba Cloud Linux 3.2104 U10 (OpenAnolis Edition)\"\nANSI_COLOR=\"0;31\"\nHOME_URL=\"https://www.aliyun.com/\"\n</code></pre>","tags":["linux"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#docker","title":"\u5b89\u88c5\u200bdocker","text":"Bash<pre><code># \u200b\u66f4\u65b0\u200byum\nyum upgrade\n\n# \u200b\u8bbe\u7f6e\u200b\u955c\u50cf\u200b\u4ed3\u5e93\u200b (\u200b\u963f\u91cc\u200b\u4e91\u200b\u955c\u50cf\u200b)\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# \u200b\u5b89\u88c5\u200bdocker\nyum install docker-ce\n\n# \u200b\u542f\u52a8\u200bdocker\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# \u200b\u67e5\u770b\u200bdocker \u200b\u7248\u672c\u200b\ndocker --version\n</code></pre>","tags":["linux"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#docker-compose","title":"\u5b89\u88c5\u200b docker-compose","text":"<p>Bash<pre><code># \u200b\u5148\u200b\u6267\u884c\u200b\u8fd9\u200b\u4e24\u884c\u200b\u547d\u4ee4\u200b\uff0c\u200b\u76f4\u63a5\u200bpip\u200b\u4f1a\u200b\u62a5\u9519\u200b\nsudo python3 -m pip install -U pip\nsudo python3 -m pip install -U setuptools\n\n# \u200b\u5b89\u88c5\u200bdocker-compose\npip install docker-compose\n\n# \u200b\u67e5\u770b\u200b docker-compose \u200b\u7248\u672c\u200b\ndocker-compose --version\n</code></pre> </p>","tags":["linux"]},{"location":"blog/2024/11/12/linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#docker_1","title":"docker \u200b\u914d\u7f6e\u200b\u56fd\u5185\u200b\u955c\u50cf\u200b\u6e90","text":"<p>\u200b\u914d\u7f6e\u200b\u56fd\u5185\u200b\u955c\u50cf\u200b\u6e90\u200b \u200b\u955c\u50cf\u200b\u6e90\u5730\u5740\u200b\u5927\u5168\u200b</p> Bash<pre><code>vim  /etc/docker/daemon.json\n</code></pre> Text Only<pre><code>{\"registry-mirrors\": [\n\"https://docker.1panel.dev\",\n\"https://docker.fxxk.dedyn.io\",\n\"https://docker.xn--6oq72ry9d5zx.cn\",\n\"https://docker.m.daocloud.io\",\n\"https://a.ussh.net\",\n\"https://docker.zhai.cm\"]}\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u955c\u50cf\u200b\u6e90\u200b 2024/10/10 \u200b\u53ef\u7528\u200b</p> <p>\u200b\u91cd\u542f\u200bdocker\u200b\u670d\u52a1\u200b</p> Bash<pre><code># \u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u914d\u7f6e\u6587\u4ef6\u200b\nsudo systemctl daemon-reload\n# \u200b\u91cd\u65b0\u542f\u52a8\u200bdocker\u200b\u670d\u52a1\u200b\nsudo service docker restart\n</code></pre>","tags":["linux"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/","title":"git commit \u200b\u89c4\u8303","text":"<p> \u200b\u7ea6\u200b 679 \u200b\u4e2a\u200b\u5b57\u200b  33 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 3 \u200b\u5206\u949f\u200b</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#commit-message","title":"Commit message \u200b\u683c\u5f0f","text":"<p>\u200b\u6bcf\u6b21\u200b\u63d0\u4ea4\u200b\uff0cCommit message \u200b\u90fd\u200b\u5305\u62ec\u200b\u4e09\u4e2a\u200b\u90e8\u5206\u200b\uff1aheader\uff0cbody \u200b\u548c\u200b footer\u3002</p> git commit<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n&lt;BLANK LINE&gt;\n&lt;body&gt;\n&lt;BLANK LINE&gt;\n&lt;footer&gt;\n</code></pre> <p>\u200b\u5176\u4e2d\u200b\uff0cheader \u200b\u662f\u200b\u5fc5\u9700\u200b\u7684\u200b\uff0cbody \u200b\u548c\u200b footer \u200b\u53ef\u4ee5\u200b\u7701\u7565\u200b\u3002 \u200b\u4e0d\u7ba1\u200b\u662f\u200b\u54ea\u200b\u4e00\u4e2a\u200b\u90e8\u5206\u200b\uff0c\u200b\u4efb\u4f55\u200b\u4e00\u884c\u200b\u90fd\u200b\u4e0d\u5f97\u200b\u8d85\u8fc7\u200b72\u200b\u4e2a\u5b57\u7b26\u200b\uff08\u200b\u6216\u200b100\u200b\u4e2a\u5b57\u7b26\u200b\uff09\u3002\u200b\u8fd9\u662f\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u81ea\u52a8\u200b\u6362\u884c\u200b\u5f71\u54cd\u200b\u7f8e\u89c2\u200b\u3002</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#header","title":"Header","text":"<p>Header\u200b\u90e8\u5206\u200b\u53ea\u6709\u200b\u4e00\u884c\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e09\u4e2a\u200b\u5b57\u200b\u6bb5\u200b\uff1atype\uff08\u200b\u5fc5\u9700\u200b\uff09\u3001scope\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u548c\u200bsubject\uff08\u200b\u5fc5\u9700\u200b\uff09\u3002</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#1-type","title":"1. type","text":"<p>\u200b\u7528\u4e8e\u200b\u8bf4\u660e\u200b commit \u200b\u7684\u200b\u7c7b\u522b\u200b\uff0c\u200b\u53ea\u200b\u5141\u8bb8\u200b\u4f7f\u7528\u200b\u4e0b\u9762\u200b7\u200b\u4e2a\u200b\u6807\u8bc6\u200b\u3002</p> <ul> <li>feat\uff1a\u200b\u65b0\u200b\u529f\u80fd\u200b\uff08feature\uff09</li> <li>fix\uff1a\u200b\u4fee\u8865\u200bbug</li> <li>docs\uff1a\u200b\u6587\u6863\u200b\uff08documentation\uff09</li> <li>style\uff1a \u200b\u683c\u5f0f\u200b\uff08\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u4ee3\u7801\u8fd0\u884c\u200b\u7684\u200b\u53d8\u52a8\u200b\uff09</li> <li>refactor\uff1a\u200b\u91cd\u6784\u200b\uff08\u200b\u5373\u200b\u4e0d\u662f\u200b\u65b0\u589e\u200b\u529f\u80fd\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u662f\u200b\u4fee\u6539\u200bbug\u200b\u7684\u200b\u4ee3\u7801\u200b\u53d8\u52a8\u200b\uff09</li> <li>test\uff1a\u200b\u589e\u52a0\u200b\u6d4b\u8bd5\u200b</li> <li>chore\uff1a\u200b\u6784\u5efa\u200b\u8fc7\u7a0b\u200b\u6216\u200b\u8f85\u52a9\u5de5\u5177\u200b\u7684\u200b\u53d8\u52a8\u200b</li> </ul> <p>\u200b\u5982\u679c\u200btype\u200b\u4e3a\u200bfeat\u200b\u548c\u200bfix\uff0c\u200b\u5219\u200b\u8be5\u200b commit \u200b\u5c06\u200b\u80af\u5b9a\u200b\u51fa\u73b0\u200b\u5728\u200b Change log \u200b\u4e4b\u4e2d\u200b\u3002\u200b\u5176\u4ed6\u200b\u60c5\u51b5\u200b\uff08docs\u3001chore\u3001style\u3001refactor\u3001test\uff09\u200b\u7531\u200b\u4f60\u200b\u51b3\u5b9a\u200b\uff0c\u200b\u8981\u200b\u4e0d\u8981\u200b\u653e\u5165\u200b Change log\uff0c\u200b\u5efa\u8bae\u200b\u662f\u200b\u4e0d\u8981\u200b\u3002</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#2-scope","title":"2. scope","text":"<p>scope\u200b\u7528\u4e8e\u200b\u8bf4\u660e\u200b commit \u200b\u5f71\u54cd\u200b\u7684\u200b\u8303\u56f4\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6570\u636e\u200b\u5c42\u200b\u3001\u200b\u63a7\u5236\u200b\u5c42\u200b\u3001\u200b\u89c6\u56fe\u200b\u5c42\u200b\u7b49\u7b49\u200b\uff0c\u200b\u89c6\u200b\u9879\u76ee\u200b\u4e0d\u540c\u200b\u800c\u200b\u4e0d\u540c\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\u5728\u200bAngular\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView\u200b\u7b49\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u4fee\u6539\u200b\u5f71\u54cd\u200b\u4e86\u200b\u4e0d\u6b62\u200b\u4e00\u4e2a\u200bscope\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b * \u200b\u4ee3\u66ff\u200b\u3002</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#3-subject","title":"3. subject","text":"<p>subject\u200b\u662f\u200b commit \u200b\u76ee\u7684\u200b\u7684\u200b\u7b80\u77ed\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u4e0d\u200b\u8d85\u8fc7\u200b50\u200b\u4e2a\u5b57\u7b26\u200b\u3002</p> <p>\u200b\u5176\u4ed6\u200b\u6ce8\u610f\u4e8b\u9879\u200b\uff1a</p> <ul> <li>\u200b\u4ee5\u200b\u52a8\u8bcd\u200b\u5f00\u5934\u200b\uff0c\u200b\u4f7f\u7528\u200b\u7b2c\u4e00\u4eba\u79f0\u200b\u73b0\u5728\u200b\u65f6\u200b\uff0c\u200b\u6bd4\u5982\u200bchange\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200bchanged\u200b\u6216\u200bchanges</li> <li>\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u6bcd\u200b\u5c0f\u5199\u200b</li> <li>\u200b\u7ed3\u5c3e\u200b\u4e0d\u200b\u52a0\u200b\u53e5\u53f7\u200b\uff08.\uff09</li> </ul>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#body","title":"Body","text":"<p>Body \u200b\u90e8\u5206\u200b\u662f\u200b\u5bf9\u200b\u672c\u6b21\u200b commit \u200b\u7684\u200b\u8be6\u7ec6\u63cf\u8ff0\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5206\u6210\u200b\u591a\u884c\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8303\u4f8b\u200b\u3002</p> git commit<pre><code>More detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n</code></pre> <p>\u200b\u6709\u200b3\u200b\u4e2a\u200b\u6ce8\u610f\u200b\u70b9\u200b:</p> <ul> <li>\u200b\u4f7f\u7528\u200b\u7b2c\u4e00\u4eba\u79f0\u200b\u73b0\u5728\u200b\u65f6\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200bchange\u200b\u800c\u200b\u4e0d\u662f\u200bchanged\u200b\u6216\u200bchanges\u3002</li> <li>\u200b\u6c38\u8fdc\u200b\u522b\u5fd8\u4e86\u200b\u7b2c\u200b2\u200b\u884c\u662f\u200b\u7a7a\u884c\u200b</li> <li>\u200b\u5e94\u8be5\u200b\u8bf4\u660e\u200b\u4ee3\u7801\u200b\u53d8\u52a8\u200b\u7684\u200b\u52a8\u673a\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u4ee5\u524d\u200b\u884c\u4e3a\u200b\u7684\u200b\u5bf9\u6bd4\u200b\u3002</li> </ul>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#footer","title":"Footer","text":"<p>Footer \u200b\u90e8\u5206\u200b\u53ea\u200b\u7528\u4e8e\u200b\u4ee5\u4e0b\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff1a</p> <ol> <li>\u200b\u4e0d\u200b\u517c\u5bb9\u200b\u53d8\u52a8\u200b</li> </ol> <p>\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u4ee3\u7801\u200b\u4e0e\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u7248\u672c\u200b\u4e0d\u200b\u517c\u5bb9\u200b\uff0c\u200b\u5219\u200b Footer \u200b\u90e8\u5206\u200b\u4ee5\u200bBREAKING CHANGE\u200b\u5f00\u5934\u200b\uff0c\u200b\u540e\u9762\u200b\u662f\u200b\u5bf9\u200b\u53d8\u52a8\u200b\u7684\u200b\u63cf\u8ff0\u200b\u3001\u200b\u4ee5\u53ca\u200b\u53d8\u52a8\u200b\u7406\u7531\u200b\u548c\u200b\u8fc1\u79fb\u200b\u65b9\u6cd5\u200b\u3002</p> git commit<pre><code>BREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n</code></pre> <ol> <li>\u200b\u5173\u95ed\u200bissue</li> </ol> <p>\u200b\u5982\u679c\u200b\u5f53\u524d\u200b commit \u200b\u9488\u5bf9\u200b\u67d0\u4e2a\u200bissue\uff0c\u200b\u90a3\u4e48\u200b\u53ef\u4ee5\u200b\u5728\u200b Footer \u200b\u90e8\u5206\u200b\u5173\u95ed\u200b\u8fd9\u4e2a\u200b issue \u3002</p> git commit<pre><code>Closes #234\n</code></pre>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#revert","title":"Revert","text":"<p>\u200b\u8fd8\u6709\u200b\u4e00\u79cd\u200b\u7279\u6b8a\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5982\u679c\u200b\u5f53\u524d\u200b commit \u200b\u7528\u4e8e\u200b\u64a4\u9500\u200b\u4ee5\u524d\u200b\u7684\u200b commit\uff0c\u200b\u5219\u200b\u5fc5\u987b\u200b\u4ee5\u200brevert:\u200b\u5f00\u5934\u200b\uff0c\u200b\u540e\u9762\u200b\u8ddf\u7740\u200b\u88ab\u200b\u64a4\u9500\u200b Commit \u200b\u7684\u200b Header\u3002</p> git commit<pre><code>revert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n</code></pre> <p>Body\u200b\u90e8\u5206\u200b\u7684\u200b\u683c\u5f0f\u200b\u662f\u200b\u56fa\u5b9a\u200b\u7684\u200b\uff0c\u200b\u5fc5\u987b\u200b\u5199\u6210\u200b<code>This reverts commit &amp;lt;hash&gt;.</code>\uff0c\u200b\u5176\u4e2d\u200b\u7684\u200bhash\u200b\u662f\u200b\u88ab\u200b\u64a4\u9500\u200b commit \u200b\u7684\u200b SHA \u200b\u6807\u8bc6\u7b26\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u5f53\u524d\u200b commit \u200b\u4e0e\u200b\u88ab\u200b\u64a4\u9500\u200b\u7684\u200b commit\uff0c\u200b\u5728\u200b\u540c\u4e00\u4e2a\u200b\u53d1\u5e03\u200b\uff08release\uff09\u200b\u91cc\u9762\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5b83\u4eec\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u51fa\u73b0\u200b\u5728\u200b Change log \u200b\u91cc\u9762\u200b\u3002\u200b\u5982\u679c\u200b\u4e24\u8005\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u53d1\u5e03\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5f53\u524d\u200b commit\uff0c\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u5728\u200b Change log \u200b\u7684\u200bReverts\u200b\u5c0f\u6807\u9898\u200b\u4e0b\u9762\u200b\u3002</p>","tags":["git"]},{"location":"blog/2024/11/21/git-commit-%E8%A7%84%E8%8C%83/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>git commit \u200b\u89c4\u8303\u200b\u6307\u5357\u200b</p>","tags":["git"]},{"location":"blog/archive/2024/","title":"2024","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/cs/","title":"CS","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/tools/","title":"tools","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/algorithm/","title":"Algorithm","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/docker/","title":"docker","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/linux/","title":"linux","text":"<p> \u200b\u7ea6\u200b 1 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/category/hello-world/","title":"Hello World","text":"<p> \u200b\u7ea6\u200b 2 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"tag/","title":"Tags","text":"<p> \u200b\u7ea6\u200b 12 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b\u4e0d\u5230\u200b 1 \u200b\u5206\u949f\u200b</p> <p>Tip</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u76f8\u5173\u200b\u6807\u7b7e\u200b\u7684\u200b\u5217\u8868\u200b</p>"},{"location":"tag/#algorithm","title":"Algorithm","text":"<ul> <li>Dijkstra\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6a21\u7248\u200b</li> </ul>"},{"location":"tag/#cs","title":"CS","text":"<ul> <li>Shell Tools and Scripting</li> <li>The Shell</li> </ul>"},{"location":"tag/#helloworld","title":"HelloWorld","text":"<ul> <li>\u200b\u535a\u5ba2\u200b\u6587\u7ae0\u200b\u6d4b\u8bd5\u200b</li> </ul>"},{"location":"tag/#missing","title":"Missing","text":"<ul> <li>Shell Tools and Scripting</li> <li>The Shell</li> </ul>"},{"location":"tag/#docker","title":"docker","text":"<ul> <li>Minio \u200b\u90e8\u7f72\u200b</li> <li>Mysql \u200b\u90e8\u7f72\u200b</li> <li>PostgreSQL \u200b\u90e8\u7f72\u200b</li> <li>Redis \u200b\u90e8\u7f72\u200b</li> <li>RocketMQ \u200b\u90e8\u7f72\u200b</li> <li>docker</li> </ul>"},{"location":"tag/#git","title":"git","text":"<ul> <li>git commit \u200b\u89c4\u8303\u200b</li> </ul>"},{"location":"tag/#java","title":"java","text":"<ul> <li>Frequency-Control-Starter</li> <li>spring</li> </ul>"},{"location":"tag/#javascript","title":"javascript","text":"<ul> <li>JavaScript Code Runner</li> <li>\u200b\u57fa\u672c\u200b\u8bed\u6cd5\u200b</li> </ul>"},{"location":"tag/#linux","title":"linux","text":"<ul> <li>linux\u200b\u73af\u5883\u200b\u90e8\u7f72\u200b</li> </ul>"},{"location":"tag/#spring","title":"spring","text":"<ul> <li>spring</li> <li>1.\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bBean\u200b\u5bb9\u5668\u200b</li> <li>2. \u200b\u5b9e\u73b0\u200bBean\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u6ce8\u518c\u200b\u3001\u200b\u83b7\u53d6\u200b</li> <li>3. \u200b\u57fa\u4e8e\u200bCglib\u200b\u5b9e\u73b0\u200b\u542b\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7b56\u7565\u200b</li> <li>4. \u200b\u4e3a\u200bBean\u200b\u5bf9\u8c61\u200b\u6ce8\u5165\u200b\u5c5e\u6027\u200b\u548c\u200b\u4f9d\u8d56\u200bBean\u200b\u7684\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b</li> <li>5. \u200b\u8bbe\u8ba1\u200b\u4e0e\u200b\u5b9e\u73b0\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u5668\u200b\uff0c\u200b\u4ece\u200bSpring.xml\u200b\u89e3\u6790\u200b\u548c\u200b\u6ce8\u518c\u200bBean\u200b\u5bf9\u8c61\u200b</li> <li>6. \u200b\u5b9e\u73b0\u200b\u5e94\u7528\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u81ea\u52a8\u8bc6\u522b\u200b\u3001\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u3001\u200b\u6269\u5c55\u200b\u673a\u5236\u200b</li> <li>7. \u200b\u5411\u200b\u865a\u62df\u673a\u200b\u6ce8\u518c\u200b\u94a9\u5b50\u200b\uff0c\u200b\u5b9e\u73b0\u200bBean\u200b\u5bf9\u8c61\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u548c\u200b\u9500\u6bc1\u200b\u65b9\u6cd5\u200b</li> <li>8. \u200b\u5b9a\u4e49\u200b\u6807\u8bb0\u200b\u7c7b\u578b\u200bAware\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u611f\u77e5\u200b\u5bb9\u5668\u200b\u5bf9\u8c61\u200b</li> <li>9. \u200b\u5173\u4e8e\u200bBean\u200b\u5bf9\u8c61\u200b\u4f5c\u7528\u57df\u200b\u4ee5\u53ca\u200bFactoryBean\u200b\u7684\u200b\u5b9e\u73b0\u200b\u548c\u200b\u4f7f\u7528\u200b</li> <li>10. \u200b\u57fa\u4e8e\u200b\u89c2\u5bdf\u8005\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5bb9\u5668\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b</li> <li>11. \u200b\u57fa\u4e8e\u200bJDK\u200b\u548c\u200bCglib\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\uff0c\u200b\u5b9e\u73b0\u200bAOP\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b</li> <li>12. \u200b\u628a\u200bAOP\u200b\u52a8\u6001\u200b\u4ee3\u7406\u200b\uff0c\u200b\u878d\u5165\u200b\u5230\u200bBean\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b</li> </ul>"}]}