{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Homepage","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> Text Only<pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> Python<pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"Python<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#highlighting-lines","title":"Highlighting lines","text":"Python<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"about/me/","title":"Hi, there! I am \u200b\u82cd\u955c\u200b\u6708","text":""},{"location":"blog/2024/11/11/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/","title":"\u535a\u5ba2\u200b\u6587\u7ae0\u200b\u6d4b\u8bd5","text":"","tags":["HelloWorld"]},{"location":"blog/2024/11/12/dijkstra%E7%AE%97%E6%B3%95/","title":"Dijkstra\u200b\u7b97\u6cd5","text":"<p>\u200b\u6280\u5de7\u200b\uff1a \u200b\u5982\u679c\u200b\u56fe\u4e3a\u200b\u65e0\u200b\u5411\u200b\u56fe\u200b\uff08\u200b\u6709\u5411\u56fe\u200b\u53cd\u8f6c\u200b\uff09\u200b\u4e14\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8d1f\u8fb9\u200b\uff0c\u200b\u8981\u6c42\u200b\u6c42\u200b\u5404\u4e2a\u200b\u70b9\u200b i \u200b\u5230\u200b\u540c\u4e00\u200b\u7ec8\u70b9\u200b n \u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200bDijkstra\u200b\u7684\u200b\u8d77\u70b9\u200b\u548c\u200b\u7ec8\u70b9\u200b \u200b\u5747\u200b\u4e3a\u200b n\uff0c\u200b\u6c42\u89e3\u200b\u5f97\u5230\u200b\u7684\u200b distance \u200b\u6570\u7ec4\u200b\u5373\u200b \u200b\u5404\u4e2a\u200b\u70b9\u200b i \u200b\u5230\u200b\u7ec8\u70b9\u200b n \u200b\u7684\u200b\u6700\u200b\u77ed\u8ddd\u79bb\u200b\u3002</p> <p>\u200b\u4ee5\u200b743. \u200b\u7f51\u7edc\u200b\u5ef6\u8fdf\u65f6\u95f4\u200b\u4e3a\u4f8b\u200b</p> <p>Dijkstra\u200b\u7b97\u6cd5\u200b\u6a21\u7248\u200b</p> <p>Java \u200b\u9898\u89e3\u200b\uff1a</p> Java<pre><code>class Solution {\n    public int networkDelayTime(int[][] times, int n, int s) {\n        ArrayList&lt;ArrayList&lt;int[]&gt;&gt; graph = new ArrayList&lt;&gt;();\n        // \u200b\u8282\u70b9\u200b\u4e0b\u6807\u200b\u4e3a\u200b 1 - n\n        for (int i = 0; i &lt;= n; i++) {\n            graph.add(new ArrayList&lt;&gt;());\n        }\n        for (int[] edge : times) {\n            graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\n        }\n        int[] distance = new int[n + 1];\n        Arrays.fill(distance, Integer.MAX_VALUE);\n        distance[s] = 0;\n        boolean[] visted = new boolean[n + 1];\n        PriorityQueue&lt;int[]&gt; heap = new PriorityQueue&lt;&gt;((a, b) -&gt; a[1] - b[1]);\n        heap.add(new int[]{s, 0});\n        while (!heap.isEmpty()) {\n            int u = heap.poll()[0];\n            if (visted[u]) {\n                continue;\n            }\n            visted[u] = true;\n            for (int[] edge : graph.get(u)) {\n                int v = edge[0];\n                int w = edge[1];\n                if (!visted[v] &amp;&amp; distance[u] + w &lt; distance[v]) {\n                    distance[v] = distance[u] + w;\n                    heap.add(new int[] {v, distance[u] + w});\n                }\n            }\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 1; i &lt;= n; i++) {\n            if (distance[i] == Integer.MAX_VALUE) {\n                return -1;\n            }\n            ans = Math.max(ans, distance[i]);\n        }\n        return ans;\n    }\n}\n</code></pre> <p>Python \u200b\u9898\u89e3\u200b\uff1a</p> Python<pre><code>class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, s: int) -&gt; int:\n        graph = [[] for _ in range(n + 1)]\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        distance = [inf for _ in range(n + 1)]\n        distance[s] = 0\n        visited = [False for _ in range(n + 1)]\n\n        heap = [(0, s)]\n        while heap:\n            _, u = heappop(heap)\n            if visited[u]:\n                continue\n            visited[u] = True\n            for v, w in graph[u]:\n                if not visited[v] and distance[u] + w &lt; distance[v]:\n                    distance[v] = distance[u] + w\n                    heappush(heap, (distance[v], v))\n        ans = max(distance[1:])\n        return ans if ans &lt; inf else -1\n</code></pre>","tags":["Algorithm"]},{"location":"blog/2024/11/12/docker/","title":"docker","text":"","tags":["docker"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/algorithm/","title":"Algorithm","text":""},{"location":"blog/category/docker/","title":"docker","text":""},{"location":"blog/category/hello-world/","title":"Hello World","text":""},{"location":"tag/","title":"Tags","text":"<p>Tip</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u76f8\u5173\u200b\u6807\u7b7e\u200b\u7684\u200b\u5217\u8868\u200b</p>"},{"location":"tag/#algorithm","title":"Algorithm","text":"<ul> <li>Dijkstra\u200b\u7b97\u6cd5\u200b</li> </ul>"},{"location":"tag/#helloworld","title":"HelloWorld","text":"<ul> <li>\u200b\u535a\u5ba2\u200b\u6587\u7ae0\u200b\u6d4b\u8bd5\u200b</li> </ul>"},{"location":"tag/#docker","title":"docker","text":"<ul> <li>docker</li> </ul>"}]}